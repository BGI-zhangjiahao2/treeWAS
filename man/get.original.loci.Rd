% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/readCFML.R
\name{get.original.loci}
\alias{get.original.loci}
\title{\code{(read.CFML+)} Get original sequence positions of polymorphic loci.}
\usage{
get.original.loci(seqs, dat, sig.snps.names, n.bp = 50,
  suff.length = 2, csv = TRUE, csv.prefix = NULL, NA.thresh = 0.2)
}
\arguments{
\item{seqs}{A \code{DNAbin} object containing the original sequences
input into ClonalFrameML (see details).}

\item{dat}{An object containing the output of the \code{read.CFML} function.}

\item{sig.snps.names}{A character vector containing the names of
polymorphic loci whose original sequence positions you desire (see details).}

\item{n.bp}{An integer specifying the desired length of the flanking
sequence to be returned; by default, 50 (see details).}

\item{suff.length}{An integer specifying the suffix length
of \code{snps} elements; by default, 2 (see details).}

\item{csv}{A logical indicating whether to save the results as a CSV file.}

\item{csv.prefix}{An optional character vector specifying a directory and
filename prefix for the CSV file (if \code{csv=TRUE}); default name/suffix, "sig_loci.csv".
\emph{Please be careful: Any existing file of that name will be overwritten!}}

\item{NA.thresh}{A number between 0 and 1 indicating the max allowable
proportion of NAs that the output sequence fragments can contain.
(if a sequence fragment from row 1 exceeds this threshold,
a sufficiently complete sequence fragment will be sought in subsequent rows); by default, 0.2.}
}
\value{
\code{get.original.loci} returns a list containing:
\enumerate{
\item \code{loci}: The original sequence positions for all polymorphic loci in \code{seqs}.
\item \code{loci.sig}: The original sequence positions for all polymorphic loci in \code{sig.snps.names}.
\item \code{seq.sig}: A list of length \code{sig.snps.names} containing sequence fragments of length \code{n.bp}.
}
}
\description{
If you ran \code{read.CFML} on ClonalFrameML output before running \code{treeWAS},
this function can be used to identify the original sequence positions of your polymorphic loci.
E.g., If \code{treeWAS} identified loci "1417.a" and "2017.g" as significant, \code{get.original.loci}
can identify corresponding sequence positions "1165743" and "1741392" and return
flanking sequence segments.
}
\details{
\strong{seqs} must contain ClonalFrameML \emph{input*},
which can be read in from fasta with \code{read.dna("FILENAME.fasta", format="fasta")}
(*not the ClonalFrameML output file "ML_sequence.fasta" or the \code{seqs} element of \code{read.CFML} output).\cr\cr
\strong{sig.snps.names} can contain any set of \code{colnames(snps)}, for example,
the set of significant loci identified by \code{treeWAS} (\code{out$treeWAS.combined$treeWAS.combined}).\cr\cr
\strong{n.bp} specifies the total length of flanking sequence
(drawn from the first row of \code{seqs} only),
half of which will be on either side of each locus in \code{sig.snps.names}.
Each such sequence will be of total length \code{n.bp+1}, arranged (e.g., with \code{n.bp = 50}) as:\cr
<---25bp---><locus.i><---25bp--->.\cr\cr
\strong{suff.length} tells the \code{removeLastN} function how many characters are used to specify
the allele in \code{sig.snps.names} and \code{colnames(snps)}. For names of the form:
"1234.a", \code{suff.length = 2} (note that the decimal counts as a character).
If \code{snps} names are purely numeric with no alleles indicated
(i.e., they already match names in \code{seqs}), then set \code{suff.length = 0}.
}
\examples{

}
\author{
Caitlin Collins \email{caitiecollins@gmail.com}
}
