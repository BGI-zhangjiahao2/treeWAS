{
    "collab_server" : "",
    "contents" : "\n\n## see \"testing_treeWAS.Rnw\" for original boxplots, ggplot2 etc. code...\n\n## NOTE TO SELF: To install on Imperial PC,\n## must change .libPaths to include the literal path to the directory\n## otherwise represented .libPaths()[1]. Run:\n# .libPaths(c(\"H:/R/win-library/3.2\",\n# \"\\\\\\\\icnas1.cc.ic.ac.uk/cc5512/R/win-library/3.2\",\n# \"C:/Program Files/R/R-3.2.1/library\"))\n\n#########################################\n## fn getting order of tips as plotted ##\n#########################################\nget.tip.order <- function(tree){\n  tree2 <- read.tree(text=write.tree(tree))\n  out <- as.numeric(tree2$tip.label)\n  out <- rev(out)\n  return(out)\n} # end get.tip.order\n\n##################\n## tree (set 1) ##\n##################\n\ntree <- get(load(\"./set1_12_tree.Rdata\"))\nplot(tree)\n\nphen <- get(load(\"./set1_12_phen.Rdata\"))\n\nord <- get.tip.order(tree)\n#phen.ori <- phen\nphen <- phen[ord]\nmyCol <- as.character(phen)\nmyCol <- replace(myCol, which(myCol == \"B\"), \"blue\")\nmyCol <- replace(myCol, which(myCol == \"A\"), \"red\")\nleafCol <- myCol\nmyCol\nedgeCol <- \"black\"\n\nplot(tree, show.tip=FALSE, edge.width=2, edge.color=edgeCol) # edgeCol\naxisPhylo()\ntiplabels(text=tree$tip.label, cex=0.6, adj=c(-0.5, 0), col=leafCol, frame=\"none\", font=1)\n#\n\n#######################################################################################################################\n\n## Replace boxpots with:\n## box < violin < bean plot < beeswarm plot...\n\n####################\n## BEESWARM PLOTS ##\n####################\n\ninstall.packages(\"beeswarm\", dep=TRUE)\nlibrary(beeswarm)\n\n?beeswarm\n\n\n###################\n## BEESWARM PLOT ##   #########################   #########################   #########################\n###################\n#\n# #################################\n# ## EG from beeswarm package... ##\n# #################################\n# data(breast)\n#\n# #########################\n# ## reg. beeswarm plot: ##\n# #########################\n# breast2 <- breast[order(breast$event_survival, breast$ER),]\n#\n# beeswarm(time_survival ~ event_survival, data = breast2, pch = 16,\n#          pwcol = as.numeric(ER), xlab = '',\n#          ylab = 'Follow-up time (months)',\n#          labels = c('Censored', 'Metastasis'))\n# legend('topright', legend = levels(breast$ER), title = 'ER',\n#        pch = 16, col = 1:2)\n#\n# ##########################################\n# ## Reg. beeswarm PLUS boxplot overlaid: ##\n# ##########################################\n# beeswarm(time_survival ~ event_survival, data = breast2, pch = 16,\n#          pwcol = as.numeric(ER), xlab = '',\n#          ylab = 'Follow-up time (months)',\n#          labels = c('Censored', 'Metastasis'))\n# boxplot(time_survival ~ event_survival, data = breast2, add = T,\n#         names = c(\"\",\"\"), col=\"#0000ff22\")\n# legend('topright', legend = levels(breast$ER), title = 'ER',\n#        pch = 16, col = 1:2)\n#\n# #################################################\n# ## GGPLOT2 beeswarm plot PLUS boxplot overlaid ##\n# #################################################\n#\n# ## The trick is to use the beeswarm call\n# ## to get the x and y position.\n# ## Beeswarm creates a dataframe\n# ## from which we can get the necessary positionings...\n#\n# beeswarm <- beeswarm(time_survival ~ event_survival,\n#                      data = breast, method = 'swarm',\n#                      pwcol = ER)[, c(1, 2, 4, 6)]\n# colnames(beeswarm) <- c(\"x\", \"y\", \"ER\", \"event_survival\")\n#\n# library(ggplot2)\n# library(plyr)\n#\n# ## Do not forget to REMOVE the OUTLIERS\n# ## from your boxplot or they will superimpose\n# ## with the points created by geom_point.\n#\n# beeswarm.plot <- ggplot(beeswarm, aes(x, y)) +\n#   xlab(\"\") +\n#   scale_y_continuous(expression(\"Follow-up time (months)\"))\n#\n# beeswarm.plot2 <- beeswarm.plot +\n#   geom_boxplot(aes(x, y, group = round_any(x, 1, round)), outlier.shape = NA)\n#\n# beeswarm.plot3 <- beeswarm.plot2 + geom_point(aes(colour = ER)) +\n#   scale_colour_manual(values = c(\"black\", \"red\")) +\n#   scale_x_continuous(breaks = c(1:2),\n#                      labels = c(\"Censored\", \"Metastasis\"), expand = c(0, 0.5))\n#\n# plot(beeswarm.plot3)\n\n\n\n#\n\n\n#######################################################################################################################\n\n\n###############\n#### SET X ####\n###############\n\n#######################################################################################################################\n\n# ## p.value ##\n# if(i %in% 1:8) p.value <- 0.05\n# if(i %in% 9:16) p.value <- 0.01\n# if(i %in% 17:24) p.value <- 0.001\n# if(i %in% 25:32) p.value <- 0.0001\n#\n# ## p.value.correct ##\n# if(i %in% c(1:4, 9:12, 17:20, 25:28)){\n#   p.value.correct <- \"bonf\"\n# }else{\n#   p.value.correct <- \"fdr\"\n# }\n#\n# ## p.value.by ##\n# if(i %in% c(1,2,9,10,17,18,25,26, ## bonf\n#             5,6,13,14,21,22,29,30)){ ## fdr\n#   p.value.by <- \"count\"\n# }else{\n#   p.value.by <- \"density\"\n# }\n#\n# ## n.snps.sim ##\n# if(i %in% seq(1, 32, 2)){\n#   corr.sim <- corr.sim.ori\n# }else{\n#   corr.sim <- corr.sim.ori[1:length(corr.dat)]\n# }\n\n##############\n## GET DATA ##    #######    #######    #######    #######    #######    #######    #######    #######    #######    #######\n##############\n\nsetwd(\"C:/Cait 2016/Work/Xavier/Sims/set1/\")\n\nset.n <- \"set1\"\n\ndirname <- paste(\"C:/Cait 2016/Work/Xavier/Sims/\", set.n, sep=\"\")\n# dirname <- paste(\"/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims/\", set.n, sep=\"\")\n\nfoo <- dir(dirname)\nfoo\n## get all performance Rdata names\n# toKeep <- grep(\"performance\", foo) ##??\n# toKeep <- grep(\"phen.plot.col\", foo) ##??\n# toKeep <- grep(\"_res\", foo) ##??\n# toKeep <- grep(\"_args\", foo) ##??\ntoKeep <- grep(\"_score3\", foo) ##??\nfoo <- foo[toKeep]\nfoo\n\n## keep only subset w same args:\n# toFind <- paste(set.n, \"_\", c(51:81), \"_\", sep=\"\")\n# toFind <- paste(set.n, \"_\", c(21:30), \"_\", sep=\"\")\n# toKeep <- sapply(c(1:length(toFind)), function(e) grep(toFind[e], foo)) ##??\n# foo <- foo[toKeep]\n# foo\n\n## load performance data\ndat <- list()\nsetwd(dirname)\nsystem.time(\nfor(i in 1:length(foo)){ # length(foo)\n  print(i)\n  dat[[i]] <- get(load(paste(\"./\", foo[i], sep=\"\")))\n  # temp <- get(load(paste(\"./\", foo[i], sep=\"\")))\n  # dat[[i]] <- temp$vals$terminal$corr.dat[snps.assoc[, i]]\n  gc()\n}\n)\n\n## REORDER dat s.t. order is numeric not character...\n# dat <- snps.assoc\ninds.new <- c(1:length(dat))\ninds.ori <- sort(as.character(inds.new))\nord <- sapply(c(1:length(inds.new)), function(e) which(as.numeric(inds.ori) == inds.new[e]))\n\ndat.ori <- dat\ndat <- dat[ord]\n\n# evalStats <- dat\n\n#####################\n## get snps.assoc: ##\n#####################\n# dat = performance\nsnps.assoc <- sapply(c(1:length(dat)), function(e) dat[[e]][[1]])\n\nsnps.assoc <- as.list(as.data.frame(snps.assoc))\n# snps.assoc[[1]]\nsnps.assoc <- snps.assoc[ord]\n# res <- dat\n\n######################\n## get score1.mean: ##\n######################\n# dat = res\nscore1.mean <- sapply(c(1:length(score1)), function(e) mean(score1[[e]]))\n# score1 <- dat\nscore1.mean.ori <- score1.mean\nscore1.mean <- rep(rep(score1.mean, 32), 3)\n\n## SAVE ##\nsave(score1, file=\"./set1_1.40_ALL_terminal.score_snps.assoc.Rdata\")\nsave(snps.assoc, file=\"./set1_1.40_ALL_snps.assoc.Rdata\")\n\n## bind score1.mean to args in evalStats:\nevalStats <- cbind(evalStats[,1:8], score1.mean, evalStats[,9:16])\n# evalStats <- cbind(evalStats[,1:10], score1.mean, evalStats[,11:18])\n# table(round(evalStats$score1.mean, 1), evalStats$s, evalStats$af, evalStats$tree.type)\n\n## SAVE: ##\n# filename <- \"./set3_1.120_ALL_s.ALL_af.ALL_treeWAS_evalStats.df.Rdata\"\n# save(evalStats, file=filename)\n\n######################\n## get n.phen.subs: ##\n######################\n# dat = phen.plot.col\nn.phen.subs <- sapply(c(1:length(dat)), function(e) length(which(dat[[e]]$edges == \"grey\")))\nn.phen.subs.ori <- n.phen.subs\n\nn.phen.subs <- rep(rep(n.phen.subs, 32), 3)\n\nhead(evalStats)\n\n## bind n.phen.subs to args in evalStats:\nevalStats <- cbind(evalStats[,1:7], n.phen.subs, evalStats[,8:15])\n# evalStats <- cbind(evalStats[,1:9], n.phen.subs, evalStats[,10:17])\n# table(evalStats$n.phen.subs, evalStats$s, evalStats$tree.type)\n\n## SAVE: ##\nfilename <- \"./set1_1.40_ALL_treeWAS_evalStats.df.Rdata\"\nsave(evalStats, file=filename)\n\n# evalStats <- get(load(\"./set3_1.120_ALL_s.ALL_af.ALL_treeWAS_evalStats.df.Rdata\"))\n\n###############\n## get args: ##\n###############\n# dat = args\nargs <- dat\n\n\n\n\n##############\n## CAREFUL: ##\n##############\n## (1) accuracy may need to be multiplied by 2 (if ncol(snps) was doubled for PLINK!)\n## (2) names of performance etc. may need to be changed (if you want to use them...)\n## ### (eg. if all treeWAS == \"terminal\" --> 2nd 1/3 = \"simultaneous\", 3rd 1/3 = \"subsequent\")\n\nnames(dat[[1]])\n\n# ## CORRECT NAMES: ##\n## treeWAS = 4:99\n(99-3)/3 # 32\ninds.terminal <- c(4:(4+31))\ninds.simultaneous <- c((max(inds.terminal)+1):((max(inds.terminal)+1)+31))\ninds.subsequent <- c((max(inds.simultaneous)+1):((max(inds.simultaneous)+1)+31))\nnoms.ori <- names(dat[[1]])\nnoms <- noms.ori\n\ntemp <- noms[inds.simultaneous]\ntemp2 <- paste(\"treeWAS.simultaneous\", removeFirstN(temp, nchar(\"treeWAS.terminal\")), sep=\"\")\n\ntemp <- noms[inds.subsequent]\ntemp3 <- paste(\"treeWAS.subsequent\", removeFirstN(temp, nchar(\"treeWAS.terminal\")), sep=\"\")\n\nnoms <- replace(noms, inds.simultaneous, temp2)\nnoms <- replace(noms, inds.subsequent, temp3)\nnoms\n\nfor(i in 1:length(dat)){\n  names(dat[[i]]) <- noms\n}\n\ntreeWAS <- vector(\"list\", length=3)\nnames(treeWAS) <- c(\"terminal\", \"simultaneous\", \"subsequent\")\ntreeWAS$terminal <- treeWAS$simultaneous <- treeWAS$subsequent <- list()\n\n\nfisher.bonf <- fisher.fdr <-\n  plink.bonf <- plink.fdr <- plink.gc.bonf <- plink.gc.fdr <- list()\n\nfor(i in 1:length(dat)){\n  treeWAS$terminal[[i]] <- treeWAS$simultaneous[[i]] <- treeWAS$subsequent[[i]] <- list()\n\n  for(e in 2:length(names(dat[[1]]))){\n    ## Fisher:\n    if(e == 2){\n      fisher.bonf[[i]] <- dat[[i]][[e]]\n    }\n    if(e == 3){\n      fisher.fdr[[i]] <- dat[[i]][[e]]\n    }\n    ## treeWAS:\n    if(e %in% 4:35){\n      treeWAS$terminal[[i]][[(length(treeWAS$terminal[[i]])+1)]] <- dat[[i]][[e]]\n    }\n    if(e %in% 36:67){\n      treeWAS$simultaneous[[i]][[(length(treeWAS$simultaneous[[i]])+1)]] <- dat[[i]][[e]]\n    }\n    if(e %in% 68:99){\n      treeWAS$subsequent[[i]][[(length(treeWAS$subsequent[[i]])+1)]] <- dat[[i]][[e]]\n    }\n    ## PLINK:\n    if(e == 100){\n      plink.bonf[[i]] <- dat[[i]][[e]]\n    }\n    if(e == 101){\n      plink.fdr[[i]] <- dat[[i]][[e]]\n    }\n    if(e == 102){\n      plink.gc.bonf[[i]] <- dat[[i]][[e]]\n    }\n    if(e == 103){\n      plink.gc.fdr[[i]] <- dat[[i]][[e]]\n    }\n  } # end e for loop\n  names(treeWAS$terminal[[i]]) <- removeFirstN(noms[4:35], nchar(\"treeWAS.terminal.\"))\n  names(treeWAS$simultaneous[[i]]) <- removeFirstN(noms[36:67], nchar(\"treeWAS.simultaneous.\"))\n  names(treeWAS$subsequent[[i]]) <- removeFirstN(noms[68:99], nchar(\"treeWAS.subsequent.\"))\n} # end i for loop\n\n\n\n\n\n## combine\n# treeWAS <- do.call(\"rbind\", treeWAS)\nfisher.bonf <- do.call(\"rbind\", fisher.bonf)\nfisher.fdr <- do.call(\"rbind\", fisher.fdr)\nplink.bonf <- do.call(\"rbind\", plink.bonf)\nplink.fdr <- do.call(\"rbind\", plink.fdr)\nplink.gc.bonf <- do.call(\"rbind\", plink.gc.bonf)\nplink.gc.fdr <- do.call(\"rbind\", plink.gc.fdr)\n\n## Get dfs of nrow=length(dat),\n## for each of the 32 thresh methods and each of the 3 treeWAS tests:\ndf <- list()\nfor(t in 1:length(treeWAS)){\n  df[[t]] <- list()\n  for(e in 1:32){\n    df[[t]][[e]] <- list()\n    for(i in 1:length(treeWAS[[t]])){\n      df[[t]][[e]][[i]] <- treeWAS[[t]][[i]][[e]]\n      # df[[t]][[i]] <- do.call(\"rbind\", sapply(c(1:length(treeWAS[[t]])), function(e) treeWAS[[t]][[e]][[i]]))\n    }\n    df[[t]][[e]] <- do.call(\"rbind\", df[[t]][[e]])\n    ################\n    ## TEMP -- FOR SOME DATASETS, NEED TO MULTIPLY ACCURACY BY TWO!!!!!!!!!!!!!!\n    ## (though arguably accuracy is not a useful metric for genetic data.. )\n    # df[[t]][[e]]$accuracy <- df[[t]][[e]]$accuracy*2\n\n    acc <- df[[t]][[e]]$accuracy\n    for(a in toChange){\n      acc[a] <- acc[a]*2\n    }\n    df[[t]][[e]]$accuracy <- acc\n    ################\n  }\n  names(df[[t]]) <- names(treeWAS$terminal[[1]])\n}\nnames(df) <- c(\"terminal\", \"simultaneous\", \"subsequent\")\n\ntreeWAS.df <- df\nstr(treeWAS.df[[1]])\n\nstr(df[[1]])\nlength(df[[1]])\nnrow(df[[1]][[1]])\n\n## CHECK -- accuracy:\n# DF <- df[[1]][[1]]\n# acc.ori <- DF$accuracy\n# acc.new <- ((DF$sensitivity*10) + (DF$specificity*9990))/10000\n# toChange <- which(acc.ori <= 0.5)\n\n\n\n## CORRECT ACCURACY:\n# fisher.bonf$accuracy <- fisher.bonf$accuracy*2\n# fisher.fdr$accuracy <- fisher.fdr$accuracy*2\n#\n# plink.bonf$accuracy <- plink.bonf$accuracy*2\n# plink.fdr$accuracy <- plink.fdr$accuracy*2\n# plink.gc.bonf$accuracy <- plink.gc.bonf$accuracy*2\n# plink.gc.fdr$accuracy <- plink.gc.fdr$accuracy*2\n\n## OR -- correct a SUBSET of accuracy...\n# fisher.bonf$accuracy[toChange] <- fisher.bonf$accuracy[toChange]*2\n# fisher.fdr$accuracy[toChange] <- fisher.fdr$accuracy[toChange]*2\n#\n# plink.bonf$accuracy[toChange] <- plink.bonf$accuracy[toChange]*2\n# plink.fdr$accuracy[toChange] <- plink.fdr$accuracy[toChange]*2\n# plink.gc.bonf$accuracy[toChange] <- plink.gc.bonf$accuracy[toChange]*2\n# plink.gc.fdr$accuracy[toChange] <- plink.gc.fdr$accuracy[toChange]*2\n\n##########\n## save ##    #######    #######    #######    #######    #######    #######\n##########\ntree.type <- \"ALL\"\ndir.n <- \"1_42\"\n# getwd()\nfilename <- paste(\"./\", set.n, \"_\", dir.n, \"_\", tree.type, \"_treeWAS_evalStats.Rdata\", sep=\"\")\nsave(treeWAS.df, file=filename)\nfilename <- paste(\"./\", set.n, \"_\", dir.n, \"_\", tree.type, \"_fisher.bonf_evalStats.Rdata\", sep=\"\")\nsave(fisher.bonf, file=filename)\nfilename <- paste(\"./\", set.n, \"_\", dir.n, \"_\", tree.type, \"_fisher.fdr_evalStats.Rdata\", sep=\"\")\nsave(fisher.fdr, file=filename)\nfilename <- paste(\"./\", set.n, \"_\", dir.n, \"_\", tree.type,  \"_plink.bonf_evalStats.Rdata\", sep=\"\")\nsave(plink.bonf, file=filename)\nfilename <- paste(\"./\", set.n, \"_\", dir.n, \"_\", tree.type, \"_plink.fdr_evalStats.Rdata\", sep=\"\")\nsave(plink.fdr, file=filename)\nfilename <- paste(\"./\", set.n, \"_\", dir.n, \"_\", tree.type, \"_plink.gc.bonf_evalStats.Rdata\", sep=\"\")\nsave(plink.gc.bonf, file=filename)\nfilename <- paste(\"./\", set.n, \"_\", dir.n, \"_\", tree.type, \"_plink.gc.fdr_evalStats.Rdata\", sep=\"\")\nsave(plink.gc.fdr, file=filename)\n\n## summarise\nsummary(fisher.bonf)\nsummary(fisher.fdr)\nsummary(plink.bonf)\nsummary(plink.fdr)\nsummary(plink.gc.bonf)\nsummary(plink.gc.fdr)\n\n## summarise treeWAS by test & thresh...\ntreeWAS.sum <- list()\nfor(t in 1:length(treeWAS.df)){\n  treeWAS.sum[[t]] <- list()\n  for(e in 1:length(treeWAS.df[[t]])){\n    treeWAS.sum[[t]][[e]] <- summary(treeWAS.df[[t]][[e]])\n  }\n  names(treeWAS.sum[[t]]) <- names(treeWAS.df[[t]])\n}\nnames(treeWAS.sum) <- names(treeWAS.df)\n\ntreeWAS.sum\n\n\n\n##############################################################################################################\n##########\n## plot ##    #######    #######    #######    #######    #######    #######    #######    #######    #######\n##########\n##############################################################################################################\n\n###################################\n## BY THRESHOLD-SELECTION METHOD ##\n###################################\n\n###################\n## GET evalStats ##\n###################\n## (for each sel method, by test)\nevalStats <- vector(\"list\", length=3)\nnames(evalStats) <- c(\"terminal\", \"simultaneous\", \"subsequent\")\nevalStats$terminal <- evalStats$simultaneous <- evalStats$subsequent <- list()\n\n## Get repeated thresh-sel names column: ##\nnom.ori <- names(treeWAS.df[[1]])\nnom <- list()\nfor(i in 1:length(nom.ori)){\n  nom[[i]] <- rep(nom.ori[[i]], nrow(treeWAS.df[[1]][[1]]))\n}\nthresh.sel <- as.vector(unlist(nom))\ntest <- thresh.sel # using test instead of thresh.sel for convenience w plot code below...\n\n## PLUS: break test into its composite parts:\n################\n\ntemp <- strsplit(test, \"[.]\")\ntemp <- do.call(\"rbind\", temp)\n\n# pval <- temp[,3] # 05\npval <- paste(temp[,2], temp[,3], sep=\".\") # 0.05\npval.correct <- temp[,4] # bonf # fdr\npval.by  <- temp[,5] # count # density\nn.snps.sim <- paste(temp[,6], \"x\", sep=\"\") # 1x # 10x.n.snps\n\nthresh.sel <- data.frame(test, pval, pval.correct, pval.by, n.snps.sim)\n\n# tree.type <- c(rep(\"coal\", 3*32), rep(\"rtree\", 17*32), rep(\"coal\", 3*32), rep(\"rtree\", 4*32), rep(\"coal\", 15*32))\ntree.type <- c(rep(\"coal\", 3), rep(\"rtree\", 17), rep(\"coal\", 3), rep(\"rtree\", 4), rep(\"coal\", 15))\n# tree.type <- c(rep(\"coal\", 20), rep(\"rtree\", 20))\n\n# args <- data.frame(tree.type, s, af)\n\nparams <- cbind(thresh.sel, tree.type)\n\n################\n\n\n## Get evalStats and make df: ##\nfor(t in 1:length(treeWAS.df)){\n  df <- treeWAS.df[[t]]\n\n  accuracy <- specificity <- FPR <- FNR <- sensitivity <- PPV <- FDR <- list()\n\n  for(i in 1:length(df)){\n    accuracy[[i]] <- df[[i]]$accuracy\n    specificity[[i]] <- df[[i]]$specificity\n    FPR[[i]] <- df[[i]]$FPR\n    FNR[[i]] <- df[[i]]$FNR\n    sensitivity[[i]] <- df[[i]]$sensitivity\n    PPV[[i]] <- df[[i]]$PPV\n    FDR[[i]] <- df[[i]]$FDR\n  } # end (i) for loop\n\n  accuracy <- as.vector(unlist(accuracy))\n  specificity <- as.vector(unlist(specificity))\n  FPR <- as.vector(unlist(FPR))\n  FNR <- as.vector(unlist(FNR))\n  sensitivity <- as.vector(unlist(sensitivity))\n  PPV <- as.vector(unlist(PPV))\n  FDR <- as.vector(unlist(FDR))\n\n  F1.score <- 2*((PPV*sensitivity) / (PPV+sensitivity))\n\n  evalStats[[t]] <- data.frame(params, accuracy, specificity, FPR, FNR, sensitivity, PPV, FDR, F1.score)\n\n} # end (t) for loop\n\n## append treeWAS.test to treeWAS evalStats and bind:\ntreeWAS.test <- c(rep(\"terminal\", nrow(evalStats[[1]])),\n                  rep(\"simultaneous\", nrow(evalStats[[2]])),\n                  rep(\"subsequent\", nrow(evalStats[[3]])))\ntemp <- do.call(\"rbind\", evalStats)\ntemp <- data.frame(treeWAS.test, temp)\nrownames(temp) <- NULL\nevalStats <- temp\n\n##########\n## save ##    #######    #######    #######    #######    #######    #######\n##########\ntree.type <- \"ALL\"\ndir.n <- \"1_42\"\n# getwd()\nfilename <- paste(\"./\", set.n, \"_\", dir.n, \"_\", tree.type, \"_treeWAS_evalStats.df.Rdata\", sep=\"\")\nsave(evalStats, file=filename)\n\n#######    #######    #######    #######    #######    #######    #######\n\n\n\n## append args to other tests:\nfisher.bonf <- data.frame(tree.type, fisher.bonf)\nfisher.fdr <- data.frame(tree.type, fisher.fdr)\nplink.bonf <- data.frame(tree.type, plink.bonf)\nplink.fdr <- data.frame(tree.type, plink.fdr)\nplink.gc.bonf <- data.frame(tree.type, plink.gc.bonf)\nplink.gc.fdr <- data.frame(tree.type, plink.gc.fdr)\n\n\n##########\n## save ##    #######    #######    #######    #######    #######    #######\n##########\ntree.type <- \"ALL\"\ndir.n <- \"1_42\"\n\n# filename <- paste(\"./\", set.n, \"_\", dir.n, \"_\", tree.type, \"_treeWAS_evalStats.df.all.tests.Rdata\", sep=\"\")\n# save(evalStats, file=filename)\n\nfilename <- paste(\"./\", set.n, \"_\", dir.n, \"_\", tree.type, \"_fisher.bonf_evalStats.df.Rdata\", sep=\"\")\nsave(fisher.bonf, file=filename)\nfilename <- paste(\"./\", set.n, \"_\", dir.n, \"_\", tree.type, \"_fisher.fdr_evalStats.df.Rdata\", sep=\"\")\nsave(fisher.fdr, file=filename)\nfilename <- paste(\"./\", set.n, \"_\", dir.n, \"_\", tree.type, \"_plink.bonf_evalStats.df.Rdata\", sep=\"\")\nsave(plink.bonf, file=filename)\nfilename <- paste(\"./\", set.n, \"_\", dir.n, \"_\", tree.type, \"_plink.fdr_evalStats.df.Rdata\", sep=\"\")\nsave(plink.fdr, file=filename)\nfilename <- paste(\"./\", set.n, \"_\", dir.n, \"_\", tree.type, \"_plink.gc.bonf_evalStats.df.Rdata\", sep=\"\")\nsave(plink.gc.bonf, file=filename)\nfilename <- paste(\"./\", set.n, \"_\", dir.n, \"_\", tree.type, \"_plink.gc.fdr_evalStats.df.Rdata\", sep=\"\")\nsave(plink.gc.fdr, file=filename)\n\n\n\n\n#############################################\n## MY DATA: Beeswarm/BoxPlots ACROSS TESTS ##   #########################   #########################\n#############################################\n\n## 3 treeWAS.tests + Fisher, Plink, Plink.GC (in future: + PCA, DAPC...?)\n\n## LOAD DATA ##\n# eg:\nplink.gc.fdr <- get(load(\"D:/treeWAS_Sims/set3/n.subs_1/evalStats/set3_1.120_ALL_s.ALL_af.ALL_plink.gc.fdr_evalStats.df.Rdata\"))\n\n# evalStats <- get(load(\"D:/treeWAS_Sims/set3/n.subs_1/evalStats/set3_1.120_ALL_s.ALL_af.ALL_treeWAS_evalStats.df.Rdata\"))\n# evalStats <- get(load(\"D:/treeWAS_Sims/set1/n.subs_1/evalStats/set1_1.40_ALL_treeWAS_evalStats.df.Rdata\"))\nevalStats <- get(load(\"D:/treeWAS_Sims/set2/n.subs_1/evalStats/set2_1_42_ALL_treeWAS_evalStats.df.Rdata\"))\ndf <- evalStats\n# require(plyr)\ndf$test <- mapvalues(df$test, from = levels(df$test), to = c(1:32)) # plyr\nevalStats.ori <- evalStats\nevalStats <- df\n\n\n########################################\n## (1) ACROSS ALL ROUNDS OF SIM SET 3 ##\n########################################\n\n## keep only treeWAS results (x3) for thresh == 1 (ie. \"pval.0.0001.bonf.count.1.x.n.snps\")\ndf <- evalStats\ndf <- df[df$test==1, ]\n## remove test columns:\nassoc.test.treeWAS <- df$treeWAS.test\ndf <- df[, 7:ncol(df)]\ntreeWAS.df <- df\n\n## OOPS -- set1 - all comparator tests' df's have overwritten tree.type -- REPLACE!\n# head(plink.gc.fdr)\n# head(evalStats)\n#\n# tree.type <- treeWAS.df$tree.type[1:(nrow(treeWAS.df)/3)]\n#\n# fisher.bonf$tree.type <- tree.type\n# fisher.fdr$tree.type <- tree.type\n# plink.bonf$tree.type <- tree.type\n# plink.fdr$tree.type <- tree.type\n# plink.gc.bonf$tree.type <- tree.type\n# plink.gc.fdr$tree.type <- tree.type\n\n\n## record assoc.test as factor in column 1:\nassoc.test.all <- c(rep(\"fisher.bonf\", nrow(fisher.bonf)),\n                    rep(\"fisher.fdr\", nrow(fisher.fdr)),\n                    rep(\"plink.bonf\", nrow(plink.bonf)),\n                    rep(\"plink.fdr\", nrow(plink.fdr)),\n                    rep(\"plink.gc.bonf\", nrow(plink.gc.bonf)),\n                    rep(\"plink.gc.fdr\", nrow(plink.gc.fdr)),\n                    as.character(assoc.test.treeWAS))\n\n## combine all into one df w assoc.test as factor for boxplots:\ndat <- rbind(fisher.bonf,\n             fisher.fdr,\n             plink.bonf,\n             plink.fdr,\n             plink.gc.bonf,\n             plink.gc.fdr)\nnrow(dat)\n\n## append info from treeWAS.df to other tests dfs:\nl <- nrow(treeWAS.df)/3\n# identical(treeWAS.df$s[1:l], fisher.bonf$s) # TRUE\ninfo <- treeWAS.df[1:l,2:3]\n# info <- treeWAS.df[1:l,4:5]\nn.phen.subs <- rep(info[,1], 6)\nscore1.mean <- rep(info[,2], 6)\ninfo <- cbind(n.phen.subs, score1.mean)\ndat <- cbind(dat[,1], info, dat[,2:ncol(dat)])\nnames(dat)[1] <- \"tree.type\"\n# dat <- cbind(dat[,c(1:3)], info, dat[,4:ncol(dat)])\n\n## calculate F1.score for all comparator tests:\nF1.score <- 2*((dat$FPR*dat$sensitivity) / (dat$FPR+dat$sensitivity))\ndat <- cbind(dat, F1.score)\n\n## append treeWAS.df to dat:\ndat <- rbind(dat,\n             treeWAS.df)\n\n## append assoc.test arg to other tests:\n## check:\n# length(assoc.test.all) # 1080\n# nrow(dat) # 1080\ndat <- data.frame(\"assoc.test\"=assoc.test.all, dat)\nhead(dat)\n\n## SAVE: ##\nevalStats <- dat\n\nsave(evalStats, file=\"D:/treeWAS_Sims/set2/n.subs_1/evalStats/set2_1.42_all.tests_evalStats.df.Rdata\")\nevalStats <- get(load(\"D:/treeWAS_Sims/set2/n.subs_1/evalStats/set2_1.42_all.tests_evalStats.df.Rdata\"))\n\n# save(evalStats, file=\"D:/treeWAS_Sims/set1/n.subs_1/evalStats/set1_1.40_all.tests_evalStats.df.Rdata\")\n# evalStats <- get(load(\"D:/treeWAS_Sims/set1/n.subs_1/evalStats/set1_1.40_all.tests_evalStats.df.Rdata\"))\n\n# save(evalStats, file=\"D:/treeWAS_Sims/set3/n.subs_1/evalStats/set3_1.120_all.tests_evalStats.df.Rdata\")\n# evalStats <- get(load(\"D:/treeWAS_Sims/set3/n.subs_1/evalStats/set3_1.120_all.tests_evalStats.df.Rdata\"))\n\n###################\n## BEESWARM PLOT ##   #########################   #########################   #########################\n###################\ndf <- evalStats\n# require(plyr)\n## replace levels w numbers?\n# df$assoc.test <- mapvalues(df$assoc.test, from = levels(df$assoc.test), to = c(1:6, 8,9,7)) # plyr\n## reorder and fix order of levels? (eg. st treeWAS tests go terminal, simultaneous, subsequent)\n# # # df$assoc.test <- ordered(df$assoc.test, levels = levels(df$assoc.test)[c(1:6, 9,7,8)]) # SAVED!\nevalStats.ori <- evalStats\nevalStats <- df\n\n\nassoc.tests <- c(\"fisher.bonf\",\n                 \"fisher.fdr\",\n                 \"plink.bonf\",\n                 \"plink.fdr\",\n                 \"plink.gc.bonf\",\n                 \"plink.gc.fdr\",\n                 \"terminal\",\n                 \"simultaneous\",\n                 \"subsequent\")\n\nY <- c(\"F1.score\", \"PPV\", \"sensitivity\", \"FPR\")\n\nfor(y in 1:length(Y)){ #\n  # for(t in 1:length(assoc.tests)){\n    df <- evalStats\n    df <- df[df$tree.type==\"coal\", ] # & df$tree.type==\"rtree\"  & df$s==10 & df$af==5\n    beeswarm.plot(y=Y[y], x=\"assoc.test\", df, y.lab=NULL,\n                  pt.size=3, x.text=TRUE)\n  # }\n}\n\n## NOTE: REDO ALL rtree SIMs in SET 1 AND SET 2 !!!!!!!!!!!!!!!!!!!!!!!!!!! #######  !!!!!!!!!   #######  !!!!!!!!!\n###########################################################################\n\n## SAVE FIGS: ##\n# set2_1_42_coal_assoc_tests_F1score\n# set2_1_42_coal_assoc_tests_PPV\n# set2_1_42_coal_assoc_tests_sensitivity\n# set2_1_42_coal_assoc_tests_FPR\n#####\n# set2_1_42_ALL_assoc_tests_F1score\n# set2_1_42_ALL_assoc_tests_PPV\n# set2_1_42_ALL_assoc_tests_sensitivity\n# set2_1_42_ALL_assoc_tests_FPR\n\n######################\n# set1_21_40_rtree_assoc_tests_F1score\n# set1_21_40_rtree_assoc_tests_PPV\n# set1_21_40_rtree_assoc_tests_sensitivity\n# set1_21_40_rtree_assoc_tests_FPR\n#####\n# set1_1_20_coal_assoc_tests_F1score\n# set1_1_20_coal_assoc_tests_PPV\n# set1_1_20_coal_assoc_tests_sensitivity\n# set1_1_20_coal_assoc_tests_FPR\n#####\n# set1_1_40_ALL_assoc_tests_F1score\n# set1_1_40_ALL_assoc_tests_PPV\n# set1_1_40_ALL_assoc_tests_sensitivity\n# set1_1_40_ALL_assoc_tests_FPR\n\n\n#################################\n# set3_31_40_coal_s_10_af_5_assoc_tests_F1score\n# set3_31_40_coal_s_10_af_5_assoc_tests_PPV\n# set3_31_40_coal_s_10_af_5_assoc_tests_sensitivity\n# set3_31_40_coal_s_10_af_5_assoc_tests_FPR\n#####\n# set3_1_120_coal_assoc_tests_F1score\n# set3_1_120_coal_assoc_tests_PPV\n# set3_1_120_coal_assoc_tests_sensitivity\n# set3_1_120_coal_assoc_tests_FPR\n#####\n# set3_1_120_ALL_assoc_tests_F1score\n# set3_1_120_ALL_assoc_tests_PPV\n# set3_1_120_ALL_assoc_tests_sensitivity\n# set3_1_120_ALL_assoc_tests_FPR\n\n#########################################################################\n## UHOH-- WHY DO ALL assoc.tests perform SO POORLY in SET 1 w rtree??! ##\n#########################################################################\n\nsummary(df$score1.mean)\n\n## CHECK w eg:\nsnps <- get(load(\"D:/treeWAS_Sims/set1/n.subs_1/set1_21_snps.Rdata\"))\nphen <- get(load(\"D:/treeWAS_Sims/set1/n.subs_1/set1_21_phen.Rdata\"))\nsnps.assoc <- get(load(\"D:/treeWAS_Sims/set1/n.subs_1/set1_21_performance.Rdata\"))$snps.assoc\n\ntemp <- data.frame(phen, snps[,snps.assoc])\ntemp\n\ntree <- get(load(\"D:/treeWAS_Sims/set1/n.subs_1/set1_21_tree.Rdata\"))\nstr(tree)\n\n# tree.coal <- get(load(\"D:/treeWAS_Sims/set1/n.subs_1/set1_20_tree.Rdata\"))\n# str(tree.coal)\n\n## Shit.. Not even all snps.assoc are the same!\n## Soln-- Ah! Forgot to (un-)reverse x <- rev(c(1:nrow(tree$edge))) for coaltree==FALSE in snps.sim!!\n\n## HYP 1: snps or phen ordered by tip.lab indices??\n# labs <- tree$tip.label\n# labs <- removeFirstN(labs, 1)\n# labs <- as.numeric(labs)\n#\n#\n# temp1 <- data.frame(phen, snps[labs,snps.assoc])\n# temp1\n#####################################################################################################################\n#####################################################################################################################\n\n#############\n## SCORE 3 ##\n#############\n## EVALUATE ALTERNATIVES!\n## ONLY for set3_31:40\n## START w eg. set3_40.\n\n\nevalStats.df <- list()\n\nfile.ns <- c(31:40)\n\nfor(j in 1:length(file.ns)){\n\n  file.n <- file.ns[j]\n\n  SCORE3 <- get(load(paste(\"D:/treeWAS_Sims/set3/n.subs_1/set3_\", file.n, \"_score3.Rdata\", sep=\"\")))\n  SCORE3.ori <- SCORE3\n\n  snps <- get(load(paste(\"D:/treeWAS_Sims/set3/n.subs_1/set3_\", file.n, \"_snps.Rdata\", sep=\"\")))\n  phen <- get(load(paste(\"D:/treeWAS_Sims/set3/n.subs_1/set3_\", file.n, \"_phen.Rdata\", sep=\"\")))\n  snps.assoc <- get(load(paste(\"D:/treeWAS_Sims/set3/n.subs_1/set3_\", file.n, \"_performance.Rdata\", sep=\"\")))$snps.assoc\n\n  snps.ori <- snps\n  phen.ori <- phen\n  names(snps.assoc) <- as.character(snps.assoc)\n  snps.assoc.ori <- snps.assoc\n\n\n  corr.dat <- SCORE3$corr.dat\n  corr.sim <- SCORE3$corr.sim\n  corr.dat.ori <- corr.dat\n  corr.sim.ori <- corr.sim\n\n  ## thresh method = pval 0.0001, bonf, count, 1x.n.snps\n  snps.names <- colnames(snps.ori)\n\n  toKeep <- c(1:5, 9:12)\n  out <- perf <- list()\n\n  ## FOR LOOP: ##\n  for(i in 1:length(toKeep)){\n\n    index <- toKeep[i]\n    corr.dat <- corr.dat.ori[[index]]\n    corr.sim <- corr.sim.ori[[index]][1:length(corr.dat)]\n\n    corr.dat <- as.vector(unlist(corr.dat))\n    corr.sim <- as.vector(unlist(corr.sim))\n\n    if(length(which(!is.na(corr.dat))) > 0){\n    p.value <- 0.0001\n    n.tests <- 3\n    p.value <- p.value/(length(corr.dat)*n.tests)\n    thresh <- quantile(corr.sim, probs=1-p.value, na.rm=TRUE)\n\n    ## Identify (real) SNPs w correlations > thresh:\n    sig.snps <- which(corr.dat > thresh)\n    p.vals <- .get.p.vals(corr.sim = corr.sim,\n                          corr.dat = corr.dat,\n                          fisher.test = FALSE)\n    }else{\n      sig.snps <- p.vals <- NULL\n    }\n    sig.p.vals <- p.vals[sig.snps]\n\n    ## get list of those correlation values\n    sig.corrs <- corr.dat[sig.snps]\n    ## get the list of those SNPs (ie. their locus names)\n    sig.snps.names <- dimnames(snps.ori)[[2]][sig.snps]\n\n    ## reorder by score value:\n    NWO <- order(sig.corrs, decreasing=TRUE)\n    sig.snps <- sig.snps[NWO]\n    sig.corrs <- sig.corrs[NWO]\n    sig.p.vals <- sig.p.vals[NWO]\n    sig.snps.names <- sig.snps.names[NWO]\n    gc()\n\n    ## 0 p.vals\n    ## CHECK---IS THIS RIGHT? SHOULD WE BE MULTIPLYING THE DIVISOR BY N.TESTS ?????????????\n    min.p <- paste(\"p-values listed as 0 are <\",\n                   1/length(corr.sim), sep=\" \")\n\n    #################\n    ## GET RESULTS ##\n    #################\n\n    out[[i]] <- list(corr.dat,\n                     corr.sim,\n                     p.vals,\n                     thresh,\n                     sig.snps.names,\n                     sig.snps,\n                     sig.corrs,\n                     sig.p.vals,\n                     min.p)\n\n    names(out[[i]]) <- c(\"corr.dat\",\n                         \"corr.sim\",\n                         \"p.vals\",\n                         \"sig.thresh\",\n                         \"sig.snps.names\",\n                         \"sig.snps\",\n                         \"sig.corrs\",\n                         \"sig.p.vals\",\n                         \"min.p\")\n\n    #########################\n    ## common calculations ##\n    #########################\n    ## get test.positive\n    test.positive <- out[[i]]$sig.snps.names\n\n    ## get test.negative\n    if(length(which(snps.names %in% test.positive)) != 0){\n      test.negative <- snps.names[-which(snps.names %in% test.positive)]\n    }else{\n      test.negative <- snps.names\n    }\n\n    ## get n.test.positive\n    n.test.positive <- length(test.positive)\n    ## get n.test.negative\n    n.test.negative <- length(test.negative) ## == n.tests - n.test.positive\n\n    n.tests <- ncol(snps)\n\n    snps.associated <- snps.assoc\n\n    ## get true positives\n    true.positive <- test.positive[which(test.positive %in% snps.associated)]\n    TP <- length(true.positive)\n\n    ## get true negatives\n    snps.not <- snps.names[-which(snps.names %in% snps.associated)]\n\n    true.negative <- test.negative[which(test.negative %in% snps.not)]\n    TN <- length(true.negative)\n\n    ## get false positives\n    false.positive <- test.positive[which(test.positive %in% snps.not)]\n    FP <- length(false.positive)\n\n    ## get false negatives\n    false.negative <- test.negative[which(test.negative %in% snps.associated)]\n    FN <- length(false.negative)\n\n\n    #####################################\n    ## CALCULATE METRICS OF EVALUATION ##\n    #####################################\n    ##############\n    ## accuracy ##\n    ##############\n    ## ie. SUMMARY STATISTIC--Of all the CALLS/tests you made, how many of them were CORRECT\n    ## ~ Pr(Correct Call | Call)\n    # accuracy <- ((TP + TN) / n.tests) ### WHY IS THIS GIVING ME 0.5 (when all other metrics seem to be working....) ??!?!\n    accuracy <- ((TP + TN) / (TP + TN + FP + FN))\n    # acc <- (sensitivity*length(snps.associated) + specificity*length(snps.not))/ncol(snps)\n\n    #################\n    ## specificity ##\n    #################\n    ## ie. Of all the truly NOT associated SNPs, how many did you manage to rule out?\n    ## ~ Pr(Negative Test | SNP NOT associated)\n    specificity <- (TN / (TN + FP)) ## = (1 - FPR)\n\n    #########\n    ## FPR ##\n    #########\n    ## ie. How many truly NOT associated SNPs did you accidentally call significant\n    ## ~ Pr(Positive Test | SNP NOT associated)\n    FPR <- (FP / (FP + TN)) ## = (1 - specificity)\n\n    #########\n    ## FNR ##\n    #########\n    ## ie. How many truly ASSOCIATED SNPs did you accidentally miss\n    ## ~ Pr(Negative Test | SNP ASSOCIATED)\n    ## --> Set 1: will be 0/0 = NaN\n    FNR <- (FN / (FN + TP))\n\n    #################\n    ## sensitivity ##\n    #################\n    ## ie. How many truly ASSOCIATED SNPs did you manage to catch\n    ## ~ Pr(Positive Test | SNP ASSOCIATED)\n    ## --> Set 1: will be 0/0 = NaN\n    sensitivity <- (TP / (TP + FN))\n\n    #########\n    ## PPV ##\n    #########\n    ## ie. Of all the POSITIVE calls you made, how many were CORRECT/ identified truly ASSOCIATED SNPs\n    ## ~ Pr(SNP ASSOCIATED | Positive Test)\n    ## --> Set 1: will be 0 (UNLESS you made NO positive calls, then 0/0 = NaN)\n    PPV <- (TP / (TP + FP)) ## = (1 - FDR)\n\n    #########\n    ## FDR ##\n    #########\n    ## ie. Of all the POSITIVE calls you made, how many were WRONG/ identified truly NOT associated SNPs\n    ## ~ Pr(SNP NOT associated | Positive Test)\n    ## --> Set 1: will be 1 (UNLESS you made NO positive calls, then 0/0 = NaN)\n    FDR <- (FP / (FP + TP)) ## = (1 - PPV)\n\n    ##################################\n    ## combine eval metrics into df ##\n    ##################################\n    perf[[i]] <- data.frame(accuracy, specificity, FPR, FNR, sensitivity, PPV, FDR)\n\n  } # end for loop\n\n  evalStats <- do.call(rbind, perf)\n\n  print(\"J\"); print(j)\n  print(\"evalStats\"); print(evalStats)\n\n  score3.test <- factor(c(1:9))\n  evalStats <- data.frame(score3.test, evalStats)\n\n  evalStats.df[[j]] <- evalStats\n\n} # end (j) for loop\n\n\n\n\nevalStats.df.ori <- evalStats.df\n\ndf <- do.call(rbind, evalStats.df)\n\n## calculate F1.score for all comparator tests:\nF1.score <- 2*((df$FPR*df$sensitivity) / (df$FPR+df$sensitivity))\ndf <- cbind(df, F1.score)\nevalStats.df <- df\n\n## SAVE:\n# save(evalStats.df, file=\"D:/treeWAS_Sims/set3/n.subs_1/set3_31_40_score3.tests_evalStats.df.Rdata\")\nevalStats.df <- get(load(\"D:/treeWAS_Sims/set3/n.subs_1/set3_31_40_score3.tests_evalStats.df.Rdata\"))\n\n##########\n## PLOT ##\n##########\n\n# boxplot(df$F1.score ~ df$score3.test) ### just showing bc ylim=c(0,0.0001)...\n# boxplot(df$PPV ~ df$score3.test)\n# boxplot(df$sensitivity ~ df$score3.test)\n# boxplot(df$FPR ~ df$score3.test) ### just showing bc ylim=c(0,0.0001)...\n\n\nY <- c(\"F1.score\", \"PPV\", \"sensitivity\", \"FPR\")\n\nfor(y in 1:length(Y)){ #\n  # for(t in 1:3){\n    df <- evalStats.df\n    # df <- df[df$treeWAS.test==treeWAS.tests[t], ] # & df$tree.type==\"rtree\" & df$s==0.5 & df$af==5\n    beeswarm.plot(y=Y[y], x=\"score3.test\", df, y.lab=NULL,\n                  pt.size=3, x.text=TRUE)\n  # }\n}\n\n## SAVE: ##\n# set3_31_40_coal_s_10_af_5_score3_tests_F1score\n# set3_31_40_coal_s_10_af_5_score3_tests_PPV\n# set3_31_40_coal_s_10_af_5_score3_tests_sensitivity\n# set3_31_40_coal_s_10_af_5_score3_tests_FPR\n\n\n\n###################\n## BEESWARM PLOT ##   #########################   #########################   #########################\n###################\n## uses BOTH df and beeswarm dataframes...\n\nlibrary(beeswarm)\nlibrary(plyr)\nlibrary(ggplot2)\n\n#############\n## MY DATA ##\n#############\nevalStats <- get(load(\"C:/Cait 2016/Work/Xavier/Sims/set1/set1_1.40_ALL_treeWAS_evalStats.df.all.tests.Rdata\"))\n# evalStats <- get(load(\"C:/Cait 2016/Work/Xavier/Sims/set3/set3_1.120_ALL_s.ALL_af.ALL_treeWAS_evalStats.df.Rdata\"))\nevalStats <- get(load(\"D:/treeWAS_Sims/set3/n.subs_1/evalStats/set3_1.120_ALL_s.ALL_af.ALL_treeWAS_evalStats.df.Rdata\"))\ndf <- evalStats\n\n# require(plyr)\ndf$test <- mapvalues(df$test, from = levels(df$test), to = c(1:32)) # plyr\nevalStats.ori <- evalStats\nevalStats <- df\n\n# t <- 3\n# df <- evalStats[[t]]\n\n\ntreeWAS.tests <- c(\"terminal\", \"simultaneous\", \"subsequent\")\nY <- c(\"F1.score\", \"PPV\", \"sensitivity\", \"FPR\")\n\nfor(y in 1:length(Y)){ #\n  for(t in 1:3){\n    df <- evalStats\n    df <- df[df$treeWAS.test==treeWAS.tests[t] & df$tree.type==\"coal\" & df$s==10 & df$af==5, ] # & df$tree.type==\"rtree\" & df$s==0.5 & df$af==5\n    beeswarm.plot(y=Y[y], x=\"test\", df, y.lab=NULL,\n                  pt.size=3, x.text=TRUE)\n  }\n}\n#\n\n## SAVE ##\n\n## TO DO: (RE)SAVE ALL PLOTS WITH (a) NO y-label and (b) REPLACE x-axis text with numbers 1:n.tests\n## so we can make a 4- (or 2?) panel figure....\n## (later, if needed, could put labels corresponding to numbers and colours alongside in a legend.. )\n###\n\n# set1_1_40_ALL_treeWAS_terminal_F1score\n# set1_1_40_ALL_treeWAS_simultaneous_F1score\n# set1_1_40_ALL_treeWAS_subsequent_F1score\n#\n# set1_1_40_ALL_treeWAS_terminal_PPV\n# set1_1_40_ALL_treeWAS_simultaneous_PPV\n# set1_1_40_ALL_treeWAS_subsequent_PPV\n#\n# set1_1_40_ALL_treeWAS_terminal_sensitivity\n# set1_1_40_ALL_treeWAS_simultaneous_sensitivity\n# set1_1_40_ALL_treeWAS_subsequent_sensitivity\n#\n# set1_1_40_ALL_treeWAS_terminal_FPR\n# set1_1_40_ALL_treeWAS_simultaneous_FPR\n# set1_1_40_ALL_treeWAS_subsequent_FPR\n\n########\n\n# set1_1_40_coal_treeWAS_terminal_F1score\n# set1_1_40_coal_treeWAS_simultaneous_F1score\n# set1_1_40_coal_treeWAS_subsequent_F1score\n#\n# set1_1_40_coal_treeWAS_terminal_PPV\n# set1_1_40_coal_treeWAS_simultaneous_PPV\n# set1_1_40_coal_treeWAS_subsequent_PPV\n#\n# set1_1_40_coal_treeWAS_terminal_sensitivity\n# set1_1_40_coal_treeWAS_simultaneous_sensitivity\n# set1_1_40_coal_treeWAS_subsequent_sensitivity\n#\n# set1_1_40_coal_treeWAS_terminal_FPR\n# set1_1_40_coal_treeWAS_simultaneous_FPR\n# set1_1_40_coal_treeWAS_subsequent_FPR\n###\n# set1_1_40_rtree_treeWAS_terminal_F1score\n# set1_1_40_rtree_treeWAS_simultaneous_F1score\n# set1_1_40_rtree_treeWAS_subsequent_F1score # NA\n#\n# set1_1_40_rtree_treeWAS_terminal_PPV\n# set1_1_40_rtree_treeWAS_simultaneous_PPV\n# set1_1_40_rtree_treeWAS_subsequent_PPV\n#\n# set1_1_40_rtree_treeWAS_terminal_sensitivity\n# set1_1_40_rtree_treeWAS_simultaneous_sensitivity\n# set1_1_40_rtree_treeWAS_subsequent_sensitivity\n#\n# set1_1_40_rtree_treeWAS_terminal_FPR\n# set1_1_40_rtree_treeWAS_simultaneous_FPR\n# set1_1_40_rtree_treeWAS_subsequent_FPR\n\n###############################################\n\n# set3_101_110_rtree_s_0_5_af_5_treeWAS_terminal_F1score\n# set3_101_110_rtree_s_0_5_af_5_treeWAS_simultaneous_F1score\n# set3_101_110_rtree_s_0_5_af_5_treeWAS_subsequent_F1score\n#\n# set3_101_110_rtree_s_0_5_af_5_treeWAS_terminal_PPV\n# set3_101_110_rtree_s_0_5_af_5_treeWAS_simultaneous_PPV\n# set3_101_110_rtree_s_0_5_af_5_treeWAS_subsequent_PPV\n#\n# set3_101_110_rtree_s_0_5_af_5_treeWAS_terminal_sensitivity\n# set3_101_110_rtree_s_0_5_af_5_treeWAS_simultaneous_sensitivity\n# set3_101_110_rtree_s_0_5_af_5_treeWAS_subsequent_sensitivity\n#\n# set3_101_110_rtree_s_0_5_af_5_treeWAS_terminal_FPR\n# set3_101_110_rtree_s_0_5_af_5_treeWAS_simultaneous_FPR\n# set3_101_110_rtree_s_0_5_af_5_treeWAS_subsequent_FPR\n\n#################\n\n# set3_111_120_rtree_s_0_1_af_5_treeWAS_terminal_F1score\n# set3_111_120_rtree_s_0_1_af_5_treeWAS_simultaneous_F1score\n# set3_111_120_rtree_s_0_1_af_5_treeWAS_subsequent_F1score\n#\n# set3_111_120_rtree_s_0_1_af_5_treeWAS_terminal_PPV\n# set3_111_120_rtree_s_0_1_af_5_treeWAS_simultaneous_PPV\n# set3_111_120_rtree_s_0_1_af_5_treeWAS_subsequent_PPV\n#\n# set3_111_120_rtree_s_0_1_af_5_treeWAS_terminal_sensitivity\n# set3_111_120_rtree_s_0_1_af_5_treeWAS_simultaneous_sensitivity\n# set3_111_120_rtree_s_0_1_af_5_treeWAS_subsequent_sensitivity\n#\n# set3_111_120_rtree_s_0_1_af_5_treeWAS_terminal_FPR\n# set3_111_120_rtree_s_0_1_af_5_treeWAS_simultaneous_FPR\n# set3_111_120_rtree_s_0_1_af_5_treeWAS_subsequent_FPR\n\n####\n# set3_1_120_ALL_treeWAS_terminal_F1score\n# set3_1_120_ALL_treeWAS_simultaneous_F1score\n# set3_1_120_ALL_treeWAS_subsequent_F1score\n#\n# set3_1_120_ALL_treeWAS_terminal_PPV\n# set3_1_120_ALL_treeWAS_simultaneous_PPV\n# set3_1_120_ALL_treeWAS_subsequent_PPV\n#\n# set3_1_120_ALL_treeWAS_terminal_sensitivity\n# set3_1_120_ALL_treeWAS_simultaneous_sensitivity\n# set3_1_120_ALL_treeWAS_subsequent_sensitivity\n#\n# set3_1_120_ALL_treeWAS_terminal_FPR\n# set3_1_120_ALL_treeWAS_simultaneous_FPR\n# set3_1_120_ALL_treeWAS_subsequent_FPR\n\n####\n# set1_21_40_rtree_treeWAS_terminal_F1score_leg\n# set1_21_40_rtree_treeWAS_simultaneous_F1score_leg\n# set1_21_40_rtree_treeWAS_subsequent_F1score_leg # NA\n\n# set1_21_40_rtree_treeWAS_terminal_PPV_leg\n# set1_21_40_rtree_treeWAS_simultaneous_PPV_leg\n# set1_21_40_rtree_treeWAS_subsequent_PPV_leg\n#\n# set1_21_40_rtree_treeWAS_terminal_sensitivity_leg\n# set1_21_40_rtree_treeWAS_simultaneous_sensitivity_leg\n# set1_21_40_rtree_treeWAS_subsequent_sensitivity_leg\n#\n# set1_21_40_rtree_treeWAS_terminal_FPR_leg\n# set1_21_40_rtree_treeWAS_simultaneous_FPR_leg\n# set1_21_40_rtree_treeWAS_subsequent_FPR_leg\n\n#########\n\n\n\n####\n# set3_1_120_ALL_treeWAS_terminal_F1score_leg\n# set3_1_120_ALL_treeWAS_simultaneous_F1score_leg\n# set3_1_120_ALL_treeWAS_subsequent_F1score_leg\n#\n# set3_1_120_ALL_treeWAS_terminal_PPV_leg\n# set3_1_120_ALL_treeWAS_simultaneous_PPV_leg\n# set3_1_120_ALL_treeWAS_subsequent_PPV_leg\n#\n# set3_1_120_ALL_treeWAS_terminal_sensitivity_leg\n# set3_1_120_ALL_treeWAS_simultaneous_sensitivity_leg\n# set3_1_120_ALL_treeWAS_subsequent_sensitivity_leg\n#\n# set3_1_120_ALL_treeWAS_terminal_FPR_leg\n# set3_1_120_ALL_treeWAS_simultaneous_FPR_leg\n# set3_1_120_ALL_treeWAS_subsequent_FPR_leg\n\n\n######\n\n##########################################################\n## BY TEST (w BEST treeWAS thresh method only x3 tests) ##\n##########################################################\nevalStats <- get(load(\"D:/treeWAS_Sims/set3/n.subs_1/evalStats/set3_1.120_ALL_s.ALL_af.ALL_treeWAS_evalStats.df.Rdata\"))\ndf <- evalStats\n\ndf.ori <- df\ndf <- df.ori\n\n\n\n\n###################\n## beeswarm.plot ##\n###################\nbeeswarm.plot <- function(y=\"sensitivity\", x=\"test\", df, y.lab=NULL,\n                          pt.size=4, x.text=FALSE){\n\n  require(beeswarm)\n  # library(plyr)\n  # library(ggplot2)\n\n  if(is.null(y.lab)) y.lab <- y\n\n  ## Y ~ X ??\n  fm <- as.formula(paste(y, x, sep=\" ~ \"))\n\n  beeswarm.ori <- beeswarm::beeswarm(fm,\n                                     data = df,\n                                     #method=\"swarm\", # swarm square hex center\n                                     #priority=\"descending\", ## ONLY for SWARM method...\n                                     method=\"center\", # swarm square hex center\n                                     #priority=\"descending\", ## ONLY for SWARM method...\n                                     pwcol = eval(parse(text=x)),\n                                     #col = myCol, ## to set w funky colours (INSTEAD of pwcol = test)\n                                     ylim = c(-0.001,1), # otherwise ggplot can't plot ZERO values --> NAs\n                                     las=2,\n                                     cex=0.8,\n                                     corral = \"omit\",\n                                     do.plot = FALSE) # none gutter wrap omit\n  # head(beeswarm)\n\n  ######################################################\n  ## Find and Replace OUTLIERS(' symbols in plot...): ##\n  ######################################################\n  outliers <- outlier.vals <- PCH <- list()\n\n  if(!is.factor(df[,x])) df[,x] <- as.factor(df[,x])\n  if(!all(as.character(beeswarm.ori$col) %in% levels(df[,x]))){\n    foo <- beeswarm.ori$col\n    foo <- levels(df[,x])[foo]\n    beeswarm.ori$col <- factor(foo, levels=levels(df[,x]))\n  }else{\n    beeswarm.ori$col <- factor(beeswarm.ori$col)\n  }\n\n  noms <- as.character(levels(beeswarm.ori$col))\n\n  ## FOR LOOP ##\n  for(i in 1:length(noms)){\n    #i <- 1\n    # get vals for variable (and boxplot)\n    val <- beeswarm.ori$y[which(beeswarm.ori$col==noms[i])]\n    #boxplot(val, ylim=c(-0.001, 1))\n    if(length(val) == 0){\n      PCH[[i]] <- NULL\n      outliers[[i]] <- NULL\n    }else{\n      PCH[[i]] <- rep(16, length(val)) # standard filled circle...\n\n      ## get median\n      M <- as.numeric(quantile(val, 0.5))\n      # get lower 25 of box\n      Q25 <- as.numeric(quantile(val, 0.25))\n      # get upper 75 of box\n      Q75 <- as.numeric(quantile(val, 0.75))\n      # get box length\n      box <- Q75-Q25\n\n      if(box == 0) box <- 0.0000001\n\n      # with a coef of 1.5 (the default for boxplots), identify outlying values\n      outliers[[i]] <- c(which(val < Q25-(1.5*box)), which(val > Q75+(1.5*box)))\n      # get values of outliers\n      if(length(outliers[[i]]) > 0){\n        outlier.vals[[i]] <- val[outliers[[i]]]\n        PCH[[i]] <- replace(PCH[[i]], outliers[[i]], 17) # replace with triangle...\n      }else{\n        outlier.vals[[i]] <- NULL\n      }\n    }\n  } # end for loop\n\n  #outliers\n  PCH <- as.vector(unlist(PCH))\n  # PCH\n\n\n  #########################################################################################################\n  ######################\n  ## plots, layers... ##\n  ######################\n\n  if(x.text == FALSE){\n\n    ################\n    ## NO X-TEXT: ##\n    ################\n\n    beeswarm.plot1 <- ggplot(beeswarm.ori, aes(x, y)) +\n      xlab(\"\") +\n      guides(fill=FALSE) +\n      scale_x_discrete(drop=FALSE) +\n      scale_y_continuous(y.lab, limits=c(0,1))  # expression(\"char\")\n\n    beeswarm.plot2 <- beeswarm.plot1 +\n      guides(fill=FALSE) +\n      geom_boxplot(data=df, aes(x=eval(parse(text=x)), y=eval(parse(text=y)), fill=eval(parse(text=x))), alpha=0.25,\n                   outlier.shape = 17,\n                   outlier.size=0) +\n    theme(axis.text.x=element_blank(),\n          axis.ticks.x=element_blank(), axis.title.x=element_blank(),\n          axis.text.y = element_text(size=13),\n          # axis.title.y=element_text(size=18),\n          axis.title.y=element_blank(),\n          legend.position=\"none\")\n\n    beeswarm.plot3 <- beeswarm.plot2 +\n      geom_point(data=beeswarm.ori, aes(colour = col), pch = PCH, size=pt.size, na.rm=TRUE, alpha=0.6) +\n      guides(fill=FALSE) +\n    theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), axis.title.x=element_blank(),\n          axis.text.y = element_text(size=13),\n          # axis.title.y=element_text(size=18),\n          axis.title.y=element_blank(),\n          legend.position=\"none\")\n\n    beeswarm.plot4 <- beeswarm.plot3 +\n      guides(fill=FALSE) +\n      geom_boxplot(data=df, aes(x=eval(parse(text=x)), y=eval(parse(text=y)), fill=eval(parse(text=x))), alpha=0.0, fatten=3,\n                   outlier.shape = 17,\n                   outlier.size=0) +\n      theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), axis.title.x=element_blank(),\n            axis.text.y = element_text(size=13),\n            # axis.title.y=element_text(size=18),\n            axis.title.y=element_blank(),\n            legend.position=\"none\")\n  }else{\n\n    ##################\n    ## WITH X-TEXT: ##\n    ##################\n\n    beeswarm.plot1 <- ggplot(beeswarm.ori, aes(x, y)) +\n      xlab(\"\") +\n      guides(fill=FALSE) +\n      scale_x_discrete(drop=FALSE) +\n      scale_y_continuous(y.lab, limits=c(0,1)) # expression(\"char\")\n\n    beeswarm.plot2 <- beeswarm.plot1 +\n      guides(fill=FALSE) +\n      geom_boxplot(data=df, aes(x=eval(parse(text=x)), y=eval(parse(text=y)), fill=eval(parse(text=x))), alpha=0.25,\n                   outlier.shape = 17,\n                   outlier.size=0) +\n      theme(axis.text.x = element_text(size=13),\n            # axis.text.x = element_text(angle=65, hjust=1, vjust=0.95, size=10),\n            axis.text.y = element_text(size=13),\n            axis.title.y = element_text(size=18),\n            axis.title.x = element_blank(),\n            legend.position=\"none\")\n\n    beeswarm.plot3 <- beeswarm.plot2 +\n      geom_point(data=beeswarm.ori, aes(colour = col), pch = PCH, size=pt.size, na.rm=TRUE, alpha=0.6) +\n      guides(fill=FALSE) +\n      theme(axis.text.x = element_text(size=13),\n            # axis.text.x = element_text(angle=65, hjust=1, vjust=0.95, size=10),\n            axis.text.y = element_text(size=13),\n            axis.title.y = element_text(size=18),\n            axis.title.x = element_blank(),\n            legend.position=\"none\")\n\n    beeswarm.plot4 <- beeswarm.plot3 +\n      guides(fill=FALSE) +\n      geom_boxplot(data=df, aes(x=eval(parse(text=x)), y=eval(parse(text=y)), fill=eval(parse(text=x))), alpha=0.0, fatten=3,\n                   outlier.shape = 17,\n                   outlier.size=0) +\n      theme(axis.text.x = element_text(size=13),\n            # axis.text.x = element_text(angle=65, hjust=1, vjust=0.95, size=10),\n            axis.text.y = element_text(size=13),\n            axis.title.y = element_text(size=18),\n            axis.title.x = element_blank(),\n            legend.position=\"none\")\n  }\n\n\n  ## PRINT PLOT ##\n  plot(beeswarm.plot4)\n\n} # end beeswarm.plot\n\n\n\n## CAREFUL: CHECK that your outliers are really in (ALMOST) the right place by plotting beeswarm2 w oultier.cex=2, and not outlier.size=0!\nbeeswarm.plot.terminal <- beeswarm.plot4\nbeeswarm.plot.simultaneous <- beeswarm.plot4\nbeeswarm.plot.subsequent <- beeswarm.plot4\n\n\n# set3_1.120_ALL_treeWAS.subsequent_FPR\n\n##############################################################################################################\n##############################################################################################################\n\n\n\n\n\n######################\n## MY DATA (TABLES) ##\n######################\n# evalStats <- get(load(\"C:/Cait 2016/Work/Xavier/Sims/set1/set1_1.40_ALL_treeWAS_evalStats.df.all.tests.Rdata\"))\n# evalStats <- get(load(\"C:/Cait 2016/Work/Xavier/Sims/set3/set3_1.120_ALL_s.ALL_af.ALL_treeWAS_evalStats.df.Rdata\"))\nevalStats <- get(load(\"D:/treeWAS_Sims/set3/n.subs_1/evalStats/set3_1.120_ALL_s.ALL_af.ALL_treeWAS_evalStats.df.Rdata\"))\ndf <- evalStats\n\ndf.ori <- df\ndf <- df.ori\n\n#################\n## n.phen.subs ##\n#################\ndf <- df[df$tree.type == \"coal\",]\ntable(df$n.phen.subs, df$s, df$af)\n\n## COAL tree:\n## s=1, af=5 --> too few subs [1:16]\n## s=10, af=5 --> too many subs [28:42]\n## TRY w s=3, af=5??\n\n## rtree:\n## s=0.5, af=5 --> works best :) [10:23, 45]\n\n\n### Want to run sims w n.subs >> poisson(1) & more like SimBac dists...\ndist <- rpois(1000, lambda=5)\nhist(dist)\n\n####################################\n## threshold-selection mechanisms ##\n####################################\n\n## AIM: Identify best-performing approach.\n## CRITERIA: Given \"minimal\" FPR, which has the highest sensitivity?\n\ndf <- df.ori # w original thresh levels\ndf <- evalStats # w new numeric reordered levels (from above plot code)\n\n#########\n## FPR ##\n#########\ndf.coal <- df[df$tree.type == \"coal\",]\nmax.FPR <- max(df.coal$FPR)\nmax.FPR <- round(max.FPR, 2)+0.01\n\nbeeswarm.plot(y=\"FPR\", x=\"test\", df=df.coal,\n              x.text=TRUE)\n\ntreeWAS.tests <- c(\"terminal\", \"simultaneous\", \"subsequent\")\nY <- c(\"F1.score\", \"PPV\", \"sensitivity\", \"FPR\")\n\n# for(y in 1:length(Y)){\ny <- 3\n  for(t in 1:3){\n    df <- evalStats\n    df <- df[df$treeWAS.test==treeWAS.tests[t], ] # & df$tree.type==\"rtree\" & df$s==0.5 & df$af==5\n    beeswarm.plot(y=Y[y], x=\"test\", df, #y.lab=\"Sensitivity\",\n                  pt.size=3, x.text=TRUE)\n  }\n# }\n\npar(mfrow=c(1,2))\nt <- 2\ndf <- evalStats\ndf <- df[df$treeWAS.test==treeWAS.tests[t] & df$tree.type==\"coal\", ] # & df$tree.type==\"rtree\" & df$s==0.5 & df$af==5\n## FPR\ny <- 4\nbeeswarm.plot(y=Y[y], x=\"test\", df, #y.lab=\"Sensitivity\",\n              pt.size=3, x.text=TRUE)\n## Sensitivity\ny <- 3\nbeeswarm.plot(y=Y[y], x=\"test\", df, #y.lab=\"Sensitivity\",\n              pt.size=3, x.text=TRUE)\n\n# par(mfrow=c(1,1))\n\n###############################\n## select thresh method based on F1-score.\n## For now, by median (across each run (or across each unique parameter set), for all 3 treeWAS.tests)\n## (More rigourously--could try an ANOVA to take variance into account...??)\nDF <- list(\"terminal\"=df[df$treeWAS.test==\"terminal\", ],\n           \"simultaneous\"=df[df$treeWAS.test==\"simultaneous\", ],\n           \"subsequent\"=df[df$treeWAS.test==\"subsequent\", ])\n\n# get all combos of tree.type, s, af\nl <- list(tree.type=c(\"coal\", \"rtree\"),\n          s=unique(df$s),\n          af=unique(df$af))\nparams <- do.call(expand.grid, l)\n\nparams <- unique(df[,c(\"tree.type\", \"s\", \"af\")])\nrow.names(params) <- c(1:nrow(params))\n\n\nF1 <- vector(\"list\", 3)\nnames(F1) <- treeWAS.tests\nfor(t in 1:length(treeWAS.tests)){\n  for(p in 1:nrow(params)){\n    df <- DF[[t]]\n    df <- df[df$tree.type==params$tree.type[p] & df$s==params$s[p] & df$af==params$af[p], ]\n    F1[[t]][[p]] <- sapply(c(1:32), function(e) median(df$F1.score[df$test==e], na.rm=TRUE))\n  }\n  F1[[t]][[\"df\"]] <- do.call(rbind, F1[[t]])\n  F1[[t]][[\"mean\"]] <- colMeans(F1[[t]]$df, na.rm=TRUE)\n  colnames(F1[[t]][[\"df\"]]) <- names(F1[[t]][[\"mean\"]]) <- c(1:32)\n  F1[[t]][[\"sorted\"]] <- sort(F1[[t]]$mean, decreasing=TRUE)\n  F1[[t]][[\"rank\"]] <- sapply(c(1:32), function(e) which(names(F1[[t]]$sorted) == names(F1[[t]]$mean)[e]))\n}\n\n\nF1.rank <- sapply(c(1:length(F1)), function(e) F1[[e]]$rank)\nF1.mean <- sapply(c(1:length(F1)), function(e) F1[[e]]$mean)\n\n\n## compare means across thresh tests and treeWAS.tests:\npar(mfrow=(c(3,1)))\nbarplot(F1.mean[,1])\nbarplot(F1.mean[,2])\nbarplot(F1.mean[,3])\npar(mfrow=(c(3,1)))\n\n###\n## get df (\"dat\"), for all 3 treeWAS.tests, for boxplot/beeswarm of F1:\ndf <- F1[[2]]$df\nF1.score <- as.vector(unlist(df))\ntest <- sort(rep(c(1:32), nrow(df)))\ndat2 <- data.frame(test, F1.score)\n\n## BOXPLOTS: ##\n## CAREFUL-- boxplot orders levels as character!!!\ndat1$test <- ordered(dat1$test, levels=c(1:32))\ndat2$test <- ordered(dat2$test, levels=c(1:32))\ndat3$test <- ordered(dat3$test, levels=c(1:32))\n\npar(mfrow=(c(3,1)))\nwith(dat1, boxplot(F1.score ~ test, col=transp(rainbow(32), 0.4)))\ntitle(\"Terminal\")\nwith(dat2, boxplot(F1.score ~ test, col=transp(rainbow(32), 0.4)))\ntitle(\"Simultaneous\")\nwith(dat3, boxplot(F1.score ~ test, col=transp(rainbow(32), 0.4)))\ntitle(\"Subsequent\")\npar(mfrow=(c(1,1)))\n\n## COMBINE INTO F1 LIST:\nDAT <- list(dat1, dat2, dat3)\nF1.ori.ori <- F1\ntemp <- vector(\"list\", 3)\nnames(temp) <- treeWAS.tests\n\nt<- 3\ntemp[[t]] <- list(\"df\" = DAT[[t]],\n                \"dat\" = F1[[t]]$df,\n                \"mean\" = F1[[t]]$mean,\n                \"sorted\" = F1[[t]]$sorted,\n                \"rank\" = F1[[t]]$rank)\n\nF1 <- temp\n\n## SAVE: ##\n# save(F1, file=\"D:/treeWAS_Sims/set3/n.subs_1/evalStats/F1_score_by_thresh_by_treeWAS_test.Rdata\")\n## save fig as pdf:\n# set3_boxplots_F1_score_by_thresh_by_treeWAS_test\n\n## COMBINE\ndf.all <- rbind(F1[[1]]$df,\n                F1[[2]]$df,\n                F1[[3]]$df)\n\n## PLOT IN ONE SET OF BOXPLOTS by thresh:\n## CAREFUL-- boxplot orders levels as character!!!\ndf.all$test <- ordered(df.all$test, levels=c(1:32))\nwith(df.all, boxplot(F1.score ~ test, col=transp(rainbow(32), 0.4)))\n\npar(mfrow=c(1,1))\nboxplot(df.all$F1.score~df.all$test, col=transp(rainbow(32), 0.4)) # cex.axis=0.5\ntitle(\"F1.score \\n(all 3 treeWAS tests combined)\")\n\n\n\n# beeswarm.plot(y=\"F1.score\", x=\"test\", df=dat, #y.lab=\"Sensitivity\",\n#               pt.size=3, x.text=TRUE)\n###\n\n\n\n\n# temp <- do.call(\"rbind\", F1)\n# temp\nF1\n##############################################################################################################\n##############################################################################################################\n\n\n\n# ##############\n# ## GET DATA ##    #######    #######    #######    #######    #######    #######    #######    #######    #######    #######\n# ##############\n#\n# setwd(\"C:/Cait 2016/Work/Xavier/Sims/set3/\")\n#\n# set.n <- \"set3\"\n#\n# dirname <- paste(\"C:/Cait 2016/Work/Xavier/Sims/\", set.n, sep=\"\")\n# # dirname <- paste(\"/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims/\", set.n, sep=\"\")\n#\n# foo <- dir(dirname)\n# foo\n# ## get all performance Rdata names\n# # toKeep <- grep(\"performance\", foo) ##??\n# # toKeep <- grep(\"phen.plot.col\", foo) ##??\n# toKeep <- grep(\"_res\", foo) ##??\n# foo <- foo[toKeep]\n# foo\n#\n# ## keep only subset w same args:\n# # toFind <- paste(set.n, \"_\", c(51:81), \"_\", sep=\"\")\n# # toFind <- paste(set.n, \"_\", c(21:30), \"_\", sep=\"\")\n# # toKeep <- sapply(c(1:length(toFind)), function(e) grep(toFind[e], foo)) ##??\n# # foo <- foo[toKeep]\n# # foo\n#\n# ## load performance data\n# dat <- list()\n# setwd(dirname)\n# system.time(\n#   for(i in 1:length(foo)){ # length(foo)\n#     print(i)\n#     # dat[[i]] <- get(load(paste(\"./\", foo[i], sep=\"\")))\n#     temp <- get(load(paste(\"./\", foo[i], sep=\"\")))\n#     dat[[i]] <- temp$vals$terminal$corr.dat[snps.assoc[, i]]\n#     gc()\n#   }\n# )\n#\n# ## REORDER dat s.t. order is numeric not character...\n# inds.new <- c(1:length(dat))\n# inds.ori <- sort(as.character(inds.new))\n# ord <- sapply(c(1:length(inds.new)), function(e) which(as.numeric(inds.ori) == inds.new[e]))\n#\n# dat.ori <- dat\n# dat <- dat[ord]\n#\n# #####################\n# ## get snps.assoc: ##\n# #####################\n# # dat = performance\n# snps.assoc <- sapply(c(1:length(dat)), function(e) dat[[e]][[1]])\n#\n# snps.assoc <- as.list(as.data.frame(snps.assoc))\n# # snps.assoc[[1]]\n# snps.assoc <- snps.assoc[ord]\n# # res <- dat\n#\n# ######################\n# ## get score1.mean: ##\n# ######################\n# # dat = res\n# score1.mean <- sapply(c(1:length(dat)), function(e) mean(dat[[e]]))\n# score1 <- dat\n#\n# ## SAVE ##\n# save(score1, file=\"./set3_1.120_ALL_terminal.score_snps.assoc.Rdata\")\n# save(snps.assoc, file=\"./set3_1.120_ALL_snps.assoc.Rdata\")\n#\n# ## bind score1.mean to args in evalStats:\n# evalStats <- cbind(evalStats[,1:10], score1.mean, evalStats[,11:18])\n# # table(round(evalStats$score1.mean, 1), evalStats$s, evalStats$af, evalStats$tree.type)\n#\n# ## SAVE: ##\n# # filename <- \"./set3_1.120_ALL_s.ALL_af.ALL_treeWAS_evalStats.df.Rdata\"\n# # save(evalStats, file=filename)\n#\n# ######################\n# ## get n.phen.subs: ##\n# ######################\n# n.phen.subs <- sapply(c(1:length(dat)), function(e) length(which(dat[[e]]$edges == \"grey\")))\n#\n# head(evalStats)\n#\n# ## bind n.phen.subs to args in evalStats:\n# evalStats <- cbind(evalStats[,1:9], n.phen.subs, evalStats[,10:17])\n# # table(evalStats$n.phen.subs, evalStats$s, evalStats$tree.type)\n#\n# ## SAVE: ##\n# # filename <- \"./set3_1.120_ALL_s.ALL_af.ALL_treeWAS_evalStats.df.Rdata\"\n# # save(evalStats, file=filename)\n#\n# evalStats <- get(load(\"./set3_1.120_ALL_s.ALL_af.ALL_treeWAS_evalStats.df.Rdata\"))\n#\n# ######################\n# ## get avg. score1: ##\n# ######################\n#\n#\n#\n#\n# ##############\n# ## CAREFUL: ##\n# ##############\n# ## (1) accuracy may need to be multiplied by 2 (if ncol(snps) was doubled for PLINK!)\n# ## (2) names of performance etc. may need to be changed (if you want to use them...)\n# ## ### (eg. if all treeWAS == \"terminal\" --> 2nd 1/3 = \"simultaneous\", 3rd 1/3 = \"subsequent\")\n#\n# names(dat[[1]])\n#\n# # ## CORRECT NAMES: ##\n# ## treeWAS = 4:99\n# (99-3)/3 # 32\n# inds.terminal <- c(4:(4+31))\n# inds.simultaneous <- c((max(inds.terminal)+1):((max(inds.terminal)+1)+31))\n# inds.subsequent <- c((max(inds.simultaneous)+1):((max(inds.simultaneous)+1)+31))\n# noms.ori <- names(dat[[1]])\n# noms <- noms.ori\n#\n# temp <- noms[inds.simultaneous]\n# temp2 <- paste(\"treeWAS.simultaneous\", removeFirstN(temp, nchar(\"treeWAS.terminal\")), sep=\"\")\n#\n# temp <- noms[inds.subsequent]\n# temp3 <- paste(\"treeWAS.subsequent\", removeFirstN(temp, nchar(\"treeWAS.terminal\")), sep=\"\")\n#\n# noms <- replace(noms, inds.simultaneous, temp2)\n# noms <- replace(noms, inds.subsequent, temp3)\n# noms\n#\n# for(i in 1:length(dat)){\n#   names(dat[[i]]) <- noms\n# }\n#\n# treeWAS <- vector(\"list\", length=3)\n# names(treeWAS) <- c(\"terminal\", \"simultaneous\", \"subsequent\")\n# treeWAS$terminal <- treeWAS$simultaneous <- treeWAS$subsequent <- list()\n#\n#\n# fisher.bonf <- fisher.fdr <-\n#   plink.bonf <- plink.fdr <- plink.gc.bonf <- plink.gc.fdr <- list()\n#\n# for(i in 1:length(dat)){\n#   treeWAS$terminal[[i]] <- treeWAS$simultaneous[[i]] <- treeWAS$subsequent[[i]] <- list()\n#\n#   for(e in 2:length(names(dat[[1]]))){\n#     ## Fisher:\n#     if(e == 2){\n#       fisher.bonf[[i]] <- dat[[i]][[e]]\n#     }\n#     if(e == 3){\n#       fisher.fdr[[i]] <- dat[[i]][[e]]\n#     }\n#     ## treeWAS:\n#     if(e %in% 4:35){\n#       treeWAS$terminal[[i]][[(length(treeWAS$terminal[[i]])+1)]] <- dat[[i]][[e]]\n#     }\n#     if(e %in% 36:67){\n#       treeWAS$simultaneous[[i]][[(length(treeWAS$simultaneous[[i]])+1)]] <- dat[[i]][[e]]\n#     }\n#     if(e %in% 68:99){\n#       treeWAS$subsequent[[i]][[(length(treeWAS$subsequent[[i]])+1)]] <- dat[[i]][[e]]\n#     }\n#     ## PLINK:\n#     if(e == 100){\n#       plink.bonf[[i]] <- dat[[i]][[e]]\n#     }\n#     if(e == 101){\n#       plink.fdr[[i]] <- dat[[i]][[e]]\n#     }\n#     if(e == 102){\n#       plink.gc.bonf[[i]] <- dat[[i]][[e]]\n#     }\n#     if(e == 103){\n#       plink.gc.fdr[[i]] <- dat[[i]][[e]]\n#     }\n#   } # end e for loop\n#   names(treeWAS$terminal[[i]]) <- removeFirstN(noms[4:35], nchar(\"treeWAS.terminal.\"))\n#   names(treeWAS$simultaneous[[i]]) <- removeFirstN(noms[36:67], nchar(\"treeWAS.simultaneous.\"))\n#   names(treeWAS$subsequent[[i]]) <- removeFirstN(noms[68:99], nchar(\"treeWAS.subsequent.\"))\n# } # end i for loop\n#\n#\n#\n#\n#\n# ## combine\n# # treeWAS <- do.call(\"rbind\", treeWAS)\n# fisher.bonf <- do.call(\"rbind\", fisher.bonf)\n# fisher.fdr <- do.call(\"rbind\", fisher.fdr)\n# plink.bonf <- do.call(\"rbind\", plink.bonf)\n# plink.fdr <- do.call(\"rbind\", plink.fdr)\n# plink.gc.bonf <- do.call(\"rbind\", plink.gc.bonf)\n# plink.gc.fdr <- do.call(\"rbind\", plink.gc.fdr)\n#\n# ## Get dfs of nrow=length(dat),\n# ## for each of the 32 thresh methods and each of the 3 treeWAS tests:\n# df <- list()\n# for(t in 1:length(treeWAS)){\n#   df[[t]] <- list()\n#   for(e in 1:32){\n#     df[[t]][[e]] <- list()\n#     for(i in 1:length(treeWAS[[t]])){\n#       df[[t]][[e]][[i]] <- treeWAS[[t]][[i]][[e]]\n#       # df[[t]][[i]] <- do.call(\"rbind\", sapply(c(1:length(treeWAS[[t]])), function(e) treeWAS[[t]][[e]][[i]]))\n#     }\n#     df[[t]][[e]] <- do.call(\"rbind\", df[[t]][[e]])\n#     ################\n#     ## TEMP -- FOR SOME DATASETS, NEED TO MULTIPLY ACCURACY BY TWO!!!!!!!!!!!!!!\n#     ## (though arguably accuracy is not a useful metric for genetic data.. )\n#     # df[[t]][[e]]$accuracy <- df[[t]][[e]]$accuracy*2\n#\n#     acc <- df[[t]][[e]]$accuracy\n#     for(a in toChange){\n#       acc[a] <- acc[a]*2\n#     }\n#     df[[t]][[e]]$accuracy <- acc\n#     ################\n#   }\n#   names(df[[t]]) <- names(treeWAS$terminal[[1]])\n# }\n# names(df) <- c(\"terminal\", \"simultaneous\", \"subsequent\")\n#\n# treeWAS.df <- df\n# str(treeWAS.df[[1]])\n#\n# str(df[[1]])\n# length(df[[1]])\n# nrow(df[[1]][[1]])\n#\n# ## CHECK -- accuracy:\n# # DF <- df[[1]][[1]]\n# # acc.ori <- DF$accuracy\n# # acc.new <- ((DF$sensitivity*10) + (DF$specificity*9990))/10000\n# # toChange <- which(acc.ori <= 0.5)\n#\n#\n#\n# ## CORRECT ACCURACY:\n# # fisher.bonf$accuracy <- fisher.bonf$accuracy*2\n# # fisher.fdr$accuracy <- fisher.fdr$accuracy*2\n# #\n# # plink.bonf$accuracy <- plink.bonf$accuracy*2\n# # plink.fdr$accuracy <- plink.fdr$accuracy*2\n# # plink.gc.bonf$accuracy <- plink.gc.bonf$accuracy*2\n# # plink.gc.fdr$accuracy <- plink.gc.fdr$accuracy*2\n#\n# ## OR -- correct a SUBSET of accuracy...\n# # fisher.bonf$accuracy[toChange] <- fisher.bonf$accuracy[toChange]*2\n# # fisher.fdr$accuracy[toChange] <- fisher.fdr$accuracy[toChange]*2\n# #\n# # plink.bonf$accuracy[toChange] <- plink.bonf$accuracy[toChange]*2\n# # plink.fdr$accuracy[toChange] <- plink.fdr$accuracy[toChange]*2\n# # plink.gc.bonf$accuracy[toChange] <- plink.gc.bonf$accuracy[toChange]*2\n# # plink.gc.fdr$accuracy[toChange] <- plink.gc.fdr$accuracy[toChange]*2\n#\n# ##########\n# ## save ##    #######    #######    #######    #######    #######    #######\n# ##########\n# tree.type <- \"ALL\"\n# s <- \"ALL\"\n# af <- \"ALL\"\n# dir.n <- \"1.120\"\n# # getwd()\n# filename <- paste(\"./\", set.n, \"_\", dir.n, \"_\", tree.type, \"_s.\", s, \"_af.\", af, \"_treeWAS_evalStats.Rdata\", sep=\"\")\n# save(treeWAS.df, file=filename)\n# filename <- paste(\"./\", set.n, \"_\", dir.n, \"_\", tree.type, \"_s.\", s, \"_af.\", af, \"_fisher.bonf_evalStats.Rdata\", sep=\"\")\n# save(fisher.bonf, file=filename)\n# filename <- paste(\"./\", set.n, \"_\", dir.n, \"_\", tree.type, \"_s.\", s, \"_af.\", af, \"_fisher.fdr_evalStats.Rdata\", sep=\"\")\n# save(fisher.fdr, file=filename)\n# filename <- paste(\"./\", set.n, \"_\", dir.n, \"_\", tree.type, \"_s.\", s, \"_af.\", af, \"_plink.bonf_evalStats.Rdata\", sep=\"\")\n# save(plink.bonf, file=filename)\n# filename <- paste(\"./\", set.n, \"_\", dir.n, \"_\", tree.type, \"_s.\", s, \"_af.\", af, \"_plink.fdr_evalStats.Rdata\", sep=\"\")\n# save(plink.fdr, file=filename)\n# filename <- paste(\"./\", set.n, \"_\", dir.n, \"_\", tree.type, \"_s.\", s, \"_af.\", af, \"_plink.gc.bonf_evalStats.Rdata\", sep=\"\")\n# save(plink.gc.bonf, file=filename)\n# filename <- paste(\"./\", set.n, \"_\", dir.n, \"_\", tree.type, \"_s.\", s, \"_af.\", af, \"_plink.gc.fdr_evalStats.Rdata\", sep=\"\")\n# save(plink.gc.fdr, file=filename)\n#\n# ## summarise\n# summary(fisher.bonf)\n# summary(fisher.fdr)\n# summary(plink.bonf)\n# summary(plink.fdr)\n# summary(plink.gc.bonf)\n# summary(plink.gc.fdr)\n#\n# ## summarise treeWAS by test & thresh...\n# treeWAS.sum <- list()\n# for(t in 1:length(treeWAS.df)){\n#   treeWAS.sum[[t]] <- list()\n#   for(e in 1:length(treeWAS.df[[t]])){\n#     treeWAS.sum[[t]][[e]] <- summary(treeWAS.df[[t]][[e]])\n#   }\n#   names(treeWAS.sum[[t]]) <- names(treeWAS.df[[t]])\n# }\n# names(treeWAS.sum) <- names(treeWAS.df)\n#\n# treeWAS.sum\n#\n#\n#\n# ##############################################################################################################\n# ##########\n# ## plot ##    #######    #######    #######    #######    #######    #######    #######    #######    #######\n# ##########\n# ##############################################################################################################\n#\n# ###################################\n# ## BY THRESHOLD-SELECTION METHOD ##\n# ###################################\n#\n# ###################\n# ## GET evalStats ##\n# ###################\n# ## (for each sel method, by test)\n# evalStats <- vector(\"list\", length=3)\n# names(evalStats) <- c(\"terminal\", \"simultaneous\", \"subsequent\")\n# evalStats$terminal <- evalStats$simultaneous <- evalStats$subsequent <- list()\n#\n# ## Get repeated thresh-sel names column: ##\n# nom.ori <- names(treeWAS.df[[1]])\n# nom <- list()\n# for(i in 1:length(nom.ori)){\n#   nom[[i]] <- rep(nom.ori[[i]], nrow(treeWAS.df[[1]][[1]]))\n# }\n# thresh.sel <- as.vector(unlist(nom))\n# test <- thresh.sel # using test instead of thresh.sel for convenience w plot code below...\n#\n# ## PLUS: break test into its composite parts:\n# ################\n#\n# temp <- strsplit(test, \"[.]\")\n# temp <- do.call(\"rbind\", temp)\n#\n# # pval <- temp[,3] # 05\n# pval <- paste(temp[,2], temp[,3], sep=\".\") # 0.05\n# pval.correct <- temp[,4] # bonf # fdr\n# pval.by  <- temp[,5] # count # density\n# n.snps.sim <- paste(temp[,6], \"x\", sep=\"\") # 1x # 10x.n.snps\n#\n# thresh.sel <- data.frame(test, pval, pval.correct, pval.by, n.snps.sim)\n#\n# tree.type <- c(rep(\"coal\", 40), rep(\"rtree\", 41), rep(\"coal\", 19), rep(\"rtree\", 20))\n# s <- c(rep(1, 10), rep(10, 10), rep(1, 10), rep(10, 10), rep(2, 10), rep(1, 31), rep(0.5, 10), rep(0.1, 9), rep(0.5, 10), rep(0.1, 10))\n# af <- c(rep(2, 20), rep(5, 100))\n#\n# args <- data.frame(tree.type, s, af)\n#\n# params <- cbind(thresh.sel, args)\n#\n# ################\n#\n#\n# ## Get evalStats and make df: ##\n# for(t in 1:length(treeWAS.df)){\n#   df <- treeWAS.df[[t]]\n#\n#   accuracy <- specificity <- FPR <- FNR <- sensitivity <- PPV <- FDR <- list()\n#\n#   for(i in 1:length(df)){\n#     accuracy[[i]] <- df[[i]]$accuracy\n#     specificity[[i]] <- df[[i]]$specificity\n#     FPR[[i]] <- df[[i]]$FPR\n#     FNR[[i]] <- df[[i]]$FNR\n#     sensitivity[[i]] <- df[[i]]$sensitivity\n#     PPV[[i]] <- df[[i]]$PPV\n#     FDR[[i]] <- df[[i]]$FDR\n#   } # end (i) for loop\n#\n#   accuracy <- as.vector(unlist(accuracy))\n#   specificity <- as.vector(unlist(specificity))\n#   FPR <- as.vector(unlist(FPR))\n#   FNR <- as.vector(unlist(FNR))\n#   sensitivity <- as.vector(unlist(sensitivity))\n#   PPV <- as.vector(unlist(PPV))\n#   FDR <- as.vector(unlist(FDR))\n#\n#   F1.score <- 2*((PPV*sensitivity) / (PPV+sensitivity))\n#\n#   evalStats[[t]] <- data.frame(params, accuracy, specificity, FPR, FNR, sensitivity, PPV, FDR, F1.score)\n#\n# } # end (t) for loop\n#\n# ##########\n# ## save ##    #######    #######    #######    #######    #######    #######\n# ##########\n# tree.type <- \"ALL\"\n# s <- \"ALL\"\n# af <- \"ALL\"\n# dir.n <- \"1.120\"\n# # getwd()\n# filename <- paste(\"./\", set.n, \"_\", dir.n, \"_\", tree.type, \"_s.\", s, \"_af.\", af, \"_treeWAS_evalStats.df.Rdata\", sep=\"\")\n# save(evalStats, file=filename)\n#\n# #######    #######    #######    #######    #######    #######    #######\n#\n# ## append treeWAS.test to treeWAS evalStats and bind:\n# treeWAS.test <- c(rep(\"terminal\", nrow(evalStats[[1]])),\n#                   rep(\"simultaneous\", nrow(evalStats[[2]])),\n#                   rep(\"subsequent\", nrow(evalStats[[3]])))\n# temp <- do.call(\"rbind\", evalStats)\n# temp <- data.frame(treeWAS.test, temp)\n# rownames(temp) <- NULL\n# evalStats <- temp\n#\n# ## append args to other tests:\n# fisher.bonf <- data.frame(args, fisher.bonf)\n# fisher.fdr <- data.frame(args, fisher.fdr)\n# plink.bonf <- data.frame(args, plink.bonf)\n# plink.fdr <- data.frame(args, plink.fdr)\n# plink.gc.bonf <- data.frame(args, plink.gc.bonf)\n# plink.gc.fdr <- data.frame(args, plink.gc.fdr)\n#\n#\n# ##########\n# ## save ##    #######    #######    #######    #######    #######    #######\n# ##########\n# tree.type <- \"ALL\"\n# s <- \"ALL\"\n# af <- \"ALL\"\n# dir.n <- \"1.120\"\n#\n# filename <- paste(\"./\", set.n, \"_\", dir.n, \"_\", tree.type, \"_s.\", s, \"_af.\", af, \"_treeWAS_evalStats.df.all.tests.Rdata\", sep=\"\")\n# save(evalStats, file=filename)\n#\n# filename <- paste(\"./\", set.n, \"_\", dir.n, \"_\", tree.type, \"_s.\", s, \"_af.\", af, \"_fisher.bonf_evalStats.df.Rdata\", sep=\"\")\n# save(fisher.bonf, file=filename)\n# filename <- paste(\"./\", set.n, \"_\", dir.n, \"_\", tree.type, \"_s.\", s, \"_af.\", af, \"_fisher.fdr_evalStats.df.Rdata\", sep=\"\")\n# save(fisher.fdr, file=filename)\n# filename <- paste(\"./\", set.n, \"_\", dir.n, \"_\", tree.type, \"_s.\", s, \"_af.\", af, \"_plink.bonf_evalStats.df.Rdata\", sep=\"\")\n# save(plink.bonf, file=filename)\n# filename <- paste(\"./\", set.n, \"_\", dir.n, \"_\", tree.type, \"_s.\", s, \"_af.\", af, \"_plink.fdr_evalStats.df.Rdata\", sep=\"\")\n# save(plink.fdr, file=filename)\n# filename <- paste(\"./\", set.n, \"_\", dir.n, \"_\", tree.type, \"_s.\", s, \"_af.\", af, \"_plink.gc.bonf_evalStats.df.Rdata\", sep=\"\")\n# save(plink.gc.bonf, file=filename)\n# filename <- paste(\"./\", set.n, \"_\", dir.n, \"_\", tree.type, \"_s.\", s, \"_af.\", af, \"_plink.gc.fdr_evalStats.df.Rdata\", sep=\"\")\n# save(plink.gc.fdr, file=filename)\n#\n# ###################\n# ## BEESWARM PLOT ##   #########################   #########################   #########################\n# ###################\n# ## uses BOTH df and beeswarm dataframes...\n#\n# # library(beeswarm)\n# # library(plyr)\n# # library(ggplot2)\n#\n# #############\n# ## MY DATA ##\n# #############\n#\n# # t <- 3\n# # df <- evalStats[[t]]\n#\n# treeWAS.tests <- c(\"terminal\", \"simultaneous\", \"subsequent\")\n#\n# # t <- 1\n# for(t in 1:3){\n#   df <- evalStats\n#   df <- df[df$treeWAS.test==treeWAS.tests[t] & df$tree.type==\"coal\" & df$s==0.1 & df$af==5, ]\n#   beeswarm.plot(y=\"F1.score\", x=\"test\", df, #y.lab=\"Sensitivity\",\n#                 pt.size=4, legend=TRUE)\n# }\n# #\n#\n# ## SAVE\n#\n# # set3_92.100_rtree_s.0.1_af.5_treeWAS.terminal_PPV_leg\n# # set3_92.100_rtree_s.0.1_af.5_treeWAS.simultaneous_PPV_leg\n# # set3_92.100_rtree_s.0.1_af.5_treeWAS.subsequent_PPV_leg\n# #\n# # set3_92.100_rtree_s.0.1_af.5_treeWAS.terminal_sensitivity_leg\n# # set3_92.100_rtree_s.0.1_af.5_treeWAS.simultaneous_sensitivity_leg\n# # set3_92.100_rtree_s.0.1_af.5_treeWAS.subsequent_sensitivity_leg\n# #\n# # set3_92.100_rtree_s.0.1_af.5_treeWAS.terminal_FPR_leg\n# # set3_92.100_rtree_s.0.1_af.5_treeWAS.simultaneous_FPR_leg\n# # set3_92.100_rtree_s.0.1_af.5_treeWAS.subsequent_FPR_leg\n# #\n# # set3_92.100_rtree_s.0.1_af.5_treeWAS.terminal_F1.score_leg\n# # set3_92.100_rtree_s.0.1_af.5_treeWAS.simultaneous_F1.score_leg\n# # set3_92.100_rtree_s.0.1_af.5_treeWAS.subsequent_F1.score_leg\n#\n# ## REDO ALL PPV\n# # set3_1.120_ALL_treeWAS.terminal_F1.score_leg\n# # set3_1.120_ALL_treeWAS.simultaneous_F1.score_leg\n# # set3_1.120_ALL_treeWAS.subsequent_F1.score_leg\n#\n# # set3_1.120_ALL_treeWAS.terminal_PPV_leg\n# # set3_1.120_ALL_treeWAS.simultaneous_PPV_leg\n# # set3_1.120_ALL_treeWAS.subsequent_PPV_leg\n#\n# # set3_1.120_ALL_treeWAS.terminal_sensitivity_leg\n# # set3_1.120_ALL_treeWAS.simultaneous_sensitivity_leg\n# # set3_1.120_ALL_treeWAS.subsequent_sensitivity_leg\n#\n# # set3_1.120_ALL_treeWAS.terminal_FPR_leg\n# # set3_1.120_ALL_treeWAS.simultaneous_FPR_leg\n# # set3_1.120_ALL_treeWAS.subsequent_FPR_leg\n#\n# ###################\n# ## beeswarm.plot ##\n# ###################\n# beeswarm.plot <- function(y=\"sensitivity\", x=\"test\", df, y.lab=NULL,\n#                           pt.size=4, legend=FALSE){\n#\n#   if(is.null(y.lab)) y.lab <- y\n#\n#   ## Y ~ X ??\n#   fm <- as.formula(paste(y, x, sep=\" ~ \"))\n#\n#   beeswarm <- beeswarm(fm,\n#                        data = df,\n#                        #method=\"swarm\", # swarm square hex center\n#                        #priority=\"descending\", ## ONLY for SWARM method...\n#                        method=\"center\", # swarm square hex center\n#                        #priority=\"descending\", ## ONLY for SWARM method...\n#                        pwcol = eval(parse(text=x)),\n#                        #col = myCol, ## to set w funky colours (INSTEAD of pwcol = test)\n#                        ylim = c(-0.001,1), # otherwise ggplot can't plot ZERO values --> NAs\n#                        las=2,\n#                        cex=0.8,\n#                        corral = \"omit\",\n#                        do.plot = FALSE) # none gutter wrap omit\n#   # head(beeswarm)\n#\n#   ######################################################\n#   ## Find and Replace OUTLIERS(' symbols in plot...): ##\n#   ######################################################\n#   outliers <- outlier.vals <- PCH <- list()\n#\n#   if(!all(beeswarm$col %in% levels(df[,x]))){\n#     foo <- beeswarm$col\n#     foo <- levels(df[,x])[foo]\n#     beeswarm$col <- factor(foo, levels=levels(df[,x]))\n#   }\n#\n#   noms <- as.character(levels(beeswarm$col))\n#\n#   ## FOR LOOP ##\n#   for(i in 1:length(noms)){\n#     #i <- 1\n#     # get vals for variable (and boxplot)\n#     val <- beeswarm$y[which(beeswarm$col==noms[i])]\n#     #boxplot(val, ylim=c(-0.001, 1))\n#     if(length(val) == 0){\n#       PCH[[i]] <- NULL\n#       outliers[[i]] <- NULL\n#     }else{\n#       PCH[[i]] <- rep(16, length(val)) # standard filled circle...\n#\n#       ## get median\n#       M <- as.numeric(quantile(val, 0.5))\n#       # get lower 25 of box\n#       Q25 <- as.numeric(quantile(val, 0.25))\n#       # get upper 75 of box\n#       Q75 <- as.numeric(quantile(val, 0.75))\n#       # get box length\n#       box <- Q75-Q25\n#\n#       if(box == 0) box <- 0.0000001\n#\n#       # with a coef of 1.5 (the default for boxplots), identify outlying values\n#       outliers[[i]] <- c(which(val < Q25-(1.5*box)), which(val > Q75+(1.5*box)))\n#       # get values of outliers\n#       if(length(outliers[[i]]) > 0){\n#         outlier.vals[[i]] <- val[outliers[[i]]]\n#         PCH[[i]] <- replace(PCH[[i]], outliers[[i]], 17) # replace with triangle...\n#       }else{\n#         outlier.vals[[i]] <- NULL\n#       }\n#     }\n#   } # end for loop\n#\n#   #outliers\n#   PCH <- as.vector(unlist(PCH))\n#   # PCH\n#\n#\n#   #########################################################################################################\n#   ######################\n#   ## plots, layers... ##\n#   ######################\n#\n#   if(legend == FALSE){\n#\n#     ################\n#     ## NO LEGEND: ##\n#     ################\n#\n#     beeswarm.plot <- ggplot(beeswarm, aes(x, y)) +\n#       xlab(\"\") +\n#       guides(fill=FALSE) +\n#       scale_x_discrete(drop=FALSE) +\n#       scale_y_continuous(y.lab, limits=c(0,1))  # expression(\"char\")\n#\n#     beeswarm.plot2 <- beeswarm.plot +\n#       guides(fill=FALSE) +\n#       geom_boxplot(data=df, aes(x=eval(parse(text=x)), y=eval(parse(text=y)), fill=eval(parse(text=x))), alpha=0.25,\n#                    outlier.shape = 17,\n#                    outlier.size=0) +\n#       theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), axis.title.x=element_blank(),\n#             axis.text.y = element_text(size=13),\n#             axis.title.y=element_text(size=18),\n#             legend.position=\"none\")\n#\n#     beeswarm.plot3 <- beeswarm.plot2 +\n#       geom_point(data=beeswarm, aes(colour = col), pch = PCH, size=pt.size, na.rm=TRUE, alpha=0.6) +\n#       guides(fill=FALSE) +\n#       theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), axis.title.x=element_blank(),\n#             axis.text.y = element_text(size=13),\n#             axis.title.y=element_text(size=18),\n#             legend.position=\"none\")\n#\n#     beeswarm.plot4 <- beeswarm.plot3 +\n#       guides(fill=FALSE) +\n#       geom_boxplot(data=df, aes(x=eval(parse(text=x)), y=eval(parse(text=y)), fill=eval(parse(text=x))), alpha=0.0, fatten=3,\n#                    outlier.shape = 17,\n#                    outlier.size=0) +\n#       theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), axis.title.x=element_blank(),\n#             axis.text.y = element_text(size=13),\n#             axis.title.y=element_text(size=18),\n#             legend.position=\"none\")\n#   }else{\n#\n#     ##################\n#     ## WITH LEGEND: ##\n#     ##################\n#\n#     beeswarm.plot <- ggplot(beeswarm, aes(x, y)) +\n#       xlab(\"\") +\n#       guides(fill=FALSE) +\n#       scale_x_discrete(drop=FALSE) +\n#       scale_y_continuous(y.lab, limits=c(0,1)) # expression(\"char\")\n#\n#     beeswarm.plot2 <- beeswarm.plot +\n#       guides(fill=FALSE) +\n#       geom_boxplot(data=df, aes(x=eval(parse(text=x)), y=eval(parse(text=y)), fill=eval(parse(text=x))), alpha=0.25,\n#                    outlier.shape = 17,\n#                    outlier.size=0) +\n#       theme(axis.text.x = element_text(angle=65, hjust=1, vjust=0.95, size=10),\n#             axis.text.y = element_text(size=13),\n#             axis.title.y = element_text(size=18),\n#             axis.title.x = element_blank(),\n#             legend.position=\"none\")\n#\n#     beeswarm.plot3 <- beeswarm.plot2 +\n#       geom_point(data=beeswarm, aes(colour = col), pch = PCH, size=pt.size, na.rm=TRUE, alpha=0.6) +\n#       guides(fill=FALSE) +\n#       theme(axis.text.x = element_text(angle=65, hjust=1, vjust=0.95, size=10),\n#             axis.text.y = element_text(size=13),\n#             axis.title.y = element_text(size=18),\n#             axis.title.x = element_blank(),\n#             legend.position=\"none\")\n#\n#     beeswarm.plot4 <- beeswarm.plot3 +\n#       guides(fill=FALSE) +\n#       geom_boxplot(data=df, aes(x=eval(parse(text=x)), y=eval(parse(text=y)), fill=eval(parse(text=x))), alpha=0.0, fatten=3,\n#                    outlier.shape = 17,\n#                    outlier.size=0) +\n#       theme(axis.text.x = element_text(angle=65, hjust=1, vjust=0.95, size=10),\n#             axis.text.y = element_text(size=13),\n#             axis.title.y = element_text(size=18),\n#             axis.title.x = element_blank(),\n#             legend.position=\"none\")\n#   }\n#\n#\n#   ## PRINT PLOT ##\n#   plot(beeswarm.plot4)\n#\n# } # end beeswarm.plot\n#\n#\n#\n# ## CAREFUL: CHECK that your outliers are really in (ALMOST) the right place by plotting beeswarm2 w oultier.cex=2, and not outlier.size=0!\n# beeswarm.plot.terminal <- beeswarm.plot4\n# beeswarm.plot.simultaneous <- beeswarm.plot4\n# beeswarm.plot.subsequent <- beeswarm.plot4\n#\n#\n# # set3_1.120_ALL_treeWAS.subsequent_FPR\n#\n# ##########################################################################################################\n\n\n####################################\n## All 3 tests together now! (??) ##\n####################################\n\n# ## save as png, then...\n# # install.packages(\"png\", dep=T)\n# library(png)\n#\n# filenames <- c(\"./set3_21.30_coal_s.1_af.5_treeWAS.terminal_FPR.png\",\n#                \"./set3_21.30_coal_s.1_af.5_treeWAS.simultaneous_FPR.png\",\n#                \"./set3_21.30_coal_s.1_af.5_treeWAS.subsequent_FPR.png\")\n# foo<-list()\n# for(j in 1:3) foo[[j]] <- readPNG(filenames[j])\n#\n# layout(matrix(1:3,nr=3,byr=T))\n# for (j in 1:3) plot(foo[[j]])\n\n\n################\n\n#\n# install.packages(\"gridExtra\", dep=T)\n# library(\"gridExtra\")\n#\n# arrangeGrob(beeswarm.plot.terminal,\n#           beeswarm.plot.simultaneous,\n#           beeswarm.plot.subsequent,\n#           labels=c(\"terminal\", \"simultaneous\", \"subsequent\"), ncol = 3, nrow = 1)\n\n\n# par(mfrow=c(3,1))\n# beeswarm.plot.terminal\n# beeswarm.plot.simultaneous\n# beeswarm.plot.subsequent\n# par(mfrow=c(1,1))\n\n\n\n\n##########################################################\n## BY TEST (w BEST treeWAS thresh method only x3 tests) ##\n##########################################################\n\n# dat.ori <- dat\n#\n# test <- c(rep(\"treeWAS\", length(treeWAS$accuracy)),\n#           rep(\"fisher.bonf\", length(fisher.bonf$accuracy)),\n#           rep(\"fisher.fdr\", length(fisher.fdr$accuracy)),\n#           rep(\"plink.bonf\", length(plink.bonf$accuracy)),\n#           rep(\"plink.fdr\", length(plink.bonf$accuracy)),\n#           rep(\"plink.gc.bonf\", length(plink.bonf$accuracy)),\n#           rep(\"plink.gc.fdr\", length(plink.bonf$accuracy))\n#           )\n#\n# # accuracy <- c(treeWAS$accuracy, fisher.bonf$accuracy, fisher.fdr$accuracy,\n# #               plink.bonf$accuracy, plink.fdr$accuracy, plink.gc.bonf$accuracy, plink.gc.fdr$accuracy)\n#\n#\n# sensitivity <- c(treeWAS$sensitivity, fisher.bonf$sensitivity, fisher.fdr$sensitivity,\n#                  plink.bonf$sensitivity, plink.fdr$sensitivity, plink.gc.bonf$sensitivity, plink.gc.fdr$sensitivity)\n#\n#\n# specificity <- c(treeWAS$specificity, fisher.bonf$specificity, fisher.fdr$specificity,\n#                  plink.bonf$specificity, plink.fdr$specificity, plink.gc.bonf$specificity, plink.gc.fdr$specificity)\n#\n# FPR <- c(treeWAS$FPR, fisher.bonf$FPR, fisher.fdr$FPR,\n#          plink.bonf$FPR, plink.fdr$FPR, plink.gc.bonf$FPR, plink.gc.fdr$FPR)\n#\n#\n# ## WITH NAs...\n# df <- data.frame(test, specificity, FPR, sensitivity)\n# #filename <- paste(\"./\", set.n, \"theta_p_50_combined_df.Rdata\", sep=\"\")\n# # filename <- paste(\"./\", set.n, \"_combined_df.Rdata\", sep=\"\")\n# # save(df, file=filename)\n#\n# length(which(df$sensitivity[which(df$test == \"treeWAS\")] == 0))\n\n\n##########################################################################################################\n\n#####################################################\n\n##########################################################################################################\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#########################\n## below = OLD CODE!!! ##    ####    ####    ####    ####    ####    ####    ####    ####    ####    ####\n#########################\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n##########################################################################################################\n\n#####################################################\n\n##########################################################################################################\n\n\n## ACCURACY ##\n\n# ## DENSITY + HISTOGRAM\n# library(ggplot2)\n#\n# myCol <- funky(7)\n#\n# ## box plots:\n# # A basic box with the conditions colored\n# bp <- ggplot(df, aes(x=test, y=accuracy, fill=test)) + geom_boxplot()\n# bp + ggtitle(\"Accuracy\")+\n#   theme(axis.text.x = element_text(angle=0, hjust=0, vjust=1),\n#         plot.title = element_text(size = 20, face = \"bold\", colour = \"black\", vjust =1))\n#\n#\n# # The above adds a redundant legend. With the legend removed:\n# ggplot(dat, aes(x=cond, y=rating, fill=cond)) + geom_boxplot() +\n#   guides(fill=FALSE)\n\n##########################################################################################################\n\n\n#####################################################\n\n##########################################################################################################\n\n\n\n## FPR ##\n\n## DENSITY + HISTOGRAM??\n#\n# library(adegenet)\n# library(ggplot2)\n#\n# myCol <- funky(7)\n\n###########################\n## box plots: ## ## FPR #########################      #########################\n###########################\n\n# A basic box with the conditions colored\nbp <- ggplot(df, aes(x=test, y=FPR, fill=test)) + geom_boxplot()+scale_y_continuous(limits=c(0,1))\nbp + ggtitle(\"FPR\")+\n  theme(axis.text.x = element_text(angle=0, hjust=0, vjust=1),\n        plot.title = element_text(size = 20, face = \"bold\", colour = \"black\", vjust =1))\n\n\n# The above adds a redundant legend. With the legend removed:\nggplot(df, aes(x=test, y=FPR, fill=test, color=factor(test))) + geom_boxplot() + scale_y_continuous(limits=c(0,1)) +\n#   ggtitle(\"FPR\") +\n  guides(fill=FALSE)+\n  theme(axis.text.x = element_text(angle=0, hjust=0, vjust=1),\n        plot.title = element_text(size = 20, face = \"bold\", vjust =1),\n        legend.position=\"none\") # colour = \"black\",\n\n## set 1 FPR:\n## plink.fdr has one FPR dot at ~ 0.3\n## fisher.fdr, plink.fdr, and plink.gc.fdr all have one FPR dot at ~ 0.02 ... which one?\n\nwhich.max(df$FPR[which(df$test==\"fisher.fdr\")]) # 82\nwhich.max(df$FPR[which(df$test==\"plink.fdr\")]) # 69\nwhich(df$FPR[which(df$test==\"plink.fdr\")] == sort(df$FPR[which(df$test==\"plink.fdr\")], decreasing=TRUE)[2]) # 82\nwhich.max(df$FPR[which(df$test==\"plink.gc.fdr\")]) # 82\n\nargs82 <- get(load(\"./set1_82_args.Rdata\"))\nargs82\n\n\n###################\n## BEESWARM PLOT ##   #########################   #########################   #########################\n###################\n## uses BOTH df and beeswarm dataframes...\n\n# library(beeswarm)\n# library(plyr)\n\n#############\n## MY DATA ##\n#############\nbeeswarm <- beeswarm(FPR ~ test,\n                     data = df,\n                     #method=\"swarm\", # swarm square hex center\n                     #priority=\"descending\", ## ONLY for SWARM method...\n                     method=\"center\", # swarm square hex center\n                     #priority=\"descending\", ## ONLY for SWARM method...\n                     pwcol = test,\n                     #col = myCol, ## to set w funky colours (INSTEAD of pwcol = test)\n                     ylim = c(-0.001,1), # otherwise ggplot can't plot ZERO values --> NAs\n                     las=2,\n                     cex=0.8,\n                     corral = \"omit\") # none gutter wrap omit\nhead(beeswarm)\n\n######################################################\n## Find and Replace OUTLIERS(' symbols in plot...): ##\n######################################################\noutliers <- outlier.vals <- PCH <- list()\nnoms <- as.character(levels(beeswarm$col))\n\n## FOR LOOP ##\nfor(i in 1:length(noms)){\n  #i <- 1\n  # get vals for variable (and boxplot)\n  val <- beeswarm$y[which(beeswarm$col==noms[i])]\n  #boxplot(val, ylim=c(-0.001, 1))\n  PCH[[i]] <- rep(16, length(val)) # standard filled circle...\n\n  ## get median\n  M <- as.numeric(quantile(val, 0.5))\n  # get lower 25 of box\n  Q25 <- as.numeric(quantile(val, 0.25))\n  # get upper 75 of box\n  Q75 <- as.numeric(quantile(val, 0.75))\n  # get box length\n  box <- Q75-Q25\n\n  if(box == 0) box <- 0.0000001\n\n  # with a coef of 1.5 (the default for boxplots), identify outlying values\n  outliers[[i]] <- c(which(val < Q25-(1.5*box)), which(val > Q75+(1.5*box)))\n  # get values of outliers\n  if(length(outliers[[i]]) > 0){\n    outlier.vals[[i]] <- val[outliers[[i]]]\n    PCH[[i]] <- replace(PCH[[i]], outliers[[i]], 17) # replace with triangle...\n  }else{\n    outlier.vals[[i]] <- NULL\n  }\n} # end for loop\n\n#outliers\nPCH <- as.vector(unlist(PCH))\nPCH\n\n\n#########################################################################################################\n######################\n## plots, layers... ##\n######################\nbeeswarm.plot <- ggplot(beeswarm, aes(x, y)) +\n  xlab(\"\") +\n  guides(fill=FALSE) +\n  scale_y_continuous(expression(\"False Positive Rate (FPR)\"), limits=c(0,1))\n\nbeeswarm.plot2 <- beeswarm.plot +\n  guides(fill=FALSE) +\n  geom_boxplot(data=df, aes(x=test, y=FPR, fill=test), alpha=0.25,\n               outlier.shape = 17,\n               outlier.size=0,\n               #outlier.cex=2,\n               ylim=c(-0.001, 1)) +# , varwidth=FALSE, outlier.shape = 17\n  theme(axis.text.x = element_text(angle=45, hjust=0.9, vjust=0.85, size=18),\n        axis.text.y = element_text(size=13),\n        axis.title=element_text(size=18),\n        legend.position=\"none\")\n\nbeeswarm.plot3 <- beeswarm.plot2 +\n  geom_point(data=beeswarm, aes(colour = col), pch = PCH, size=5, na.rm=TRUE, alpha=0.6) +\n  #scale_colour_manual(values = myCol) +\n  guides(fill=FALSE) +\n  theme(axis.text.x = element_text(angle=45, hjust=0.9, vjust=0.85, size=18),\n        axis.text.y = element_text(size=13),\n        axis.title=element_text(size=18),\n        legend.position=\"none\")\n\nbeeswarm.plot4 <- beeswarm.plot3 +\n  guides(fill=FALSE) +\n  geom_boxplot(data=df, aes(x=test, y=FPR, fill=test), alpha=0.0, fatten=3,\n               outlier.shape = 17,\n               outlier.size=0,\n               #outlier.cex=2,\n               ylim=c(-0.001, 1)) +# , varwidth=FALSE, outlier.shape = 17\n  theme(axis.text.x = element_text(angle=45, hjust=0.9, vjust=0.85, size=18),\n        axis.text.y = element_text(size=13),\n        axis.title=element_text(size=18),\n        legend.position=\"none\")\n\nplot(beeswarm.plot4)\n## CAREFUL: CHECK that your outliers are really in (ALMOST) the right place by plotting beeswarm2 w oultier.cex=2, and not outlier.size=0!\n\n\n\n##########################################################################################################\n\n\n\n\n\n\n#####################################\n## box plots: ## ## SENSITIVITY    #########################      #########################\n#####################################\n\n# A basic box with the conditions colored\nbp <- ggplot(df, aes(x=test, y=sensitivity, fill=test)) + geom_boxplot()+scale_y_continuous(limits=c(0,1))\nbp + ggtitle(\"Sensitivity\")+\n  theme(axis.text.x = element_text(angle=0, hjust=0, vjust=1),\n        plot.title = element_text(size = 20, face = \"bold\", colour = \"black\", vjust =1))\n\n\n# The above adds a redundant legend. With the legend removed:\nggplot(df, aes(x=test, y=sensitivity, fill=test)) + geom_boxplot() + scale_y_continuous(limits=c(0,1)) +\n  #   ggtitle(\"Sensitivity\") +\n  guides(fill=FALSE)+\n  theme(axis.text.x = element_text(angle=0, hjust=0, vjust=1),\n        plot.title = element_text(size = 20, face = \"bold\", colour = \"black\", vjust =1))\n\n# which.min(df$sensitivity[which(df$test == \"treeWAS\")]) # 13\n# length(which(df$sensitivity[which(df$test == \"treeWAS\")] == 0)) # 19\n# which(df$sensitivity[which(df$test == \"treeWAS\")] == 0)\n## 13 18 23 24 28 32 33 38 40 43 44 56 60 76 79 87 91 93 94\n\n\n###################\n## BEESWARM PLOT ##   #########################   #########################   #########################\n###################\n## uses BOTH df and beeswarm dataframes...\n\n# library(beeswarm)\n# library(plyr)\n\n#############\n## MY DATA ##\n#############\nbeeswarm <- beeswarm(sensitivity ~ test,\n                     data = df,\n                     #method=\"swarm\", # swarm square hex center\n                     #priority=\"descending\", ## ONLY for SWARM method...\n                     method=\"center\", # swarm square hex center\n                     #priority=\"descending\", ## ONLY for SWARM method...\n                     pwcol = test,\n                     #col = myCol, ## to set w funky colours (INSTEAD of pwcol = test)\n                     ylim = c(-0.001, 1), # otherwise ggplot can't plot ZERO values --> NAs\n                     las=2,\n                     cex=0.8,\n                     corral = \"omit\") # none gutter wrap omit\nhead(beeswarm)\n\n######################################################\n## Find and Replace OUTLIERS(' symbols in plot...): ##\n######################################################\noutliers <- outlier.vals <- PCH <- list()\nnoms <- as.character(levels(beeswarm$col))\n\n## FOR LOOP ##\nfor(i in 1:length(noms)){\n  #i <- 1\n  # get vals for variable (and boxplot)\n  val <- beeswarm$y[which(beeswarm$col==noms[i])]\n  #boxplot(val, ylim=c(-0.001, 1))\n  PCH[[i]] <- rep(16, length(val)) # standard filled circle...\n\n  ## get median\n  M <- as.numeric(quantile(val, 0.5))\n  # get lower 25 of box\n  Q25 <- as.numeric(quantile(val, 0.25))\n  # get upper 75 of box\n  Q75 <- as.numeric(quantile(val, 0.75))\n  # get box length\n  box <- Q75-Q25\n\n  if(box == 0) box <- 0.0000001\n\n  # with a coef of 1.5 (the default for boxplots), identify outlying values\n  outliers[[i]] <- c(which(val < Q25-(1.5*box)), which(val > Q75+(1.5*box)))\n  # get values of outliers\n  if(length(outliers[[i]]) > 0){\n    outlier.vals[[i]] <- val[outliers[[i]]]\n    PCH[[i]] <- replace(PCH[[i]], outliers[[i]], 17) # replace with triangle...\n  }else{\n    outlier.vals[[i]] <- NULL\n  }\n} # end for loop\n\n#outliers\nPCH <- as.vector(unlist(PCH))\nPCH\n#PCH <- replace(PCH, which(PCH==1), 16)\n\n######################\n## plots, layers... ##\n######################\nbeeswarm.plot <- ggplot(beeswarm, aes(x, y)) +\n  xlab(\"\") +\n  guides(fill=FALSE) +\n  scale_y_continuous(expression(\"Sensitivity\"), limits=c(0,1.001))\n\nbeeswarm.plot2 <- beeswarm.plot +\n  guides(fill=FALSE) +\n  geom_boxplot(data=df, aes(x=test, y=sensitivity, fill=test), alpha=0.25,\n               outlier.shape = 17,\n               outlier.size=0,\n               #outlier.cex=2,\n               ylim=c(-0.001, 1)) +# , varwidth=FALSE, outlier.shape = 17\n  theme(axis.text.x = element_text(angle=45, hjust=0.9, vjust=0.85, size=18),\n        axis.text.y = element_text(size=13),\n        axis.title=element_text(size=18),\n        legend.position=\"none\")\n\nbeeswarm.plot3 <- beeswarm.plot2 +\n  geom_point(data=beeswarm, aes(colour = col), pch = PCH, size=5, na.rm=TRUE, alpha=0.6) +\n  #scale_colour_manual(values = myCol) +\n  guides(fill=FALSE) +\n  theme(axis.text.x = element_text(angle=45, hjust=0.9, vjust=0.85, size=18),\n        axis.text.y = element_text(size=13),\n        axis.title=element_text(size=18),\n        legend.position=\"none\")\n\nbeeswarm.plot4 <- beeswarm.plot3 +\n  guides(fill=FALSE) +\n  geom_boxplot(data=df, aes(x=test, y=sensitivity, fill=test), alpha=0.0, fatten=3,\n               outlier.shape = 17,\n               outlier.size=0,\n               #outlier.cex=2,\n               ylim=c(-0.001, 1)) +# , varwidth=FALSE, outlier.shape = 17\n  theme(axis.text.x = element_text(angle=45, hjust=0.9, vjust=0.85, size=18),\n        axis.text.y = element_text(size=13),\n        axis.title=element_text(size=18),\n        legend.position=\"none\")\n\nplot(beeswarm.plot4)\n\n\n##########################################################################################################\n# beeswarm.plot <- ggplot(beeswarm, aes(x, y)) +\n#   xlab(\"\") +\n#   guides(fill=FALSE) +\n#   scale_y_continuous(expression(\"Sensitivity\"), limits=c(-0.001,1))\n# # +\n# #   scale_x_continuous(labels=as.character(unique(beeswarm$x.orig)),\n# #                      breaks=(c(1:length(unique(beeswarm$x.orig)))))\n#\n#\n# beeswarm.plot2 <- beeswarm.plot +\n#   guides(fill=FALSE) +\n#   geom_boxplot(data=df, aes(x=test, y=sensitivity, fill=test), alpha=0.25,\n#                outlier.shape = 17,\n#                outlier.size=0,\n#                #outlier.cex=2,\n#                ylim=c(-0.001, 1)) +# , varwidth=FALSE, outlier.shape = 17\n#   theme(axis.text.x = element_text(angle=45, hjust=0.9, vjust=0.85, size=13),\n#         axis.text.y = element_text(size=11),\n#         axis.title=element_text(size=14),\n#         legend.position=\"none\")\n# #ylim = c(-0.001,1)\n#\n# beeswarm.plot3 <- beeswarm.plot2 +\n#   geom_point(data=beeswarm, aes(colour = col), pch = PCH, cex=5, alpha=0.7, na.rm=TRUE) +\n#   #scale_colour_manual(values = myCol) +\n#   guides(fill=FALSE) +\n#   theme(axis.text.x = element_text(angle=45, hjust=0.9, vjust=0.85, size=18),\n#         axis.text.y = element_text(size=13),\n#         axis.title=element_text(size=18),\n#         legend.position=\"none\")\n#\n# plot(beeswarm.plot3)\n# ## CAREFUL: CHECK that your outliers are really in (ALMOST) the right place by plotting beeswarm2 w oultier.cex=2, and not outlier.size=0!\n#\n\n\n##########################################################################################################\n\n#\n#\n# ######################\n# ## plots, layers... ##\n# ######################\n# beeswarm.plot <- ggplot(beeswarm, aes(x, y)) +\n#   xlab(\"\") +\n#   guides(fill=FALSE) +\n#   scale_y_continuous(expression(\"False Positive Rate (FPR)\"), limits=c(0,1)) +\n#   scale_x_continuous(labels=as.character(unique(beeswarm$x.orig)),\n#                      breaks=(c(1:7)))\n#\n#\n# beeswarm.plot2 <- beeswarm.plot +\n#   guides(fill=FALSE) +\n#   geom_boxplot(aes(x, y, group = round_any(x, 1, round))) # , varwidth=FALSE, outlier.shape = 17\n#\n# beeswarm.plot3 <- beeswarm.plot2 +\n#   geom_point(aes(colour = col, cex = 2), pch = PCH, na.rm=TRUE) +\n#   #scale_colour_manual(values = myCol) +\n#   guides(fill=FALSE) +\n#   theme(axis.text.x = element_text(angle=45, hjust=0, vjust=0, size=12), legend.position=\"none\",\n#         plot.title = element_text(size = 20, face = \"bold\", colour = \"black\", vjust =1))\n# #   theme(axis.text.x = element_text(angle=90, hjust=0, vjust=1, size=12), legend.position=\"none\",\n# #       plot.title = element_text(size = 20, face = \"bold\", colour = \"black\", vjust =1))\n#\n# plot(beeswarm.plot3)\n# #######################################################\n# bp <- ggplot(df, aes(x=test, y=FPR)) + # , fill=test\n#   geom_boxplot() + scale_y_continuous(limits=c(0,1)) +\n#   #   ggtitle(\"False Positive Rate (FPR)\") +\n#   guides(fill=FALSE)+\n#   theme(axis.text.x = element_text(angle=45, hjust=0, vjust=0, size=12), legend.position=\"none\",\n#         plot.title = element_text(size = 20, face = \"bold\", colour = \"black\", vjust =1))\n#\n# plot(bp)\n# points(beeswarm$x, beeswarm$y, type=\"p\", pch=PCH, add=TRUE)\n#\n# #####################################################\n# # The above adds a redundant legend. With the legend removed:\n# p1 <- ggplot(df, aes(x=test, y=FPR, fill=test)) + geom_boxplot() + scale_y_continuous(limits=c(0,1)) +\n#         #   ggtitle(\"False Positive Rate (FPR)\") +\n#         guides(fill=FALSE)+\n#         theme(axis.text.x = element_text(angle=0, hjust=0, vjust=1),\n#         plot.title = element_text(size = 20, face = \"bold\", colour = \"black\", vjust =1))\n#\n# plot(p1)\n# str(p1)\n\n##########################################################################################################\n## RESET YOUR OPTIONS AS:\n#options(warn=warn.ori, error=error.ori)\n\n# ##############\n# beeswarm.plot3 <- beeswarm.plot2 + geom_point(aes(colour = col)) +\n#   scale_colour_manual(values = c(\"black\", \"red\")) +\n#   scale_x_continuous(breaks = c(1:2),\n#                      labels = c(\"Censored\", \"Metastasis\"), expand = c(0, 0.5))\n# plot(beeswarm.plot3)\n#####################################################\n#####################################################\n## plots, layers...\nbeeswarm.plot <- ggplot(beeswarm, aes(x, y)) +\n  xlab(\"\") +\n  guides(fill=FALSE) +\n  scale_y_continuous(expression(\"False Positive Rate (FPR)\"), limits=c(0,1)) +\n  scale_x_discrete(#breaks= seq(0, 1, length.out=9)[2:8],  limits=c(0,1), #c(1:7),\n    labels = as.character(unique(beeswarm$col)), las=2) #, expand=c(0,0.5))\n\nbeeswarm.plot2 <- beeswarm.plot +\n  guides(fill=FALSE) +\n  geom_boxplot(aes(x, y, group = round_any(x, 1, round)), outlier.shape = NA) #  #??\n\nbeeswarm.plot3 <- beeswarm.plot2 +\n  geom_point(aes(colour = col, cex=2)) +\n  #scale_colour_manual(values = myCol) +\n  guides(fill=FALSE) +\n  theme(axis.text.x = element_text(angle=90, hjust=0, vjust=1),\n        plot.title = element_text(size = 20, face = \"bold\", colour = \"black\", vjust =1),\n        legend.position=\"none\")\n\nplot(beeswarm.plot3)\n\n#####################################################\n\n##########################################################################################################\n\n\n\n## SPECIFICITY ##\n\n## DENSITY + HISTOGRAM\nlibrary(ggplot2)\n\nmyCol <- funky(7)\n\n## box plots:\n# A basic box with the conditions colored\nbp <- ggplot(df, aes(x=test, y=specificity, fill=test)) + geom_boxplot()\nbp + ggtitle(\"Specificity\")+\n  theme(axis.text.x = element_text(angle=0, hjust=0, vjust=1),\n  plot.title = element_text(size = 20, face = \"bold\", colour = \"black\", vjust =1))\n\n\n# The above adds a redundant legend. With the legend removed:\nggplot(df, aes(x=test, y=specificity, fill=test)) + geom_boxplot() +\n  ggtitle(\"Specificity\") +\n  guides(fill=FALSE)+\n  theme(axis.text.x = element_text(angle=0, hjust=0, vjust=1),\n        plot.title = element_text(size = 20, face = \"bold\", colour = \"black\", vjust =1))\n\n###########################\n## OR with individual data frames (NAs removed --> diff nrow per test problem... )\nbp <- ggplot(df.specificity, aes(x=test, y=dat.specificity, fill=test)) + geom_boxplot()\nbp + ggtitle(\"Specificity\")+\n  theme(axis.text.x = element_text(angle=0, hjust=0, vjust=1),\n        plot.title = element_text(size = 20, face = \"bold\", colour = \"black\", vjust =1))\n\n\n##########################################################################################################\n\n#####################################################\n\n##########################################################################################################\n\n\n\n## FPR ##\n\n## DENSITY + HISTOGRAM\nlibrary(ggplot2)\nlibrary(adegenet)\n\nmyCol <- funky(7)\n\n## box plots:\n# A basic box with the conditions colored\nbp <- ggplot(df, aes(x=test, y=FPR, fill=test)) + geom_boxplot()\nbp + ggtitle(\"False Positive Rate (FPR)\")+\n  theme(axis.text.x = element_text(angle=0, hjust=0, vjust=1),\n        plot.title = element_text(size = 20, face = \"bold\", colour = \"black\", vjust =1))\n\n\n# The above adds a redundant legend. With the legend removed:\nggplot(df, aes(x=test, y=FPR, fill=test)) + geom_boxplot() +  scale_y_continuous(limits=c(0,1)) +\n#   ggtitle(\"False Positive Rate (FPR)\") +\n  guides(fill=FALSE)+\n  theme(axis.text.x = element_text(angle=0, hjust=0, vjust=1),\n        plot.title = element_text(size = 20, face = \"bold\", colour = \"black\", vjust =1))\n\n\n## all together now:\n\n## can't get all 3 on same plot...\n#ggplot(df, aes(x=FPR, fill=test)) + geom_density(alpha=0.3)\n## works for fishers only:\n#ggplot(df[length(treeWAS$FPR):nrow(df),], aes(x=FPR, fill=test)) + geom_density(alpha=0.3)\n\n\n##########################################################################################################\n\n#####################################################\n\n##########################################################################################################\n#' @\n\n\n\n\n\n\n\n\n\n\n\n# <<echo=FALSE>>=\n\n  ###############\n#### SET 2 ####\n###############\n\n#######################################################################################################################\n\n#################\n## theta_p = 5 ##\n#################\n\nfoo <- dir(\"C:/Cait 2012/Work/Xavier/Sims/set2/theta_p = 25\")\nfoo\n## get all performance Rdata names\ntoKeep <- grep(\"performance\", foo) ##??\nfoo <- foo[toKeep]\n\n## load performance data\ndat <- list()\nsetwd(\"C:/Cait 2012/Work/Xavier/Sims/set2/theta_p = 25\")\nfor(i in 1:length(foo)){\n  dat[[i]] <- get(load(paste(\"./\", foo[i], sep=\"\")))\n}\n\ntreeWAS <- list()\nfor(i in 1:length(dat)){\n  treeWAS[[i]] <- dat[[i]][[1]]\n}\n\nfisher.bonf <- list()\nfor(i in 1:length(dat)){\n  fisher.bonf[[i]] <- dat[[i]][[2]]\n}\n\nfisher.fdr <- list()\nfor(i in 1:length(dat)){\n  fisher.fdr[[i]] <- dat[[i]][[3]]\n}\n\n## combine\ntreeWAS <- do.call(\"rbind\", treeWAS)\nfisher.bonf <- do.call(\"rbind\", fisher.bonf)\nfisher.fdr <- do.call(\"rbind\", fisher.fdr)\n\n## save\nsave(treeWAS, file=\"./set2_theta_p_25_treeWAS_performance.Rdata\")\nsave(fisher.bonf, file=\"./set2_theta_p_25_fisher.bonf_performance.Rdata\")\nsave(fisher.fdr, file=\"./set2_theta_p_25_fisher.fdr_performance.Rdata\")\n\n## summarise\nsummary(treeWAS)\nsummary(fisher.bonf)\nsummary(fisher.fdr)\n\n##########\n## plot ##\n##########\n\n## GET DATA\ndat.ori <- dat\ntest <- c(rep(\"treeWAS\", length(treeWAS$accuracy)),\n          rep(\"fisher.bonf\", length(fisher.bonf$accuracy)),\n          rep(\"fisher.fdr\", length(fisher.fdr$accuracy)))\naccuracy <- c(treeWAS$accuracy, fisher.bonf$accuracy, fisher.fdr$accuracy)\nspecificity <- c(treeWAS$specificity, fisher.bonf$specificity, fisher.fdr$specificity)\nFPR <- c(treeWAS$FPR, fisher.bonf$FPR, fisher.fdr$FPR)\n\ndf <- data.frame(test, accuracy, specificity, FPR)\nsave(df, file=\"./set2_theta_p_25_combined_df.Rdata\")\n\n\n\n##########################################################################################################\n\n#####################################################\n\n##########################################################################################################\n\n\n## ACCURACY ##\n\n## DENSITY + HISTOGRAM\nlibrary(ggplot2)\n\nmyCol <- funky(5)\n\n# Histogram overlaid with kernel density curve\np <- ggplot(df[which(test==\"treeWAS\"),], aes(x=accuracy)) +\n  geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis\n                 binwidth=.00015,\n                 colour=\"black\", fill=\"white\", xlim=c(0.9995, 1.001)) +\n  geom_density(alpha=.5, fill=myCol[1], xlim=c(0.9995, 1.001))  # Overlay with transparent density plot\n\np + ggtitle(expression(atop(\"Accuracy: treeWAS\", atop(italic(\"(theta_p = 25)\"), \"\")))) +\n  theme(axis.text.x = element_text(angle=0, hjust=0, vjust=1),\n        #plot.margin = unit(c(1.5, 1, 1, 1), \"cm\"),\n        plot.title = element_text(size = 20, face = \"bold\", colour = \"black\", vjust = -1))\n\n\n# Histogram overlaid with kernel density curve\np2 <- ggplot(df[which(test==\"fisher.bonf\"),], aes(x=accuracy)) +\n  geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis\n                 binwidth=.05,\n                 colour=\"black\", fill=\"white\") +\n  geom_density(alpha=.5, fill=myCol[3])  # Overlay with transparent density plot\n\np2 + ggtitle(expression(atop(\"Accuracy: Fisher's Exact Test with Bonferonni Correction\"), atop(italic(\"(theta_p = 5)\"), \"\"))) +\n  theme(axis.text.x = element_text(angle=0, hjust=0, vjust=1),\n        #plot.margin = unit(c(1.5, 1, 1, 1), \"cm\"),\n        plot.title = element_text(size = 20, face = \"bold\", colour = \"black\", vjust = -1))\n\n\np3 <- ggplot(df[which(test==\"fisher.fdr\"),], aes(x=accuracy)) +\n  geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis\n                 binwidth=.05,\n                 colour=\"black\", fill=\"white\") +\n  geom_density(alpha=.5, fill=myCol[2])  # Overlay with transparent density plot\n\np3 + ggtitle(expression(atop(\"Accuracy: Fisher's Exact Test with FDR Correction\"), atop(italic(\"(theta_p = 5)\"), \"\"))) +\n  theme(axis.text.x = element_text(angle=0, hjust=0, vjust=1),\n        #plot.margin = unit(c(1.5, 1, 1, 1), \"cm\"),\n        plot.title = element_text(size = 20, face = \"bold\", colour = \"black\", vjust = -1))\n\n\n## box plots:\n# A basic box with the conditions colored\nbp <- ggplot(df, aes(x=test, y=accuracy, fill=test)) + geom_boxplot()\nbp + ggtitle(\"Accuracy\")+\n  theme(axis.text.x = element_text(angle=0, hjust=0, vjust=1),\n        plot.title = element_text(size = 20, face = \"bold\", colour = \"black\", vjust =1))\n\n\n# The above adds a redundant legend. With the legend removed:\nggplot(dat, aes(x=cond, y=rating, fill=cond)) + geom_boxplot() +\n  guides(fill=FALSE)\n\n\n## all together now:\n\n## can't get all 3 on same plot...\n#ggplot(df, aes(x=accuracy, fill=test)) + geom_density(alpha=0.3)\n## works for fishers only:\n#ggplot(df[length(treeWAS$accuracy):nrow(df),], aes(x=accuracy, fill=test)) + geom_density(alpha=0.3)\n\n\n##########################################################################################################\n\n#####################################################\n\n##########################################################################################################\n\n\n\n# ## SPECIFICITY ##\n#\n# ## DENSITY + HISTOGRAM\n# library(ggplot2)\n#\n# myCol <- funky(5)\n#\n# # Histogram overlaid with kernel density curve\n# p <- ggplot(df[which(test==\"treeWAS\"),], aes(x=accuracy)) +\n#     geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis\n#                    binwidth=.00015,\n#                    colour=\"black\", fill=\"white\", xlim=c(0.9995, 1.001)) +\n#     geom_density(alpha=.5, fill=myCol[1], xlim=c(0.9995, 1.001))  # Overlay with transparent density plot\n#\n# p + ggtitle(expression(atop(\"Accuracy: treeWAS\", atop(italic(\"(theta_p = 5)\"), \"\")))) +\n#    theme(axis.text.x = element_text(angle=0, hjust=0, vjust=1),\n#    #plot.margin = unit(c(1.5, 1, 1, 1), \"cm\"),\n#    plot.title = element_text(size = 20, face = \"bold\", colour = \"black\", vjust = -1))\n#\n#\n# # Histogram overlaid with kernel density curve\n# p2 <- ggplot(df[which(test==\"fisher.bonf\"),], aes(x=accuracy)) +\n#     geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis\n#                    binwidth=.05,\n#                    colour=\"black\", fill=\"white\") +\n#     geom_density(alpha=.5, fill=myCol[3])  # Overlay with transparent density plot\n#\n# p2 + ggtitle(expression(atop(\"Accuracy: Fisher's Exact Test with Bonferonni Correction\"), atop(italic(\"(theta_p = 5)\"), \"\"))) +\n#    theme(axis.text.x = element_text(angle=0, hjust=0, vjust=1),\n#    #plot.margin = unit(c(1.5, 1, 1, 1), \"cm\"),\n#    plot.title = element_text(size = 20, face = \"bold\", colour = \"black\", vjust = -1))\n#\n#\n# p3 <- ggplot(df[which(test==\"fisher.fdr\"),], aes(x=accuracy)) +\n#     geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis\n#                    binwidth=.05,\n#                    colour=\"black\", fill=\"white\") +\n#     geom_density(alpha=.5, fill=myCol[2])  # Overlay with transparent density plot\n#\n# p3 + ggtitle(expression(atop(\"Accuracy: Fisher's Exact Test with FDR Correction\"), atop(italic(\"(theta_p = 5)\"), \"\"))) +\n#    theme(axis.text.x = element_text(angle=0, hjust=0, vjust=1),\n#    #plot.margin = unit(c(1.5, 1, 1, 1), \"cm\"),\n#    plot.title = element_text(size = 20, face = \"bold\", colour = \"black\", vjust = -1))\n#\n#\n# ## box plots:\n# # A basic box with the conditions colored\n# bp <- ggplot(df, aes(x=test, y=accuracy, fill=test)) + geom_boxplot()\n# bp + ggtitle(\"Accuracy\")+\n#   theme(axis.text.x = element_text(angle=0, hjust=0, vjust=1),\n#   plot.title = element_text(size = 20, face = \"bold\", colour = \"black\", vjust =1))\n#\n#\n# # The above adds a redundant legend. With the legend removed:\n# ggplot(dat, aes(x=cond, y=rating, fill=cond)) + geom_boxplot() +\n#     guides(fill=FALSE)\n#\n#\n# ## all together now:\n#\n# ## can't get all 3 on same plot...\n# #ggplot(df, aes(x=accuracy, fill=test)) + geom_density(alpha=0.3)\n# ## works for fishers only:\n# #ggplot(df[length(treeWAS$accuracy):nrow(df),], aes(x=accuracy, fill=test)) + geom_density(alpha=0.3)\n\n\n##########################################################################################################\n\n#####################################################\n\n##########################################################################################################\n\n\n\n## FPR ##\n\n## DENSITY + HISTOGRAM\nlibrary(ggplot2)\n\nmyCol <- funky(5)\n\n# Histogram overlaid with kernel density curve\np <- ggplot(df[which(test==\"treeWAS\"),], aes(x=FPR)) +\n  geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis\n                 binwidth=.00015,\n                 colour=\"black\", fill=\"white\", xlim=c(0.9995, 1.001)) +\n  geom_density(alpha=.5, fill=myCol[1], xlim=c(0.9995, 1.001))  # Overlay with transparent density plot\n\np + ggtitle(expression(atop(\"FPR: treeWAS\", atop(italic(\"(theta_p = 25)\"), \"\")))) +\n  theme(axis.text.x = element_text(angle=0, hjust=0, vjust=1),\n        #plot.margin = unit(c(1.5, 1, 1, 1), \"cm\"),\n        plot.title = element_text(size = 20, face = \"bold\", colour = \"black\", vjust = -1))\n\n\n# Histogram overlaid with kernel density curve\np2 <- ggplot(df[which(test==\"fisher.bonf\"),], aes(x=FPR)) +\n  geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis\n                 binwidth=.05,\n                 colour=\"black\", fill=\"white\") +\n  geom_density(alpha=.5, fill=myCol[3])  # Overlay with transparent density plot\n\np2 + ggtitle(expression(atop(\"FPR: Fisher's Exact Test with Bonferonni Correction\"), atop(italic(\"(theta_p = 5)\"), \"\"))) +\n  theme(axis.text.x = element_text(angle=0, hjust=0, vjust=1),\n        #plot.margin = unit(c(1.5, 1, 1, 1), \"cm\"),\n        plot.title = element_text(size = 20, face = \"bold\", colour = \"black\", vjust = -1))\n\n\np3 <- ggplot(df[which(test==\"fisher.fdr\"),], aes(x=FPR)) +\n  geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis\n                 binwidth=.05,\n                 colour=\"black\", fill=\"white\") +\n  geom_density(alpha=.5, fill=myCol[2])  # Overlay with transparent density plot\n\np3 + ggtitle(expression(atop(\"FPR: Fisher's Exact Test with FDR Correction\"), atop(italic(\"(theta_p = 5)\"), \"\"))) +\n  theme(axis.text.x = element_text(angle=0, hjust=0, vjust=1),\n        #plot.margin = unit(c(1.5, 1, 1, 1), \"cm\"),\n        plot.title = element_text(size = 20, face = \"bold\", colour = \"black\", vjust = -1))\n\n\n## box plots:\n# A basic box with the conditions colored\nbp <- ggplot(df, aes(x=test, y=FPR, fill=test)) + geom_boxplot()\nbp + ggtitle(\"False Positive Rate (FPR)\")+\n  theme(axis.text.x = element_text(angle=0, hjust=0, vjust=1),\n        plot.title = element_text(size = 20, face = \"bold\", colour = \"black\", vjust =1))\n\n\n# The above adds a redundant legend. With the legend removed:\nggplot(dat, aes(x=cond, y=rating, fill=cond)) + geom_boxplot() +\n  guides(fill=FALSE)\n\n\n## all together now:\n\n## can't get all 3 on same plot...\n#ggplot(df, aes(x=FPR, fill=test)) + geom_density(alpha=0.3)\n## works for fishers only:\n#ggplot(df[length(treeWAS$FPR):nrow(df),], aes(x=FPR, fill=test)) + geom_density(alpha=0.3)\n\n\n##########################################################################################################\n\n#####################################################\n\n##########################################################################################################\n\n## histogram\nhist(treeWAS$accuracy, xlab=\"Accuracy\", main=\"ACCURACY\\n(treeWAS)\", sub=\"theta_p = 5\", col.sub=\"red\", font.sub=2)\nhist(treeWAS$accuracy, xlim=c(0,1), xlab=\"Accuracy\", main=\"ACCURACY\\n(treeWAS)\", sub=\"theta_p = 5\", col.sub=\"red\", font.sub=2)\nhist(fisher.bonf$accuracy, xlim=c(0,1), xlab=\"Accuracy\",\n     main=\"ACCURACY\\n(Fisher's Exact Test w/ Bonferonni Correction)\", sub=\"theta_p = 5\", col.sub=\"red\", font.sub=2)\nhist(fisher.fdr$accuracy, xlim=c(0,1), xlab=\"Accuracy\",\n     main=\"ACCURACY\\n(Fisher's Exact Test w/ FDR Correction)\", sub=\"theta_p = 5\", col.sub=\"red\", font.sub=2)\n\n## density dist\nplot(density(treeWAS$accuracy), xlab=\"Accuracy\", main=\"ACCURACY\\n(treeWAS)\", sub=\"theta_p = 5\", col.sub=\"red\", font.sub=2)\nplot(density(fisher.bonf$accuracy), xlab=\"Accuracy\",\n     main=\"ACCURACY\\n(Fisher's Exact Test w/ Bonferonni Correction)\", sub=\"theta_p = 5\", col.sub=\"red\", font.sub=2)\nplot(density(fisher.fdr$accuracy), xlab=\"Accuracy\",\n     main=\"ACCURACY\\n(Fisher's Exact Test w/ FDR Correction)\", sub=\"theta_p = 5\", col.sub=\"red\", font.sub=2)\n\n\n# ## DENSITY + HISTOGRAM\n# myCol <- funky(5)\n#\n# hist(treeWAS$accuracy, xlab=\"Accuracy\",\n#      col=transp(myCol[1], 0.05),\n#      main=\"ACCURACY\\n(treeWAS)\", sub=\"theta_p = 5\", col.sub=\"red\", font.sub=2)\n# polygon(density(treeWAS$accuracy), col=transp(myCol[1], .3), border=myCol[1])\n#\n# hist(fisher.bonf$accuracy, xlim=c(0,1), xlab=\"Accuracy\",\n#      col=transp(myCol[2], 0.05),\n#      main=\"ACCURACY\\n(Fisher's Exact Test w/ Bonferonni Correction)\", sub=\"theta_p = 5\", col.sub=\"red\", font.sub=2)\n# polygon(density(fisher.bonf$accuracy), col=transp(myCol[2], .3), border=myCol[2])\n#\n# hist(fisher.fdr$accuracy, xlim=c(0,1), xlab=\"Accuracy\",\n#      main=\"ACCURACY\\n(Fisher's Exact Test w/ FDR Correction)\", sub=\"theta_p = 5\", col.sub=myCol[3], font.sub=2)\n#\n# plot(density(fisher.fdr$accuracy), xlab=\"Accuracy\",\n#      main=\"ACCURACY\\n(Fisher's Exact Test w/ FDR Correction)\", sub=\"theta_p = 5\", col.sub=\"red\", font.sub=2)\n\n\n## SPECIFICITY ##\n\n## histogram\nhist(treeWAS$specificity, xlab=\"specificity\", main=\"SPECIFICITY\\n(treeWAS)\", sub=\"theta_p = 5\", col.sub=\"red\", font.sub=2)\nhist(treeWAS$specificity, xlim=c(0,1), xlab=\"specificity\", main=\"SPECIFICITY\\n(treeWAS)\", sub=\"theta_p = 5\", col.sub=\"red\", font.sub=2)\nhist(fisher.bonf$specificity, xlim=c(0,1), xlab=\"specificity\",\n     main=\"SPECIFICITY\\n(Fisher's Exact Test w/ Bonferonni Correction)\", sub=\"theta_p = 5\", col.sub=\"red\", font.sub=2)\nhist(fisher.fdr$specificity, xlim=c(0,1), xlab=\"specificity\",\n     main=\"SPECIFICITY\\n(Fisher's Exact Test w/ FDR Correction)\", sub=\"theta_p = 5\", col.sub=\"red\", font.sub=2)\n\n## density dist\nplot(density(treeWAS$specificity), xlab=\"specificity\", main=\"SPECIFICITY\\n(treeWAS)\", sub=\"theta_p = 5\", col.sub=\"red\", font.sub=2)\nplot(density(fisher.bonf$specificity), xlab=\"specificity\",\n     main=\"SPECIFICITY\\n(Fisher's Exact Test w/ Bonferonni Correction)\", sub=\"theta_p = 5\", col.sub=\"red\", font.sub=2)\nplot(density(fisher.fdr$specificity), xlab=\"specificity\",\n     main=\"SPECIFICITY\\n(Fisher's Exact Test w/ FDR Correction)\", sub=\"theta_p = 5\", col.sub=\"red\", font.sub=2)\n\n\n## FPR ##\n\n## histogram\nhist(treeWAS$FPR, xlab=\"FPR\", main=\"FALSE POSITIVE RATE\\n(treeWAS)\", sub=\"theta_p = 5\", col.sub=\"red\", font.sub=2)\nhist(treeWAS$FPR, xlim=c(0,1), xlab=\"FPR\", main=\"FALSE POSITIVE RATE\\n(treeWAS)\", sub=\"theta_p = 5\", col.sub=\"red\", font.sub=2)\nhist(fisher.bonf$FPR, xlim=c(0,1), xlab=\"FPR\",\n     main=\"FALSE POSITIVE RATE\\n(Fisher's Exact Test w/ Bonferonni Correction)\", sub=\"theta_p = 5\", col.sub=\"red\", font.sub=2)\nhist(fisher.fdr$FPR, xlim=c(0,1), xlab=\"FPR\",\n     main=\"FALSE POSITIVE RATE\\n(Fisher's Exact Test w/ FDR Correction)\", sub=\"theta_p = 5\", col.sub=\"red\", font.sub=2)\n\n## density dist\nplot(density(treeWAS$FPR), xlab=\"FPR\", main=\"FALSE POSITIVE RATE\\n(treeWAS)\", sub=\"theta_p = 5\", col.sub=\"red\", font.sub=2)\nplot(density(fisher.bonf$FPR), xlab=\"FPR\",\n     main=\"FALSE POSITIVE RATE\\n(Fisher's Exact Test w/ Bonferonni Correction)\", sub=\"theta_p = 5\", col.sub=\"red\", font.sub=2)\nplot(density(fisher.fdr$FPR), xlab=\"FPR\",\n     main=\"FALSE POSITIVE RATE\\n(Fisher's Exact Test w/ FDR Correction)\", sub=\"theta_p = 5\", col.sub=\"red\", font.sub=2)\n\n\n\n\n\n\n\n#######################################################################################################################\n\n#################\n## theta_p = 25 ##\n#################\n\nfoo <- dir(\"C:/Cait 2012/Work/Xavier/Sims/set2/theta_p = 25\")\nfoo\n## get all performance Rdata names\ntoKeep <- grep(\"performance\", foo) ##??\nfoo <- foo[toKeep]\n\n## load performance data\ndat <- list()\nsetwd(\"C:/Cait 2012/Work/Xavier/Sims/set2/theta_p = 25\")\nfor(i in 1:length(foo)){\n  dat[[i]] <- get(load(paste(\"./\", foo[i], sep=\"\")))\n}\n\ntreeWAS <- list()\nfor(i in 1:length(dat)){\n  treeWAS[[i]] <- dat[[i]][[1]]\n}\n\nfisher.bonf <- list()\nfor(i in 1:length(dat)){\n  fisher.bonf[[i]] <- dat[[i]][[2]]\n}\n\nfisher.fdr <- list()\nfor(i in 1:length(dat)){\n  fisher.fdr[[i]] <- dat[[i]][[3]]\n}\n\n## combine\ntreeWAS <- do.call(\"rbind\", treeWAS)\nfisher.bonf <- do.call(\"rbind\", fisher.bonf)\nfisher.fdr <- do.call(\"rbind\", fisher.fdr)\n\n## save\nsave(treeWAS, file=\"./set2_theta_p_25_treeWAS_performance.Rdata\")\nsave(fisher.bonf, file=\"./set2_theta_p_25_fisher.bonf_performance.Rdata\")\nsave(fisher.fdr, file=\"./set2_theta_p_25_fisher.fdr_performance.Rdata\")\n\n## summarise\nsummary(treeWAS)\nsummary(fisher.bonf)\nsummary(fisher.fdr)\n\n##########\n## plot ##\n##########\n\n## ACCURACY ##\n\n## histogram\nhist(treeWAS$accuracy)\nhist(treeWAS$accuracy, xlim=c(0,1))\nhist(fisher.bonf$accuracy, xlim=c(0,1))\nhist(fisher.fdr$accuracy, xlim=c(0,1))\n\n## density dist\nplot(density(treeWAS$accuracy), main=\"ACCURACY\\n(treeWAS)\")\nplot(density(fisher.bonf$accuracy), main=\"ACCURACY\\n(Fisher's Exact Test w/ Bonferonni Correction)\")\nplot(density(fisher.fdr$accuracy), main=\"ACCURACY\\n(Fisher's Exact Test w/ FDR Correction)\")\n\n\n## SPECIFICITY ##\n\n## histogram\nhist(treeWAS$specificity)\nhist(treeWAS$specificity, xlim=c(0,1))\nhist(fisher.bonf$specificity, xlim=c(0,1))\nhist(fisher.fdr$specificity, xlim=c(0,1))\n\n## density dist\nplot(density(treeWAS$specificity), main=\"SPECIFICITY\\n(treeWAS)\")\nplot(density(fisher.bonf$specificity), main=\"SPECIFICITY\\n(Fisher's Exact Test w/ Bonferonni Correction)\")\nplot(density(fisher.fdr$specificity), main=\"SPECIFICITY\\n(Fisher's Exact Test w/ FDR Correction)\")\n\n\n## FPR ##\n\n## histogram\nhist(treeWAS$FPR)\nhist(treeWAS$FPR, xlim=c(0,1))\nhist(fisher.bonf$FPR, xlim=c(0,1))\nhist(fisher.fdr$FPR, xlim=c(0,1))\n\n## density dist\nplot(density(treeWAS$FPR), main=\"FALSE POSITIVE RATE\\n(treeWAS)\")\nplot(density(fisher.bonf$FPR), main=\"FALSE POSITIVE RATE\\n(Fisher's Exact Test w/ Bonferonni Correction)\")\nplot(density(fisher.fdr$FPR), main=\"FALSE POSITIVE RATE\\n(Fisher's Exact Test w/ FDR Correction)\")\n\n\n\n\n\n\n\n#######################################################################################################################\n\n#################\n## theta_p = 5 ##\n#################\n\nfoo <- dir(\"C:/Cait 2012/Work/Xavier/Sims/set2/theta_p = 5\")\nfoo\n## get all performance Rdata names\ntoKeep <- grep(\"performance\", foo) ##??\nfoo <- foo[toKeep]\n\n## load performance data\ndat <- list()\nsetwd(\"C:/Cait 2012/Work/Xavier/Sims/set2/theta_p = 5\")\nfor(i in 1:length(foo)){\n  dat[[i]] <- get(load(paste(\"./\", foo[i], sep=\"\")))\n}\n\ntreeWAS <- list()\nfor(i in 1:length(dat)){\n  treeWAS[[i]] <- dat[[i]][[1]]\n}\n\nfisher.bonf <- list()\nfor(i in 1:length(dat)){\n  fisher.bonf[[i]] <- dat[[i]][[2]]\n}\n\nfisher.fdr <- list()\nfor(i in 1:length(dat)){\n  fisher.fdr[[i]] <- dat[[i]][[3]]\n}\n\n## combine\ntreeWAS <- do.call(\"rbind\", treeWAS)\nfisher.bonf <- do.call(\"rbind\", fisher.bonf)\nfisher.fdr <- do.call(\"rbind\", fisher.fdr)\n\n## save\nsave(treeWAS, file=\"./set2_theta_p_5_treeWAS_performance.Rdata\")\nsave(fisher.bonf, file=\"./set2_theta_p_5_fisher.bonf_performance.Rdata\")\nsave(fisher.fdr, file=\"./set2_theta_p_5_fisher.fdr_performance.Rdata\")\n\n## summarise\nsummary(treeWAS)\nsummary(fisher.bonf)\nsummary(fisher.fdr)\n\n##########\n## plot ##\n##########\n\n## ACCURACY ##\n\n## histogram\nhist(treeWAS$accuracy)\nhist(treeWAS$accuracy, xlim=c(0,1))\nhist(fisher.bonf$accuracy, xlim=c(0,1))\nhist(fisher.fdr$accuracy, xlim=c(0,1))\n\n## density dist\nplot(density(treeWAS$accuracy), main=\"ACCURACY\\n(treeWAS)\")\nplot(density(fisher.bonf$accuracy), main=\"ACCURACY\\n(Fisher's Exact Test w/ Bonferonni Correction)\")\nplot(density(fisher.fdr$accuracy), main=\"ACCURACY\\n(Fisher's Exact Test w/ FDR Correction)\")\n\n\n## SPECIFICITY ##\n\n## histogram\nhist(treeWAS$specificity)\nhist(treeWAS$specificity, xlim=c(0,1))\nhist(fisher.bonf$specificity, xlim=c(0,1))\nhist(fisher.fdr$specificity, xlim=c(0,1))\n\n## density dist\nplot(density(treeWAS$specificity), main=\"SPECIFICITY\\n(treeWAS)\")\nplot(density(fisher.bonf$specificity), main=\"SPECIFICITY\\n(Fisher's Exact Test w/ Bonferonni Correction)\")\nplot(density(fisher.fdr$specificity), main=\"SPECIFICITY\\n(Fisher's Exact Test w/ FDR Correction)\")\n\n\n## FPR ##\n\n## histogram\nhist(treeWAS$FPR)\nhist(treeWAS$FPR, xlim=c(0,1))\nhist(fisher.bonf$FPR, xlim=c(0,1))\nhist(fisher.fdr$FPR, xlim=c(0,1))\n\n## density dist\nplot(density(treeWAS$FPR), main=\"FALSE POSITIVE RATE\\n(treeWAS)\")\nplot(density(fisher.bonf$FPR), main=\"FALSE POSITIVE RATE\\n(Fisher's Exact Test w/ Bonferonni Correction)\")\nplot(density(fisher.fdr$FPR), main=\"FALSE POSITIVE RATE\\n(Fisher's Exact Test w/ FDR Correction)\")\n",
    "created" : 1474609052500.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3377298952",
    "id" : "D7981327",
    "lastKnownWriteTime" : 1474613086,
    "last_content_update" : 1474613087003,
    "path" : "D:/treeWAS/misc/boxplots.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}