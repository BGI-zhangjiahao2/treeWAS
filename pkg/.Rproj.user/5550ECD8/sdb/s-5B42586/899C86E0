{
    "contents" : "\n\n\n## GENERIC SIM TESTING FUNCTION ##\n\n\n#############\n## simTest ##\n#############\n\n###################\n## R PROFILING?? ##\n###################\n## profiling of time (and memory??)\n## COALESCENT TREE (w n.snps.sim = 10000)\n# Rprof(\"E:/treeWAS_Sims/Rprof_simTest\", memory.profiling=T)\n# foo <- simTest()\n# Rprof(NULL)\n# summaryRprof(\"E:/treeWAS_Sims/Rprof_simTest\") # , memory=\"both\"\n\n## R-TREE (w n.snps.sim = 10000)\n# Rprof(\"E:/treeWAS_Sims/Rprof_simTest_rtree\", memory.profiling=T)\n# # foo <- simTest()\n# Rprof(NULL)\n# summaryRprof(\"E:/treeWAS_Sims/Rprof_simTest_rtree\") # , memory=\"both\"\n\n###################\n\n## PCA/DAPC error?\n# Error in weights * y : non-numeric argument to binary operator\n\n## set 3 error:\n# Error in text.default(x = (max(h.null$breaks) * 3/4), y = (max(h.null$counts) *  :\n#    object 'myCol' not found\n# In addition: Warning message:\n#   In matrix(as.numeric(snps), nrow = nrow(snps.ori), ncol = ncol(snps.ori)) :\n#   data length [47700] is not a sub-multiple or multiple of the number of columns [10000]\n\n\n\n# ## rtree error:\n# Error in if (snp.node[[edges[e, 1]]] == \"0\" & phen.node[[edges[e, 1]]] ==  :\n#              missing value where TRUE/FALSE needed\n\n# HYP -- problem in snp.sim.Q snps.assc sim -- edges not going in ordered pairs\n### SOLN? --> need to add which(edge == e) as in snps.sim instead of just using snp.node[[edges[e,1]]] to get index...\n\n\n## Memory space error: (occurring at random...)\n##  In structure(.Call(C_objectSize, x), class = \"object_size\") :\n## Reached total allocation of 16259Mb: see help(memory.size)\n##  Error: cannot allocate vector of size 76.3 Mb\n\n# dist_0 <- get(load(\"C:/Users/Caitlin/treeWAS/misc/CFML_R_0_dist.Rdata\"))\n# barplot(dist_0, names.arg=c(1:length(dist_0)))\n# \n# dist_0.01 <- get(load(\"C:/Users/Caitlin/treeWAS/misc/CFML_R_0.01_dist.Rdata\"))\n# barplot(dist_0.01, names.arg=c(1:length(dist_0.01)))\n# \n# # dist_0.05 <- get(load(\"E:/treeWAS_misc/SimBac/CFML_R_0.05_dist.Rdata\"))\n# dist_0.05 <- get(load(\"C:/Users/Caitlin/treeWAS/misc/CFML_R_0.05_dist.Rdata\"))\n# barplot(dist_0.05, names.arg=c(1:length(dist_0.05)))\n# \n# dist_0.1 <- get(load(\"C:/Users/Caitlin/treeWAS/misc/CFML_R_0.1_dist.Rdata\"))\n# barplot(dist_0.1, names.arg=c(1:length(dist_0.1)))\n\n# dist_pois <- rpois(1000, 1)\n# dist_pois <- table(dist_pois[dist_pois>0])\n# barplot(dist_pois, names.arg=c(1:length(dist_pois)))\n\n\n\n\n\n\n#################\n## PARALLELIZE ##\n#################\n\n# ## Load libraries:\n# library(foreach)\n# library(doParallel)\n# \n# ## Calculate the number of cores:\n# no_cores <- detectCores() - 1 # 3\n# \n# ## Initiate implicit cluster:\n# registerDoParallel(no_cores)\n\n################################################################################################################################\n\n\n## set 2 failing after running treeWAS w:\n# Error in simTest(set.number = 2, n.reps = n.reps, set.seed.as = \"file.number\",  :\n# task 1 failed - \"$ operator is invalid for atomic vectors\"\n## Resolved-- error was in new treeWAS.combined tail of treeWAS.eval when no SNPs found.\n\n# out <- foreach(n.reps=rep(1, 10), file.n=c(101:110), .packages=\"treeWAS\") %dopar%\n#   simTest(\n#     ## simTest args:\n#     set.number = 2,\n#     n.reps = n.reps,\n#     set.seed.as = \"file.number\",\n#     working.dir = \"/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims\",\n# \n#     ## data from file args:\n#     from.file = FALSE,\n#     file.n = file.n,\n#     Windows=TRUE,\n# \n#     ## coalescent.sim args:\n#     n.ind = 100,\n#     n.snps = 10000, # gen.size\n#     # sim.by = \"locus\",\n#     n.subs = dist_0, # 15, # theta (*2)\n#     n.phen.subs = 15, # theta_p = NULL # 15\n#     n.snps.assoc = 10, #\n#     # assoc.option = \"all\",\n#     assoc.prob = NULL, #100, #  90, #\n#     grp.min = 0.25,\n#     s = 20,\n#     af = 10,\n#     coaltree = FALSE,\n# \n#     ## treeWAS args:\n#     ## RUNNING ALL OF THESE OPTIONS (FOR NOW):\n#     p.value = 0.01, # REQUIRED FOR FISHER TEST\n#     #   p.value.correct = c(\"bonf\", \"fdr\", FALSE), #mt.correct = FALSE\n#     #   p.value.by = c(\"count\", \"density\"),\n#     sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL ###################### CAREFUL (10,000) !!\n#     treeWAS.test = c(\"terminal\", \"simultaneous\", \"subsequent\"), # \"score\"\n#     snps.reconstruction = \"parsimony\",\n#     phen.reconstruction = \"parsimony\"\n#   )\n\n################################################################################################################################\n\n################################################################################################################################\n\n# out <- foreach(n.reps=rep(1, 10), file.n=c(111:120), .packages=\"treeWAS\") %dopar%\n#   simTest(\n#     ## simTest args:\n#     set.number = 3,\n#     n.reps = n.reps,\n#     set.seed.as = \"file.number\",\n#     working.dir = \"/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims\",\n# \n#     ## data from file args:\n#     from.file = FALSE,\n#     file.n = file.n,\n#     Windows=TRUE,\n# \n#     ## coalescent.sim args:\n#     n.ind = 100,\n#     n.snps = 10000, # gen.size\n#     # sim.by = \"locus\",\n#     n.subs = dist_0, # 15, # theta (*2)\n#     n.phen.subs = 15, # theta_p = NULL # 15\n#     n.snps.assoc = 10, #\n#     # assoc.option = \"all\",\n#     assoc.prob = NULL, #100, #  90, #\n#     grp.min = 0.25,\n#     s = 20,\n#     af = 10,\n#     coaltree = FALSE,\n# \n#     ## treeWAS args:\n#     ## RUNNING ALL OF THESE OPTIONS (FOR NOW):\n#     p.value = 0.01, # REQUIRED FOR FISHER TEST\n#     #   p.value.correct = c(\"bonf\", \"fdr\", FALSE), #mt.correct = FALSE\n#     #   p.value.by = c(\"count\", \"density\"),\n#     sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL ###################### CAREFUL (10,000) !!\n#     treeWAS.test = c(\"terminal\", \"simultaneous\", \"subsequent\"), # \"score\"\n#     snps.reconstruction = \"parsimony\",\n#     phen.reconstruction = \"parsimony\"\n#   )\n# \n# out <- foreach(n.reps=rep(1, 10), file.n=c(111:120), .packages=\"treeWAS\") %dopar%\n#   simTest(\n#     ## simTest args:\n#     set.number = 2,\n#     n.reps = n.reps,\n#     set.seed.as = \"file.number\",\n#     working.dir = \"/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims\",\n# \n#     ## data from file args:\n#     from.file = FALSE,\n#     file.n = file.n,\n#     Windows=TRUE,\n# \n#     ## coalescent.sim args:\n#     n.ind = 100,\n#     n.snps = 10000, # gen.size\n#     # sim.by = \"locus\",\n#     n.subs = dist_0, # 15, # theta (*2)\n#     n.phen.subs = 15, # theta_p = NULL # 15\n#     n.snps.assoc = 10, #\n#     # assoc.option = \"all\",\n#     assoc.prob = NULL, #100, #  90, #\n#     grp.min = 0.25,\n#     s = 20,\n#     af = 10,\n#     coaltree = FALSE,\n# \n#     ## treeWAS args:\n#     ## RUNNING ALL OF THESE OPTIONS (FOR NOW):\n#     p.value = 0.01, # REQUIRED FOR FISHER TEST\n#     #   p.value.correct = c(\"bonf\", \"fdr\", FALSE), #mt.correct = FALSE\n#     #   p.value.by = c(\"count\", \"density\"),\n#     sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL ###################### CAREFUL (10,000) !!\n#     treeWAS.test = c(\"terminal\", \"simultaneous\", \"subsequent\"), # \"score\"\n#     snps.reconstruction = \"parsimony\",\n#     phen.reconstruction = \"parsimony\"\n#   )\n# \n# \n# out <- foreach(n.reps=rep(1, 10), file.n=c(111:120), .packages=\"treeWAS\") %dopar%\n#   simTest(\n#     ## simTest args:\n#     set.number = 1,\n#     n.reps = n.reps,\n#     set.seed.as = \"file.number\",\n#     working.dir = \"/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims\",\n# \n#     ## data from file args:\n#     from.file = FALSE,\n#     file.n = file.n,\n#     Windows=TRUE,\n# \n#     ## coalescent.sim args:\n#     n.ind = 100,\n#     n.snps = 10000, # gen.size\n#     # sim.by = \"locus\",\n#     n.subs = dist_0, # 15, # theta (*2)\n#     n.phen.subs = 15, # theta_p = NULL # 15\n#     n.snps.assoc = 10, #\n#     # assoc.option = \"all\",\n#     assoc.prob = NULL, #100, #  90, #\n#     grp.min = 0.25,\n#     s = 20,\n#     af = 10,\n#     coaltree = FALSE,\n# \n#     ## treeWAS args:\n#     ## RUNNING ALL OF THESE OPTIONS (FOR NOW):\n#     p.value = 0.01, # REQUIRED FOR FISHER TEST\n#     #   p.value.correct = c(\"bonf\", \"fdr\", FALSE), #mt.correct = FALSE\n#     #   p.value.by = c(\"count\", \"density\"),\n#     sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL ###################### CAREFUL (10,000) !!\n#     treeWAS.test = c(\"terminal\", \"simultaneous\", \"subsequent\"), # \"score\"\n#     snps.reconstruction = \"parsimony\",\n#     phen.reconstruction = \"parsimony\"\n#   )\n\n\n\n\n# ################################################################################################################################\n#\n# ################################################################################################################################\n#\n# out <- foreach(n.reps=rep(1, 20), file.n=c(121:140), .packages=\"treeWAS\") %dopar%\n#   simTest(\n#     ## simTest args:\n#     set.number = 3,\n#     n.reps = n.reps,\n#     set.seed.as = \"file.number\",\n#     working.dir = \"/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims\",\n# \n#     ## data from file args:\n#     from.file = FALSE,\n#     file.n = file.n,\n#     Windows=TRUE,\n# \n#     ## coalescent.sim args:\n#     n.ind = 100,\n#     n.snps = 10000, # gen.size\n#     # sim.by = \"locus\",\n#     n.subs = dist_0.01, # 15, # theta (*2)\n#     n.phen.subs = 15, # theta_p = NULL # 15\n#     n.snps.assoc = 10, #\n#     # assoc.option = \"all\",\n#     assoc.prob = NULL, #100, #  90, #\n#     grp.min = 0.25,\n#     s = 20,\n#     af = 10,\n#     coaltree = FALSE,\n# \n#     ## treeWAS args:\n#     ## RUNNING ALL OF THESE OPTIONS (FOR NOW):\n#     p.value = 0.01, # REQUIRED FOR FISHER TEST\n#     #   p.value.correct = c(\"bonf\", \"fdr\", FALSE), #mt.correct = FALSE\n#     #   p.value.by = c(\"count\", \"density\"),\n#     sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL ###################### CAREFUL (10,000) !!\n#     treeWAS.test = c(\"terminal\", \"simultaneous\", \"subsequent\"), # \"score\"\n#     snps.reconstruction = \"parsimony\",\n#     phen.reconstruction = \"parsimony\"\n#   )\n# \n# \n# out <- foreach(n.reps=rep(1, 20), file.n=c(121:140), .packages=\"treeWAS\") %dopar%\n#   simTest(\n#     ## simTest args:\n#     set.number = 2,\n#     n.reps = n.reps,\n#     set.seed.as = \"file.number\",\n#     working.dir = \"/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims\",\n# \n#     ## data from file args:\n#     from.file = FALSE,\n#     file.n = file.n,\n#     Windows=TRUE,\n# \n#     ## coalescent.sim args:\n#     n.ind = 100,\n#     n.snps = 10000, # gen.size\n#     # sim.by = \"locus\",\n#     n.subs = dist_0.01, # 15, # theta (*2)\n#     n.phen.subs = 15, # theta_p = NULL # 15\n#     n.snps.assoc = 10, #\n#     # assoc.option = \"all\",\n#     assoc.prob = NULL, #100, #  90, #\n#     grp.min = 0.25,\n#     s = 20,\n#     af = 10,\n#     coaltree = FALSE,\n# \n#     ## treeWAS args:\n#     ## RUNNING ALL OF THESE OPTIONS (FOR NOW):\n#     p.value = 0.01, # REQUIRED FOR FISHER TEST\n#     #   p.value.correct = c(\"bonf\", \"fdr\", FALSE), #mt.correct = FALSE\n#     #   p.value.by = c(\"count\", \"density\"),\n#     sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL ###################### CAREFUL (10,000) !!\n#     treeWAS.test = c(\"terminal\", \"simultaneous\", \"subsequent\"), # \"score\"\n#     snps.reconstruction = \"parsimony\",\n#     phen.reconstruction = \"parsimony\"\n#   )\n# \n# \n# out <- foreach(n.reps=rep(1, 20), file.n=c(121:140), .packages=\"treeWAS\") %dopar%\n#   simTest(\n#     ## simTest args:\n#     set.number = 1,\n#     n.reps = n.reps,\n#     set.seed.as = \"file.number\",\n#     working.dir = \"/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims\",\n# \n#     ## data from file args:\n#     from.file = FALSE,\n#     file.n = file.n,\n#     Windows=TRUE,\n# \n#     ## coalescent.sim args:\n#     n.ind = 100,\n#     n.snps = 10000, # gen.size\n#     # sim.by = \"locus\",\n#     n.subs = dist_0.01, # 15, # theta (*2)\n#     n.phen.subs = 15, # theta_p = NULL # 15\n#     n.snps.assoc = 10, #\n#     # assoc.option = \"all\",\n#     assoc.prob = NULL, #100, #  90, #\n#     grp.min = 0.25,\n#     s = 20,\n#     af = 10,\n#     coaltree = FALSE,\n# \n#     ## treeWAS args:\n#     ## RUNNING ALL OF THESE OPTIONS (FOR NOW):\n#     p.value = 0.01, # REQUIRED FOR FISHER TEST\n#     #   p.value.correct = c(\"bonf\", \"fdr\", FALSE), #mt.correct = FALSE\n#     #   p.value.by = c(\"count\", \"density\"),\n#     sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL ###################### CAREFUL (10,000) !!\n#     treeWAS.test = c(\"terminal\", \"simultaneous\", \"subsequent\"), # \"score\"\n#     snps.reconstruction = \"parsimony\",\n#     phen.reconstruction = \"parsimony\"\n#   )\n#\n#\n#\n# ################################################################################################################################\n#\n# ################################################################################################################################\n#\n# out <- foreach(n.reps=rep(1, 20), file.n=c(141:160), .packages=\"treeWAS\") %dopar%\n#   simTest(\n#     ## simTest args:\n#     set.number = 3,\n#     n.reps = n.reps,\n#     set.seed.as = \"file.number\",\n#     working.dir = \"/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims\",\n# \n#     ## data from file args:\n#     from.file = FALSE,\n#     file.n = file.n,\n#     Windows=TRUE,\n# \n#     ## coalescent.sim args:\n#     n.ind = 100,\n#     n.snps = 10000, # gen.size\n#     # sim.by = \"locus\",\n#     n.subs = dist_0.05, # 15, # theta (*2)\n#     n.phen.subs = 15, # theta_p = NULL # 15\n#     n.snps.assoc = 10, #\n#     # assoc.option = \"all\",\n#     assoc.prob = NULL, #100, #  90, #\n#     grp.min = 0.25,\n#     s = 20,\n#     af = 10,\n#     coaltree = FALSE,\n# \n#     ## treeWAS args:\n#     ## RUNNING ALL OF THESE OPTIONS (FOR NOW):\n#     p.value = 0.01, # REQUIRED FOR FISHER TEST\n#     #   p.value.correct = c(\"bonf\", \"fdr\", FALSE), #mt.correct = FALSE\n#     #   p.value.by = c(\"count\", \"density\"),\n#     sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL ###################### CAREFUL (10,000) !!\n#     treeWAS.test = c(\"terminal\", \"simultaneous\", \"subsequent\"), # \"score\"\n#     snps.reconstruction = \"parsimony\",\n#     phen.reconstruction = \"parsimony\"\n#   )\n# \n# \n# out <- foreach(n.reps=rep(1, 20), file.n=c(141:160), .packages=\"treeWAS\") %dopar%\n#   simTest(\n#     ## simTest args:\n#     set.number = 2,\n#     n.reps = n.reps,\n#     set.seed.as = \"file.number\",\n#     working.dir = \"/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims\",\n# \n#     ## data from file args:\n#     from.file = FALSE,\n#     file.n = file.n,\n#     Windows=TRUE,\n# \n#     ## coalescent.sim args:\n#     n.ind = 100,\n#     n.snps = 10000, # gen.size\n#     # sim.by = \"locus\",\n#     n.subs = dist_0.05, # 15, # theta (*2)\n#     n.phen.subs = 15, # theta_p = NULL # 15\n#     n.snps.assoc = 10, #\n#     # assoc.option = \"all\",\n#     assoc.prob = NULL, #100, #  90, #\n#     grp.min = 0.25,\n#     s = 20,\n#     af = 10,\n#     coaltree = FALSE,\n# \n#     ## treeWAS args:\n#     ## RUNNING ALL OF THESE OPTIONS (FOR NOW):\n#     p.value = 0.01, # REQUIRED FOR FISHER TEST\n#     #   p.value.correct = c(\"bonf\", \"fdr\", FALSE), #mt.correct = FALSE\n#     #   p.value.by = c(\"count\", \"density\"),\n#     sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL ###################### CAREFUL (10,000) !!\n#     treeWAS.test = c(\"terminal\", \"simultaneous\", \"subsequent\"), # \"score\"\n#     snps.reconstruction = \"parsimony\",\n#     phen.reconstruction = \"parsimony\"\n#   )\n# \n# \n# out <- foreach(n.reps=rep(1, 20), file.n=c(141:160), .packages=\"treeWAS\") %dopar%\n#   simTest(\n#     ## simTest args:\n#     set.number = 1,\n#     n.reps = n.reps,\n#     set.seed.as = \"file.number\",\n#     working.dir = \"/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims\",\n# \n#     ## data from file args:\n#     from.file = FALSE,\n#     file.n = file.n,\n#     Windows=TRUE,\n# \n#     ## coalescent.sim args:\n#     n.ind = 100,\n#     n.snps = 10000, # gen.size\n#     # sim.by = \"locus\",\n#     n.subs = dist_0.05, # 15, # theta (*2)\n#     n.phen.subs = 15, # theta_p = NULL # 15\n#     n.snps.assoc = 10, #\n#     # assoc.option = \"all\",\n#     assoc.prob = NULL, #100, #  90, #\n#     grp.min = 0.25,\n#     s = 20,\n#     af = 10,\n#     coaltree = FALSE,\n# \n#     ## treeWAS args:\n#     ## RUNNING ALL OF THESE OPTIONS (FOR NOW):\n#     p.value = 0.01, # REQUIRED FOR FISHER TEST\n#     #   p.value.correct = c(\"bonf\", \"fdr\", FALSE), #mt.correct = FALSE\n#     #   p.value.by = c(\"count\", \"density\"),\n#     sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL ###################### CAREFUL (10,000) !!\n#     treeWAS.test = c(\"terminal\", \"simultaneous\", \"subsequent\"), # \"score\"\n#     snps.reconstruction = \"parsimony\",\n#     phen.reconstruction = \"parsimony\"\n#   )\n#\n#\n#\n# ################################################################################################################################\n#\n# ################################################################################################################################\n#\n# out <- foreach(n.reps=rep(1, 20), file.n=c(161:180), .packages=\"treeWAS\") %dopar%\n#   simTest(\n#     ## simTest args:\n#     set.number = 3,\n#     n.reps = n.reps,\n#     set.seed.as = \"file.number\",\n#     working.dir = \"/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims\",\n# \n#     ## data from file args:\n#     from.file = FALSE,\n#     file.n = file.n,\n#     Windows=TRUE,\n# \n#     ## coalescent.sim args:\n#     n.ind = 100,\n#     n.snps = 10000, # gen.size\n#     # sim.by = \"locus\",\n#     n.subs = dist_0.1, # 15, # theta (*2)\n#     n.phen.subs = 15, # theta_p = NULL # 15\n#     n.snps.assoc = 10, #\n#     # assoc.option = \"all\",\n#     assoc.prob = NULL, #100, #  90, #\n#     grp.min = 0.25,\n#     s = 20,\n#     af = 10,\n#     coaltree = FALSE,\n# \n#     ## treeWAS args:\n#     ## RUNNING ALL OF THESE OPTIONS (FOR NOW):\n#     p.value = 0.01, # REQUIRED FOR FISHER TEST\n#     #   p.value.correct = c(\"bonf\", \"fdr\", FALSE), #mt.correct = FALSE\n#     #   p.value.by = c(\"count\", \"density\"),\n#     sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL ###################### CAREFUL (10,000) !!\n#     treeWAS.test = c(\"terminal\", \"simultaneous\", \"subsequent\"), # \"score\"\n#     snps.reconstruction = \"parsimony\",\n#     phen.reconstruction = \"parsimony\"\n#   )\n# \n# \n# out <- foreach(n.reps=rep(1, 20), file.n=c(161:180), .packages=\"treeWAS\") %dopar%\n#   simTest(\n#     ## simTest args:\n#     set.number = 2,\n#     n.reps = n.reps,\n#     set.seed.as = \"file.number\",\n#     working.dir = \"/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims\",\n# \n#     ## data from file args:\n#     from.file = FALSE,\n#     file.n = file.n,\n#     Windows=TRUE,\n# \n#     ## coalescent.sim args:\n#     n.ind = 100,\n#     n.snps = 10000, # gen.size\n#     # sim.by = \"locus\",\n#     n.subs = dist_0.1, # 15, # theta (*2)\n#     n.phen.subs = 15, # theta_p = NULL # 15\n#     n.snps.assoc = 10, #\n#     # assoc.option = \"all\",\n#     assoc.prob = NULL, #100, #  90, #\n#     grp.min = 0.25,\n#     s = 20,\n#     af = 10,\n#     coaltree = FALSE,\n# \n#     ## treeWAS args:\n#     ## RUNNING ALL OF THESE OPTIONS (FOR NOW):\n#     p.value = 0.01, # REQUIRED FOR FISHER TEST\n#     #   p.value.correct = c(\"bonf\", \"fdr\", FALSE), #mt.correct = FALSE\n#     #   p.value.by = c(\"count\", \"density\"),\n#     sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL ###################### CAREFUL (10,000) !!\n#     treeWAS.test = c(\"terminal\", \"simultaneous\", \"subsequent\"), # \"score\"\n#     snps.reconstruction = \"parsimony\",\n#     phen.reconstruction = \"parsimony\"\n#   )\n# \n# \n# out <- foreach(n.reps=rep(1, 20), file.n=c(161:180), .packages=\"treeWAS\") %dopar%\n#   simTest(\n#     ## simTest args:\n#     set.number = 1,\n#     n.reps = n.reps,\n#     set.seed.as = \"file.number\",\n#     working.dir = \"/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims\",\n# \n#     ## data from file args:\n#     from.file = FALSE,\n#     file.n = file.n,\n#     Windows=TRUE,\n# \n#     ## coalescent.sim args:\n#     n.ind = 100,\n#     n.snps = 10000, # gen.size\n#     # sim.by = \"locus\",\n#     n.subs = dist_0.1, # 15, # theta (*2)\n#     n.phen.subs = 15, # theta_p = NULL # 15\n#     n.snps.assoc = 10, #\n#     # assoc.option = \"all\",\n#     assoc.prob = NULL, #100, #  90, #\n#     grp.min = 0.25,\n#     s = 20,\n#     af = 10,\n#     coaltree = FALSE,\n# \n#     ## treeWAS args:\n#     ## RUNNING ALL OF THESE OPTIONS (FOR NOW):\n#     p.value = 0.01, # REQUIRED FOR FISHER TEST\n#     #   p.value.correct = c(\"bonf\", \"fdr\", FALSE), #mt.correct = FALSE\n#     #   p.value.by = c(\"count\", \"density\"),\n#     sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL ###################### CAREFUL (10,000) !!\n#     treeWAS.test = c(\"terminal\", \"simultaneous\", \"subsequent\"), # \"score\"\n#     snps.reconstruction = \"parsimony\",\n#     phen.reconstruction = \"parsimony\"\n#   )\n#\n#\n#\n# ################################################################################################################################\n#\n# ################################################################################################################################\n#\n# out <- foreach(n.reps=rep(1, 20), file.n=c(181:200), .packages=\"treeWAS\") %dopar%\n#   simTest(\n#     ## simTest args:\n#     set.number = 3,\n#     n.reps = n.reps,\n#     set.seed.as = \"file.number\",\n#     working.dir = \"/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims\",\n# \n#     ## data from file args:\n#     from.file = FALSE,\n#     file.n = file.n,\n#     Windows=TRUE,\n# \n#     ## coalescent.sim args:\n#     n.ind = 100,\n#     n.snps = 10000, # gen.size\n#     # sim.by = \"locus\",\n#     n.subs = 1, # 15, # theta (*2)\n#     n.phen.subs = 15, # theta_p = NULL # 15\n#     n.snps.assoc = 10, #\n#     # assoc.option = \"all\",\n#     assoc.prob = NULL, #100, #  90, #\n#     grp.min = 0.25,\n#     s = 20,\n#     af = 10,\n#     coaltree = FALSE,\n# \n#     ## treeWAS args:\n#     ## RUNNING ALL OF THESE OPTIONS (FOR NOW):\n#     p.value = 0.01, # REQUIRED FOR FISHER TEST\n#     #   p.value.correct = c(\"bonf\", \"fdr\", FALSE), #mt.correct = FALSE\n#     #   p.value.by = c(\"count\", \"density\"),\n#     sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL ###################### CAREFUL (10,000) !!\n#     treeWAS.test = c(\"terminal\", \"simultaneous\", \"subsequent\"), # \"score\"\n#     snps.reconstruction = \"parsimony\",\n#     phen.reconstruction = \"parsimony\"\n#   )\n# \n# \n# out <- foreach(n.reps=rep(1, 20), file.n=c(181:200), .packages=\"treeWAS\") %dopar%\n#   simTest(\n#     ## simTest args:\n#     set.number = 2,\n#     n.reps = n.reps,\n#     set.seed.as = \"file.number\",\n#     working.dir = \"/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims\",\n# \n#     ## data from file args:\n#     from.file = FALSE,\n#     file.n = file.n,\n#     Windows=TRUE,\n# \n#     ## coalescent.sim args:\n#     n.ind = 100,\n#     n.snps = 10000, # gen.size\n#     # sim.by = \"locus\",\n#     n.subs = 1, # 15, # theta (*2)\n#     n.phen.subs = 15, # theta_p = NULL # 15\n#     n.snps.assoc = 10, #\n#     # assoc.option = \"all\",\n#     assoc.prob = NULL, #100, #  90, #\n#     grp.min = 0.25,\n#     s = 20,\n#     af = 10,\n#     coaltree = FALSE,\n# \n#     ## treeWAS args:\n#     ## RUNNING ALL OF THESE OPTIONS (FOR NOW):\n#     p.value = 0.01, # REQUIRED FOR FISHER TEST\n#     #   p.value.correct = c(\"bonf\", \"fdr\", FALSE), #mt.correct = FALSE\n#     #   p.value.by = c(\"count\", \"density\"),\n#     sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL ###################### CAREFUL (10,000) !!\n#     treeWAS.test = c(\"terminal\", \"simultaneous\", \"subsequent\"), # \"score\"\n#     snps.reconstruction = \"parsimony\",\n#     phen.reconstruction = \"parsimony\"\n#   )\n# \n# \n# out <- foreach(n.reps=rep(1, 20), file.n=c(181:200), .packages=\"treeWAS\") %dopar%\n#   simTest(\n#     ## simTest args:\n#     set.number = 1,\n#     n.reps = n.reps,\n#     set.seed.as = \"file.number\",\n#     working.dir = \"/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims\",\n# \n#     ## data from file args:\n#     from.file = FALSE,\n#     file.n = file.n,\n#     Windows=TRUE,\n# \n#     ## coalescent.sim args:\n#     n.ind = 100,\n#     n.snps = 10000, # gen.size\n#     # sim.by = \"locus\",\n#     n.subs = 1, # 15, # theta (*2)\n#     n.phen.subs = 15, # theta_p = NULL # 15\n#     n.snps.assoc = 10, #\n#     # assoc.option = \"all\",\n#     assoc.prob = NULL, #100, #  90, #\n#     grp.min = 0.25,\n#     s = 20,\n#     af = 10,\n#     coaltree = FALSE,\n# \n#     ## treeWAS args:\n#     ## RUNNING ALL OF THESE OPTIONS (FOR NOW):\n#     p.value = 0.01, # REQUIRED FOR FISHER TEST\n#     #   p.value.correct = c(\"bonf\", \"fdr\", FALSE), #mt.correct = FALSE\n#     #   p.value.by = c(\"count\", \"density\"),\n#     sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL ###################### CAREFUL (10,000) !!\n#     treeWAS.test = c(\"terminal\", \"simultaneous\", \"subsequent\"), # \"score\"\n#     snps.reconstruction = \"parsimony\",\n#     phen.reconstruction = \"parsimony\"\n#   )\n#\n\n\n################################################################################################################################\n\n################################################################################################################################\n\n\n\n\n\n#######################\n## NEW PARAMETER SET ##\n#######################\n\n\n# ################################################################################################################################\n#\n# ################################################################################################################################\n#\n# out <- foreach(n.reps=rep(1, 10), file.n=c(201:210), .packages=\"treeWAS\") %dopar%\n#   simTest(\n#     ## simTest args:\n#     set.number = 3,\n#     n.reps = n.reps,\n#     set.seed.as = \"file.number\",\n#     working.dir = \"/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims\",\n# \n#     ## data from file args:\n#     from.file = FALSE,\n#     file.n = file.n,\n#     Windows=TRUE,\n# \n#     ## coalescent.sim args:\n#     n.ind = 100,\n#     n.snps = 10000, # gen.size\n#     # sim.by = \"locus\",\n#     n.subs = dist_0, # 15, # theta (*2)\n#     n.phen.subs = 15, # theta_p = NULL # 15\n#     n.snps.assoc = 10, #\n#     # assoc.option = \"all\",\n#     assoc.prob = NULL, #100, #  90, #\n#     grp.min = 0.25,\n#     s = 30,\n#     af = 10,\n#     coaltree = FALSE,\n# \n#     ## treeWAS args:\n#     ## RUNNING ALL OF THESE OPTIONS (FOR NOW):\n#     p.value = 0.01, # REQUIRED FOR FISHER TEST\n#     #   p.value.correct = c(\"bonf\", \"fdr\", FALSE), #mt.correct = FALSE\n#     #   p.value.by = c(\"count\", \"density\"),\n#     sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL ###################### CAREFUL (10,000) !!\n#     treeWAS.test = c(\"terminal\", \"simultaneous\", \"subsequent\"), # \"score\"\n#     snps.reconstruction = \"parsimony\",\n#     phen.reconstruction = \"parsimony\"\n#   )\n# \n# ################################################################################################################################\n# \n# out <- foreach(n.reps=rep(1, 10), file.n=c(211:220), .packages=\"treeWAS\") %dopar%\n#   simTest(\n#     ## simTest args:\n#     set.number = 3,\n#     n.reps = n.reps,\n#     set.seed.as = \"file.number\",\n#     working.dir = \"/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims\",\n# \n#     ## data from file args:\n#     from.file = FALSE,\n#     file.n = file.n,\n#     Windows=TRUE,\n# \n#     ## coalescent.sim args:\n#     n.ind = 100,\n#     n.snps = 10000, # gen.size\n#     # sim.by = \"locus\",\n#     n.subs = dist_0.01, # 15, # theta (*2)\n#     n.phen.subs = 15, # theta_p = NULL # 15\n#     n.snps.assoc = 10, #\n#     # assoc.option = \"all\",\n#     assoc.prob = NULL, #100, #  90, #\n#     grp.min = 0.25,\n#     s = 30,\n#     af = 10,\n#     coaltree = FALSE,\n# \n#     ## treeWAS args:\n#     ## RUNNING ALL OF THESE OPTIONS (FOR NOW):\n#     p.value = 0.01, # REQUIRED FOR FISHER TEST\n#     #   p.value.correct = c(\"bonf\", \"fdr\", FALSE), #mt.correct = FALSE\n#     #   p.value.by = c(\"count\", \"density\"),\n#     sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL ###################### CAREFUL (10,000) !!\n#     treeWAS.test = c(\"terminal\", \"simultaneous\", \"subsequent\"), # \"score\"\n#     snps.reconstruction = \"parsimony\",\n#     phen.reconstruction = \"parsimony\"\n#   )\n# \n# ################################################################################################################################\n# \n# out <- foreach(n.reps=rep(1, 10), file.n=c(221:230), .packages=\"treeWAS\") %dopar%\n#   simTest(\n#     ## simTest args:\n#     set.number = 3,\n#     n.reps = n.reps,\n#     set.seed.as = \"file.number\",\n#     working.dir = \"/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims\",\n# \n#     ## data from file args:\n#     from.file = FALSE,\n#     file.n = file.n,\n#     Windows=TRUE,\n# \n#     ## coalescent.sim args:\n#     n.ind = 100,\n#     n.snps = 10000, # gen.size\n#     # sim.by = \"locus\",\n#     n.subs = dist_0.05, # 15, # theta (*2)\n#     n.phen.subs = 15, # theta_p = NULL # 15\n#     n.snps.assoc = 10, #\n#     # assoc.option = \"all\",\n#     assoc.prob = NULL, #100, #  90, #\n#     grp.min = 0.25,\n#     s = 30,\n#     af = 10,\n#     coaltree = FALSE,\n# \n#     ## treeWAS args:\n#     ## RUNNING ALL OF THESE OPTIONS (FOR NOW):\n#     p.value = 0.01, # REQUIRED FOR FISHER TEST\n#     #   p.value.correct = c(\"bonf\", \"fdr\", FALSE), #mt.correct = FALSE\n#     #   p.value.by = c(\"count\", \"density\"),\n#     sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL ###################### CAREFUL (10,000) !!\n#     treeWAS.test = c(\"terminal\", \"simultaneous\", \"subsequent\"), # \"score\"\n#     snps.reconstruction = \"parsimony\",\n#     phen.reconstruction = \"parsimony\"\n#   )\n# \n# ################################################################################################################################\n# \n# out <- foreach(n.reps=rep(1, 10), file.n=c(231:240), .packages=\"treeWAS\") %dopar%\n#   simTest(\n#     ## simTest args:\n#     set.number = 3,\n#     n.reps = n.reps,\n#     set.seed.as = \"file.number\",\n#     working.dir = \"/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims\",\n# \n#     ## data from file args:\n#     from.file = FALSE,\n#     file.n = file.n,\n#     Windows=TRUE,\n# \n#     ## coalescent.sim args:\n#     n.ind = 100,\n#     n.snps = 10000, # gen.size\n#     # sim.by = \"locus\",\n#     n.subs = dist_0.1, # 15, # theta (*2)\n#     n.phen.subs = 15, # theta_p = NULL # 15\n#     n.snps.assoc = 10, #\n#     # assoc.option = \"all\",\n#     assoc.prob = NULL, #100, #  90, #\n#     grp.min = 0.25,\n#     s = 30,\n#     af = 10,\n#     coaltree = FALSE,\n# \n#     ## treeWAS args:\n#     ## RUNNING ALL OF THESE OPTIONS (FOR NOW):\n#     p.value = 0.01, # REQUIRED FOR FISHER TEST\n#     #   p.value.correct = c(\"bonf\", \"fdr\", FALSE), #mt.correct = FALSE\n#     #   p.value.by = c(\"count\", \"density\"),\n#     sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL ###################### CAREFUL (10,000) !!\n#     treeWAS.test = c(\"terminal\", \"simultaneous\", \"subsequent\"), # \"score\"\n#     snps.reconstruction = \"parsimony\",\n#     phen.reconstruction = \"parsimony\"\n#   )\n# \n# ################################################################################################################################\n# \n# out <- foreach(n.reps=rep(1, 10), file.n=c(241:250), .packages=\"treeWAS\") %dopar%\n#   simTest(\n#     ## simTest args:\n#     set.number = 3,\n#     n.reps = n.reps,\n#     set.seed.as = \"file.number\",\n#     working.dir = \"/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims\",\n# \n#     ## data from file args:\n#     from.file = FALSE,\n#     file.n = file.n,\n#     Windows=TRUE,\n# \n#     ## coalescent.sim args:\n#     n.ind = 100,\n#     n.snps = 10000, # gen.size\n#     # sim.by = \"locus\",\n#     n.subs = 1, # 15, # theta (*2)\n#     n.phen.subs = 15, # theta_p = NULL # 15\n#     n.snps.assoc = 10, #\n#     # assoc.option = \"all\",\n#     assoc.prob = NULL, #100, #  90, #\n#     grp.min = 0.25,\n#     s = 30,\n#     af = 10,\n#     coaltree = FALSE,\n# \n#     ## treeWAS args:\n#     ## RUNNING ALL OF THESE OPTIONS (FOR NOW):\n#     p.value = 0.01, # REQUIRED FOR FISHER TEST\n#     #   p.value.correct = c(\"bonf\", \"fdr\", FALSE), #mt.correct = FALSE\n#     #   p.value.by = c(\"count\", \"density\"),\n#     sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL ###################### CAREFUL (10,000) !!\n#     treeWAS.test = c(\"terminal\", \"simultaneous\", \"subsequent\"), # \"score\"\n#     snps.reconstruction = \"parsimony\",\n#     phen.reconstruction = \"parsimony\"\n#   )\n#\n# ################################################################################################################################\n#\n# ################################################################################################################################\n\n\n\n#######################\n## NEW PARAMETER SET ##\n#######################\n\n\n################################################################################################################################\n\n################################################################################################################################\n#\n# out <- foreach(n.reps=rep(1, 10), file.n=c(251:260), .packages=\"treeWAS\") %dopar%\n#   simTest(\n#     ## simTest args:\n#     set.number = 3,\n#     n.reps = n.reps,\n#     set.seed.as = \"file.number\",\n#     working.dir = \"/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims\",\n# \n#     ## data from file args:\n#     from.file = FALSE,\n#     file.n = file.n,\n#     Windows=TRUE,\n# \n#     ## coalescent.sim args:\n#     n.ind = 100,\n#     n.snps = 10000, # gen.size\n#     # sim.by = \"locus\",\n#     n.subs = dist_0, # 15, # theta (*2)\n#     n.phen.subs = 15, # theta_p = NULL # 15\n#     n.snps.assoc = 10, #\n#     # assoc.option = \"all\",\n#     assoc.prob = NULL, #100, #  90, #\n#     grp.min = 0.25,\n#     s = 50,\n#     af = 10,\n#     coaltree = FALSE,\n# \n#     ## treeWAS args:\n#     ## RUNNING ALL OF THESE OPTIONS (FOR NOW):\n#     p.value = 0.01, # REQUIRED FOR FISHER TEST\n#     #   p.value.correct = c(\"bonf\", \"fdr\", FALSE), #mt.correct = FALSE\n#     #   p.value.by = c(\"count\", \"density\"),\n#     sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL ###################### CAREFUL (10,000) !!\n#     treeWAS.test = c(\"terminal\", \"simultaneous\", \"subsequent\"), # \"score\"\n#     snps.reconstruction = \"parsimony\",\n#     phen.reconstruction = \"parsimony\"\n#   )\n# \n# ################################################################################################################################\n# \n# out <- foreach(n.reps=rep(1, 10), file.n=c(261:270), .packages=\"treeWAS\") %dopar%\n#   simTest(\n#     ## simTest args:\n#     set.number = 3,\n#     n.reps = n.reps,\n#     set.seed.as = \"file.number\",\n#     working.dir = \"/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims\",\n# \n#     ## data from file args:\n#     from.file = FALSE,\n#     file.n = file.n,\n#     Windows=TRUE,\n# \n#     ## coalescent.sim args:\n#     n.ind = 100,\n#     n.snps = 10000, # gen.size\n#     # sim.by = \"locus\",\n#     n.subs = dist_0.01, # 15, # theta (*2)\n#     n.phen.subs = 15, # theta_p = NULL # 15\n#     n.snps.assoc = 10, #\n#     # assoc.option = \"all\",\n#     assoc.prob = NULL, #100, #  90, #\n#     grp.min = 0.25,\n#     s = 50,\n#     af = 10,\n#     coaltree = FALSE,\n# \n#     ## treeWAS args:\n#     ## RUNNING ALL OF THESE OPTIONS (FOR NOW):\n#     p.value = 0.01, # REQUIRED FOR FISHER TEST\n#     #   p.value.correct = c(\"bonf\", \"fdr\", FALSE), #mt.correct = FALSE\n#     #   p.value.by = c(\"count\", \"density\"),\n#     sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL ###################### CAREFUL (10,000) !!\n#     treeWAS.test = c(\"terminal\", \"simultaneous\", \"subsequent\"), # \"score\"\n#     snps.reconstruction = \"parsimony\",\n#     phen.reconstruction = \"parsimony\"\n#   )\n# \n# ################################################################################################################################\n# \n# out <- foreach(n.reps=rep(1, 10), file.n=c(271:280), .packages=\"treeWAS\") %dopar%\n#   simTest(\n#     ## simTest args:\n#     set.number = 3,\n#     n.reps = n.reps,\n#     set.seed.as = \"file.number\",\n#     working.dir = \"/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims\",\n# \n#     ## data from file args:\n#     from.file = FALSE,\n#     file.n = file.n,\n#     Windows=TRUE,\n# \n#     ## coalescent.sim args:\n#     n.ind = 100,\n#     n.snps = 10000, # gen.size\n#     # sim.by = \"locus\",\n#     n.subs = dist_0.05, # 15, # theta (*2)\n#     n.phen.subs = 15, # theta_p = NULL # 15\n#     n.snps.assoc = 10, #\n#     # assoc.option = \"all\",\n#     assoc.prob = NULL, #100, #  90, #\n#     grp.min = 0.25,\n#     s = 50,\n#     af = 10,\n#     coaltree = FALSE,\n# \n#     ## treeWAS args:\n#     ## RUNNING ALL OF THESE OPTIONS (FOR NOW):\n#     p.value = 0.01, # REQUIRED FOR FISHER TEST\n#     #   p.value.correct = c(\"bonf\", \"fdr\", FALSE), #mt.correct = FALSE\n#     #   p.value.by = c(\"count\", \"density\"),\n#     sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL ###################### CAREFUL (10,000) !!\n#     treeWAS.test = c(\"terminal\", \"simultaneous\", \"subsequent\"), # \"score\"\n#     snps.reconstruction = \"parsimony\",\n#     phen.reconstruction = \"parsimony\"\n#   )\n# \n# ################################################################################################################################\n# \n# out <- foreach(n.reps=rep(1, 10), file.n=c(281:290), .packages=\"treeWAS\") %dopar%\n#   simTest(\n#     ## simTest args:\n#     set.number = 3,\n#     n.reps = n.reps,\n#     set.seed.as = \"file.number\",\n#     working.dir = \"/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims\",\n# \n#     ## data from file args:\n#     from.file = FALSE,\n#     file.n = file.n,\n#     Windows=TRUE,\n# \n#     ## coalescent.sim args:\n#     n.ind = 100,\n#     n.snps = 10000, # gen.size\n#     # sim.by = \"locus\",\n#     n.subs = dist_0.1, # 15, # theta (*2)\n#     n.phen.subs = 15, # theta_p = NULL # 15\n#     n.snps.assoc = 10, #\n#     # assoc.option = \"all\",\n#     assoc.prob = NULL, #100, #  90, #\n#     grp.min = 0.25,\n#     s = 50,\n#     af = 10,\n#     coaltree = FALSE,\n# \n#     ## treeWAS args:\n#     ## RUNNING ALL OF THESE OPTIONS (FOR NOW):\n#     p.value = 0.01, # REQUIRED FOR FISHER TEST\n#     #   p.value.correct = c(\"bonf\", \"fdr\", FALSE), #mt.correct = FALSE\n#     #   p.value.by = c(\"count\", \"density\"),\n#     sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL ###################### CAREFUL (10,000) !!\n#     treeWAS.test = c(\"terminal\", \"simultaneous\", \"subsequent\"), # \"score\"\n#     snps.reconstruction = \"parsimony\",\n#     phen.reconstruction = \"parsimony\"\n#   )\n# \n# ################################################################################################################################\n# \n# out <- foreach(n.reps=rep(1, 10), file.n=c(291:300), .packages=\"treeWAS\") %dopar%\n#   simTest(\n#     ## simTest args:\n#     set.number = 3,\n#     n.reps = n.reps,\n#     set.seed.as = \"file.number\",\n#     working.dir = \"/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims\",\n# \n#     ## data from file args:\n#     from.file = FALSE,\n#     file.n = file.n,\n#     Windows=TRUE,\n# \n#     ## coalescent.sim args:\n#     n.ind = 100,\n#     n.snps = 10000, # gen.size\n#     # sim.by = \"locus\",\n#     n.subs = 1, # 15, # theta (*2)\n#     n.phen.subs = 15, # theta_p = NULL # 15\n#     n.snps.assoc = 10, #\n#     # assoc.option = \"all\",\n#     assoc.prob = NULL, #100, #  90, #\n#     grp.min = 0.25,\n#     s = 50,\n#     af = 10,\n#     coaltree = FALSE,\n# \n#     ## treeWAS args:\n#     ## RUNNING ALL OF THESE OPTIONS (FOR NOW):\n#     p.value = 0.01, # REQUIRED FOR FISHER TEST\n#     #   p.value.correct = c(\"bonf\", \"fdr\", FALSE), #mt.correct = FALSE\n#     #   p.value.by = c(\"count\", \"density\"),\n#     sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL ###################### CAREFUL (10,000) !!\n#     treeWAS.test = c(\"terminal\", \"simultaneous\", \"subsequent\"), # \"score\"\n#     snps.reconstruction = \"parsimony\",\n#     phen.reconstruction = \"parsimony\"\n#   )\n#\n# ################################################################################################################################\n#\n# ################################################################################################################################\n\n\n\n## AT THE END, RUN:\n# stopImplicitCluster()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n###############################################################################################################################################\n\n###############################################################################################################################################\n\n###############################################################################################################################################\n\n\n\n\n\n## ERROR:\n## After treeWAS snps sim done. -->\n## Error in `rownames<-`(`*tmp*`, value = c(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\",  :\n## length of 'dimnames' [1] not equal to array extent\n\n## old simTest args:\n# set.number = 1,\n# n.reps = 1, set.seed.as = \"file.number\",\n# p.value = 0.0001, n.phen.subs=15,\n# n.snps.assoc=NULL, assoc.prob = 90\n\n\n\n## new args:\n# dist_0.05 <- get(load(\"E:/treeWAS_misc/SimBac/CFML_R_0.05_dist.Rdata\"))\n# dist_0.05 <- get(load(\"C:/Users/Caitlin/treeWAS/misc/CFML_R_0.05_dist.Rdata\"))\n# barplot(dist_0.05, names.arg=c(1:length(dist_0.05)))\n\n## simTest args:\n# set.number = 1\n# n.reps = 1\n# set.seed.as = \"file.number\"\n# working.dir = \"/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims\"\n#\n# ## data from file args:\n# from.file = FALSE\n# file.n = NULL\n# Windows = TRUE\n#\n# ## coalescent.sim args:\n# n.ind = 100\n# n.snps = 10000 # 10000 # gen.size\n# # sim.by = \"locus\"\n# n.subs =  dist_0 # 1 #theta (*2)\n# n.phen.subs = 15 #theta_p = NULL\n# n.snps.assoc = 10 # = 0\n# # assoc.option = \"all\"\n# assoc.prob = 100 # 90 # 100\n# grp.min = 0.25\n# s = 0.2\n# af = 10\n# coaltree = FALSE\n#\n# ## treeWAS args:\n# p.value = 0.01\n# # p.value.correct = c(\"bonf\", \"fdr\", FALSE) #mt.correct = FALSE\n# # p.value.by = c(\"count\", \"density\")\n# sim.n.snps = 100000 # 100000 # 10*n.snps #sim.gen.size = NULL\n# treeWAS.test = c(\"terminal\", \"simultaneous\", \"subsequent\") # \"score\"\n# snps.reconstruction = \"parsimony\"\n# phen.reconstruction = \"parsimony\"\n\n\n\n\n########################################################################\n\n###################\n## DOCUMENTATION ##\n###################\n\n#' Simulation Testing.\n#'\n#' Generic simulation-testing function used to validate treeWAS performance on simulated datasets. Not designed for public use!\n#'\n#' @param test A character string or vector containing one or more of the following available tests of association:\n#' \"terminal\", \"simultaneous\", \"subsequent\", \"cor\", \"fisher\". By default, the first three tests are run.\n#' See details for more information on what these tests do and when they may be appropriate.\n#'\n#' @author Caitlin Collins \\email{caitiecollins@@gmail.com}\n#' @export\n#' @examples\n#'\n#' ## load data\n#' data(dist)\n#' str(dist)\n#'\n#' ## basic use of fn\n#' fn(arg1, arg2)\n#'\n#' #' ## more elaborate use of fn\n#' fn(arg1, arg2)\n#'\n#' @import adegenet ape phangorn\n#' @importFrom Hmisc all.is.numeric\n#'\n#' @export\n\n########################################################################\n\n\nsimTest <- function(\n\n  ## simTest args:\n  set.number = 1,\n  n.reps = 1,\n  set.seed.as = \"file.number\",\n  working.dir = \"/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims\",\n\n  ## data from file args:\n  from.file = FALSE,\n  file.n = NULL,\n  Windows = FALSE,\n\n  ## coalescent.sim args:\n  n.ind = 100,\n  n.snps = 10000, # gen.size\n  # sim.by = \"locus\",\n  n.subs = 1, # theta (*2)\n  n.phen.subs = 15, # theta_p = NULL\n  n.snps.assoc = 10, # = 0\n  # assoc.option = \"all\",\n  assoc.prob = 90, # 100 (set2)\n  grp.min = 0.25,\n  s = 2,\n  af = 10,\n  coaltree = TRUE,\n\n  ## treeWAS args:\n  ## RUNNING ALL OF THESE OPTIONS (FOR NOW):\n  p.value = 0.01, # REQUIRED FOR FISHER TEST\n  #   p.value.correct = c(\"bonf\", \"fdr\", FALSE), #mt.correct = FALSE\n  #   p.value.by = c(\"count\", \"density\"),\n  sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL\n  treeWAS.test = c(\"terminal\", \"simultaneous\", \"subsequent\"), # \"score\"\n  snps.reconstruction = \"parsimony\",\n  phen.reconstruction = \"parsimony\"\n\n){\n\n  ####################\n  ## load packages: ##\n  ####################\n  # require(adegenet)\n  # require(phangorn)\n  # require(ape)\n  # # require(ade4) #?\n\n  #################################################\n  ## set working directory & source required fns ##\n  #################################################\n  # setwd(\"C:/Users/Caitlin\")\n  # source(\"./adegenet/R/sequences.R\") ## need for DNAbin2genind fn\n\n  #   setwd(\"C:/Users/Caitlin/treeWAS\")\n  #   source(\"./misc/coalescent.sim.R\")\n  #   source(\"./pkg/R/tree.sim.R\")\n  #   source(\"./pkg/R/treeWAS.R\")\n\n\n  ###############################################\n  ## make lists in which to store all ###########\n  ## data and output from each of n.reps runs: ##\n  ###############################################\n  SNPS <- PHEN <- PHEN.PLOT.COL <-  TREE <- OUT <- RES <-\n    FISHER.RESULTS <- PLINK.RESULTS <- PCA.RESULTS <- DAPC.RESULTS <- CMH.RESULTS <-\n    ARGS <- PERFORMANCE <- SCORE3 <- list()\n  ## and make lists for saving filenames\n  filename.snps <- filename.phen <- filename.phen.plot.col <- filename.tree <-\n    filename.out <- filename.res <- filename.fisher.results <-\n    filename.plink.results <- filename.pca <- filename.dapc <- filename.cmh <-\n    filename.args <- filename.performance <- filename.score3 <-\n    filename.plot <- filename.tree.plot <- list()\n\n\n  ####################################################################################################################################\n  ################################### *** DEFINE ARGUMENTS | SET *** #################################################################\n  ####################################################################################################################################\n\n  ## coalescent.sim args:\n  if(missing(n.reps)) n.reps <- 1\n  if(missing(set.seed.as)) set.seed.as <- \"file.number\"\n  if(missing(n.ind)) n.ind <- 100\n  if(missing(n.snps)) n.snps <- 10000\n  if(missing(n.subs)) n.subs <- 1\n  if(missing(n.phen.subs)) n.phen.subs <- NULL\n  if(missing(n.snps.assoc)) n.snps.assoc <- 10\n  if(missing(assoc.prob)) assoc.prob <- 90\n  if(missing(grp.min)) grp.min <- 0.25\n\n  ## treeWAS args:\n  #   if(missing(p.value)) p.value <- 0.001\n  #   if(missing(p.value.correct)) p.value.correct <- c(\"bonf\", \"fdr\", FALSE)\n  #   if(missing(p.value.by)) p.value.by <- c(\"count\", \"density\")\n  if(missing(sim.n.snps)) sim.n.snps <- 100000\n  if(missing(treeWAS.test)) treeWAS.test <- c(\"terminal\", \"simultaneous\", \"subsequent\")\n  if(missing(snps.reconstruction)) snps.reconstruction <- \"parsimony\"\n  if(missing(phen.reconstruction)) phen.reconstruction <- \"parsimony\"\n\n  ## ensure phen is NULL (will be generated by sim)\n  phen <- NULL\n\n  ###########\n  ## SET 1 ##\n  ###########\n  if(set.number == 1){\n    ### ensure n.phen.subs is NULL\n    if(!is.null(n.phen.subs)) n.phen.subs <- 15\n    assoc.prob <- 90\n  } # end set 1\n\n  ###########\n  ## SET 2 ##\n  ###########\n  if(set.number == 2){\n    ## ensure n.phen.subs is NOT null\n    if(is.null(n.phen.subs)) n.phen.subs <- 15\n    assoc.prob <- 100\n  } # end set 2\n\n  ###########\n  ## SET 3 ##\n  ###########\n  if(set.number == 3){\n    ## n.phen.subs now being used again in snp.sim.Q\n    if(is.null(n.phen.subs)) n.phen.subs <- 15\n    ## ensure 10 associated SNPs\n    if(is.null(n.snps.assoc)) n.snps.assoc <- 10\n    assoc.prob <- 90\n  } # end set 3\n\n  ###########\n  ## SET 4 ##\n  ###########\n  if(set.number == 4){\n    ## ensure n.phen.subs is NOT null\n    if(is.null(n.phen.subs)) n.phen.subs <- 15\n    if(!is.null(phen)) phen <- NULL\n    ## ensure MULTIPLE associated SNPs\n    if(is.null(n.snps.assoc)) n.snps.assoc <- 10\n    if(is.null(assoc.prob)) assoc.prob <- 90\n  } # end set 4\n\n\n\n  args <- snps.assoc <- NULL\n  sim.n.snps.ori <- sim.n.snps\n\n  ## change working dir if WINDOWS:\n  if(Windows == TRUE){\n    working.dir <- c(\"C:/Cait 2016/Work/Xavier/Sims\")\n  }\n\n  ##############################################################################################################################\n  ########################################### *** DATA FROM FILE *** ###########################################################\n  ##############################################################################################################################\n\n  if(from.file==TRUE){\n\n    ###################################################\n    ## READING IN DATA (OPTION for POST HOC TESTING) ##\n    ###################################################\n\n    ## Get from file: snps, phen, tree, performance, snps.assoc\n\n    if(is.null(file.n)) stop(\"Use argument file.n\n                             to specify which files to read in.\")\n\n    ## get n.reps for main for loop\n    n.reps <- length(file.n)\n\n    ## set working directory for the set specified\n    wd <- paste(working.dir, \"/\", \"set\", set.number, sep=\"\")\n    setwd(wd)\n\n    ## for loop:\n    for(i in 1:n.reps){\n\n      ## get filename prefix for this round of this set:\n      filename.prefix <- paste(\"set\", set.number, \"_\", file.n[i], \"_\", sep=\"\")\n\n      ## get snps\n      filename <- paste(\"./\", filename.prefix, \"snps.Rdata\", sep=\"\")\n      snps <- get(load(filename))\n\n      ## get phen\n      filename <- paste(\"./\", filename.prefix, \"phen.Rdata\", sep=\"\")\n      phen <- get(load(filename))\n\n      ## get tree\n      filename <- paste(\"./\", filename.prefix, \"tree.Rdata\", sep=\"\")\n      tree <- get(load(filename))\n\n      ## get performance\n      filename <- paste(\"./\", filename.prefix, \"performance.Rdata\", sep=\"\")\n      performance <- get(load(filename))\n\n      ## get snps.assoc (if any)\n      snps.assoc <- NULL\n      if(!is.null(performance$snps.assoc)) snps.assoc <- performance$snps.assoc\n\n    } # end for loop\n\n\n  } # end from.file == TRUE\n\n\n  ##############################################################################################################################\n\n  ##############\n  ## FOR LOOP ##\n  ##############\n\n  for(i in 1:n.reps){\n\n    wd <- paste(working.dir, \"/\", \"set\", set.number, sep=\"\")\n    setwd(wd)\n\n    ## get file number:\n    if(from.file==FALSE){\n      ## get number for group | number of set3_snps already in file:\n      number <- (length(grep(\"_snps\", dir(\"./\")))+1)\n\n      ## Unless file.n is provided as argument!\n      if(!is.null(file.n)){\n        if(!is.null(file.n[i])){\n          number <- file.n[i]\n        }\n      }\n\n    }else{\n      number <- file.n[i]\n    }\n\n\n    ################\n    ## dummy plot ##\n    ################\n    ## to give user indication of what round of simTest.set3 we are on:\n    round.marker <- paste(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nROUND\", i,\n                          \"\\nset\", set.number,\n                          \"\\n(file number\", number, \")\",\n                          sep=\" \")\n    plot.new()\n    title(round.marker, adj=0.5)\n\n    ###############\n    ## set seed? ##\n    ###############\n    if(!is.null(set.seed.as)){\n      if(set.seed.as == \"file.number\"){\n        seed <- number\n        set.seed(seed)\n      }else{\n        if(length(set.seed.as) == n.reps){\n          seed <- set.seed.as[i]\n          set.seed(seed)\n        }else{\n          warning(\"seed is not of length n.reps; seed will not be set.\")\n          seed <- NULL\n        }\n      }\n    }\n    # end set.seed.as\n\n    ##############################################################################################################################\n    ################################################ *** COALESCENT.SIM *** ######################################################\n    ##############################################################################################################################\n\n    if(from.file==FALSE){\n\n      ########################\n      ## get PHEN for SET 1 ##\n      ########################\n      #       if(set.number == 1){\n      #         ## simulate phen first, by random sampling ##\n      #         ## enforce even split of cases and controls??\n      #         #phen <- sample(c(rep(\"A\", floor(n.ind/2)), rep(\"B\", ceiling(n.ind/2)), replace=FALSE))\n      #         ## or just draw phen by purely random sampling...?\n      #         phen <- sample(c(\"A\", \"B\"), n.ind, replace=TRUE)\n      #         phen <- as.factor(phen)\n      #       }else{\n      #         phen <- NULL\n      #       }\n\n      ############################\n      ## simulate data and tree ##\n      ############################\n\n      ## TESTING -- used to be phen = phen (but Hyp: multiple rounds causing problems--if so, could rename to phen.prior, eg.)\n      ## CHECK:\n      # print(\"NUMBER\"); print(number)\n      # print(\"PHEN BEFORE\"); print(phen)\n\n      gc()\n\n      filename.tree.plot[[i]] <- paste(\"./set\", set.number, \"_\", number, \"_tree_plot\", \".pdf\", sep=\"\")\n\n      filename.panel.plot <- paste(\"./set\", set.number, \"_\", number, \"_panel_plot\", \".pdf\", sep=\"\")\n\n      foo <- coalescent.sim(n.ind = n.ind,\n                            n.snps = n.snps,\n                            n.subs = n.subs,\n                            n.snps.assoc = n.snps.assoc,\n                            assoc.prob = assoc.prob,\n                            n.phen.subs = n.phen.subs,\n                            phen = NULL,\n                            plot = TRUE,\n                            heatmap = FALSE,\n                            reconstruct = FALSE,\n                            dist.dna.model = \"JC69\",\n                            row.names = NULL,\n                            grp.min = grp.min,\n                            coaltree = coaltree,\n                            set=set.number,\n                            s = s,\n                            af = af,\n                            filename=list(filename.tree.plot[[i]],\n                                          filename.panel.plot),\n                            seed = seed)\n\n\n      print(\"coalescent done\")\n      gc()\n      ####################################\n      ## isolate common elements of foo ##\n      ####################################\n      snps <- snps.ori <- snps.ori.ori <- foo$snps\n      if(!is.null(n.snps.assoc)) if(n.snps.assoc > 0){\n        snps.assoc <- snps.assoc.ori <- snps.assoc.loci <- foo$snps.assoc\n      }else{\n        snps.assoc <- NULL\n      }\n      phen <- phen.ori <- phen.ori.ori <- foo$phen\n      tree <- tree.ori <- foo$tree\n      phen.plot.col <- foo$phen.plot.col\n\n      ## snps names:\n      if(is.null(colnames(snps))) colnames(snps) <- c(1:ncol(snps))\n      snps.names <- colnames(snps)\n\n      ##########################################\n      ## isolate set-specific elements of foo ##\n      ##########################################\n      # if(is.null(phen)) phen <- foo$phen\n      ## MAKE SURE PHEN IS IN CORRECT ORDER OF INDS NOT IN LEAF ORDER!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\n      ######################\n      ## save plot as pdf ##\n      ######################\n      ## CHECK-- Not sure, but may be safer to write this using pdf() instead of dev.copy ~ treeWAS plots...?\n      # filename.tree.plot[[i]] <- paste(\"./set\", set.number, \"_\", number, \"_tree_plot\", \".pdf\", sep=\"\")\n      # dev.copy(pdf, file=filename.tree.plot[[i]], width=7, height=11) # , pointsize=1\n      # dev.off()\n\n\n    }# end from.file == FALSE\n\n\n\n    ##############################################################################################################################\n    ############################################### *** treeWAS *** ##############################################################\n    ##############################################################################################################################\n\n    sim.n.snps.ori <- sim.n.snps\n    if(is.null(sim.n.snps)) sim.n.snps <- ncol(snps)*10\n\n    #######################\n    ## save treeWAS plot ##\n    #######################\n    ## NB: plot.png will not be viewable until fn has finished running...\n    filename.plot[[i]] <- list()\n    for(t in 1:length(treeWAS.test)){\n      ## Save only one plot per test:\n      # filename.plot[[i]][[t]] <- paste(\"./set\",\n      #                             set.number,\n      #                             \"_\", number,\n      #                             \"_plot_\",\n      #                             treeWAS.test[t],\n      #                             \".pdf\", sep=\"\")\n\n      ## Save both Manhattan and Hist per test:\n      filename.plot[[i]][[t]] <- c(## manhattan:\n        paste(\"./set\",\n              set.number,\n              \"_\", number,\n              \"_plot_manhattan_\",\n              treeWAS.test[t],\n              \".pdf\", sep=\"\"),\n\n        ## null.dist:\n        paste(\"./set\",\n              set.number,\n              \"_\", number,\n              \"_plot_\",\n              treeWAS.test[t],\n              \".pdf\", sep=\"\")\n      )\n    }\n\n    #################\n    ## RUN treeWAS ##\n    #################\n    print(\"treeWAS started\")\n    gc()\n    set.seed(seed)\n\n    syst.time <- system.time( # 341\n      out <- treeWAS(snps = snps,\n                     phen = phen,\n                     n.subs = NULL,\n                     tree = tree,\n                     dist.dna.model = \"JC69\",\n                     plot.tree = FALSE,\n                     test = treeWAS.test,\n                     p.value = p.value,\n                     p.value.correct = p.value.correct,\n                     p.value.by = p.value.by,\n                     sim.n.snps = sim.n.snps,\n                     n.reps = 1,\n                     plot.manhattan = TRUE,\n                     plot.null.dist = TRUE,\n                     plot.dist = FALSE,\n                     snps.assoc = snps.assoc,\n                     snps.reconstruction = \"parsimony\",\n                     phen.reconstruction = \"parsimony\",\n                     filename.plot=filename.plot[[i]])\n    )\n\n    print(\"treeWAS done\")\n    gc()\n\n    # i <- 1 #####\n\n    #####\n\n    # dev.copy(pdf, file=filename.plot[[i]], width=7, height=11) # , pointsize=12\n    # dev.off()\n\n    ##################################\n    ## isolate df of Sig SNPs found ##\n    ##################################\n    res.complete <- out\n    res <- out$res\n\n    treeWAS.all <- out$treeWAS.combined ## also stored in res.complete, which gets saved later.\n\n    score3 <- out$SCORE3\n\n    ##############\n    ## get call ##\n    ##############\n    ## get arguments inputed to simTest for this round\n    #call <- match.call()\n\n    ## TO DO: update arguments to contain actual values used\n    ## (ie. return actual value of seed instead of set.seed.as)\n    ## (eg. if n.phen.subs was NULL and got set to 25 due to set.number,\n    ## report 25)\n\n    args <- mget(names(formals()), sys.frame(sys.nframe()))\n\n    #     args <- list(set.number = 1, n.reps = 1, set.seed.as = \"file.number\",\n    #                  working.dir = \"/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims\",\n    #                  from.file = FALSE, file.n = NULL, Windows = TRUE, n.ind = 100,\n    #                  n.snps = 10000, n.subs = 1, n.phen.subs = 15, n.snps.assoc = 10,\n    #                  assoc.prob = 90, grp.min = 0.25, s = 10, af = 5, coaltree = TRUE,\n    #                  p.value = 0.01, sim.n.snps = 1e+05, treeWAS.test = c(\"terminal\",\n    #                                                                       \"simultaneous\", \"subsequent\"),\n    #                  snps.reconstruction = \"parsimony\",\n    #                  phen.reconstruction = \"parsimony\")\n\n    # args <- list(set.number,\n    #              seed,\n    #              n.ind,\n    #              n.snps,\n    #              n.subs,\n    #              n.phen.subs,\n    #              n.snps.assoc,\n    #              assoc.prob,\n    #              sim.n.snps,\n    #              treeWAS.test\n    # )\n    #\n    # names(args) <- c(\"set.number\",\n    #                  \"seed\",\n    #                  \"n.ind\",\n    #                  \"n.snps\",\n    #                  \"n.subs\",\n    #                  \"n.phen.subs\",\n    #                  \"n.snps.assoc\",\n    #                  \"assoc.prob\",\n    #                  \"sim.n.snps\",\n    #                  \"treeWAS.test\"\n    # )\n\n\n    ###########################################################################################################################\n    ############################################# *** FISHER TEST *** #########################################################\n    ###########################################################################################################################\n\n    #############################\n    ## RUN FISHER'S EXACT TEST ##\n    #############################\n\n    ## NOTE--we will run and save all 3 (uncorrected, Bonferroni-corrected, and FDR-corrected),\n    ######### BUT we will only calculate performance metrics for the latter two (or only FDR??)...\n\n    ## RUN TEST\n    pval.fisher <- sapply(c(1:ncol(snps)),\n                          function(e) fisher.test(snps[,e], y=phen,\n                                                  alternative=\"two.sided\")$p.value)\n    ## two.sided bc we want to know if\n    ## inds w the phen have EITHER more 1s or 0s\n\n    p.thresh <- p.value\n\n    ## WITHOUT CORRECTION, identify sig.snps\n    fisher.snps.uncorr <- colnames(snps)[which(pval.fisher < p.thresh)]\n    n.fisher.snps.uncorr <- length(fisher.snps.uncorr)\n\n    ## w BONFERRONI CORRECTION, identify sig.snps\n    pval.bonf <- p.adjust(pval.fisher, method=\"bonferroni\", n=length(pval.fisher))\n    fisher.snps.bonf <- colnames(snps)[which(pval.bonf < p.thresh)]\n    n.fisher.snps.bonf <- length(fisher.snps.bonf)\n\n    ## w FDR CORRECTION, identify sig.snps\n    pval.fdr <- p.adjust(pval.fisher, method=\"fdr\", n=length(pval.fisher))\n    fisher.snps.fdr <- colnames(snps)[which(pval.fdr < p.thresh)]\n    n.fisher.snps.fdr <- length(fisher.snps.fdr)\n\n    ## CONVERT 0-LENGTH RESULTS TO NULL\n    if(length(fisher.snps.uncorr) == 0) fisher.snps.uncorr <- NULL\n    if(length(fisher.snps.bonf) == 0) fisher.snps.bonf <- NULL\n    if(length(fisher.snps.fdr) == 0) fisher.snps.fdr <- NULL\n\n    ## STORE FISHER TEST RESULTS ##\n    fisher.results <- list(pval.fisher, fisher.snps.uncorr, fisher.snps.bonf, fisher.snps.fdr)\n    names(fisher.results) <- c(\"pval.fisher\", \"fisher.snps.uncorr\", \"fisher.snps.bonf\", \"fisher.snps.fdr\")\n\n    ## end fisher tests\n\n\n    ###########################################################################################################################\n    ################################################ *** PLINK  *** ###########################################################\n    ###########################################################################################################################\n\n\n    ###################\n    ## RUNNING PLINK ##\n    ###################\n\n    ## Set working directory to run plink program\n    if(Windows == FALSE){\n      setwd(\"/media/caitiecollins/88CC9BCECC9BB4C2/Program Files/plink-1.07-dos\")\n    }else{\n      setwd(\"C:/Program Files/plink-1.07-dos\")\n    }\n    plink.wd <- getwd()\n    # setwd(plink.wd)\n\n    #################\n    ## Handle DATA ##\n    #################\n\n    ## STORE ORIGINAL DATA FOR LATER ##\n    snps.ori <- snps.ori.ori\n    phen.ori <- phen.ori.ori\n\n    #     #######################\n    #     ## from.file = FALSE ##\n    #     #######################\n    #     if(from.file == FALSE){\n\n    ## If data was created during THIS round of simTest...\n\n    ###########################\n    ## CONVERT AND SAVE DATA ##\n    ###########################\n\n    ## set working directory for saving\n    dat.wd <- paste(working.dir, \"/set\", set.number, \"/\", sep=\"\")\n    setwd(dat.wd)\n\n    ##################################\n    ## convert snps --> ped format: ##\n    ##################################\n\n    ## PED FORMAT: ##\n    ## 6 \"MANDATORY\" COLUMNS first:\n    ## FamilyID, IndividualID, PaternalID, MaternalID, Sex, Phenotype\n    #### ... EXCLUDE OTHER \"mandatory\" columns w PLINK commands\n    #### --> (IndividualID, Phenotype)\n    ## 7-to-p: GENOTYPE COLUMNS\n    ## NO HEADER ROW (belongs in .MAP file)\n\n    ## SNPs can NOT be 0 --> convert from 0/1 to 1/2:\n    snps <- snps+1\n    row.names(snps) <- paste(\"ind\", row.names(snps), sep=\".\")\n    ## save row and column names for elsewhere:\n    individualID <- row.names(snps)\n    loci.names <- colnames(snps)\n\n    ## convert to matrix:\n    snps <- matrix(snps, byrow=FALSE, ncol=ncol(snps))\n    ## Replace every other column with a copy of the column before it:\n    ## NOTE--THIS MAY CHANGE (ie. IF WORKING INSTEAD WITH DATA AS MT DNA....)\n    #snps[,seq(2, ncol(snps), 2)] <- snps[,seq(1, ncol(snps), 2)]\n    ## DUPLICATE columns:\n    snps.ori <- snps\n    snps.new <- matrix(NA, nrow=nrow(snps.ori), ncol=2*ncol(snps.ori))\n    snps.new[, seq(1, 2*ncol(snps.ori), 2)] <- snps.ori\n    snps.new[, seq(2, 2*ncol(snps.ori), 2)] <- snps.ori\n    snps <- snps.new\n\n    ## recode phen: S/A as 0, R/B as 1:\n    phen <- as.character(phen)\n    # replace phen coding w 1/2:\n    phen <- replace(phen, which(phen %in% c(\"R\", \"B\", \"1\")), 2)\n    phen <- replace(phen, which(phen %in% c(\"S\", \"A\", \"0\")), 1)\n    # phen <- as.numeric(phen) #?\n    # names(phen) <- names(phen.ori) #?\n\n    ## bind individualID, phen, snps\n    dat <- cbind(individualID, phen, snps)\n    colnames(dat) <- NULL\n\n    ped <- dat\n\n    ## get filename\n    uniqueID <- paste(\"set\", set.number, \"_\", number, sep=\"\")\n    filename <- paste(\"./\", uniqueID, \"_ped.Rdata\", sep=\"\")\n\n    ## save dat.ped as Rdata\n    save(ped, file=filename)\n    #ped <- get(load(\"C:/Cait 2012/Work/Xavier/Sims/set3/set3_1_ped.Rdata\"))\n\n    ## save as text!\n    #ped <- dat\n    if(Windows == FALSE){\n      filename <- paste(\"/media/caitiecollins/88CC9BCECC9BB4C2/PLINK/\", uniqueID, \".txt\", sep=\"\")\n    }else{\n      filename <- paste(\"C:/PLINK/\", uniqueID, \".txt\", sep=\"\")\n    }\n    write.table(ped, file=filename, quote=FALSE, row.names=FALSE, col.names=FALSE)\n\n    ## Do NOT save as .PED\n    ## convert from text to PED!!\n\n    ## UHOH -- STOPPED HERE -- SHELL COMMAND DOESNT SEEM TO BE WORKING FROM LINUX!!!!!!!!!!!!!!!!!!\n    ## SYSTEM COMMAND NOT READING FILE NAMES CORRECTLY....????????????????///\n\n    #     filename.ori <- paste(\"\\\\media\\\\caitiecollins\\\\88CC9BCECC9BB4C2\\\\PLINK\\\\\", uniqueID, \".txt\", sep=\"\")\n    #     filename.new <- paste(\"\\\\media\\\\caitiecollins\\\\88CC9BCECC9BB4C2\\\\PLINK\\\\\", uniqueID, \".ped\", sep=\"\")\n\n    if(Windows == FALSE){\n      filename.ori <- paste(\"/media/caitiecollins/88CC9BCECC9BB4C2/PLINK/\", uniqueID, \".txt\", sep=\"\")\n      filename.new <- paste(\"/media/caitiecollins/88CC9BCECC9BB4C2/PLINK/\", uniqueID, \".ped\", sep=\"\")\n      command <- paste(\"mv\", filename.ori, filename.new, sep=\" \")\n    }else{\n      filename.ori <- paste(\"C:\\\\PLINK\\\\\", uniqueID, \".txt\", sep=\"\")\n      filename.new <- paste(\"C:\\\\PLINK\\\\\", uniqueID, \".ped\", sep=\"\")\n      command <- paste(\"move\", filename.ori, filename.new, sep=\" \")\n    }\n\n    ## run command\n    if(Windows == FALSE){\n      system(command)\n    }else{\n      shell(command)\n    }\n\n\n    ####################################\n    ## convert snp meta-data --> .map ##\n    ####################################\n\n    ## MAP format: ##\n    ## EACH LINE of a .map file describes a SINGLE marker.\n    ## Contains 4 \"MANDATORY\" COLUMNS:\n    ## Chromosome, rs#/SNP identifier, (Genetic distance), Base-pair position.\n\n\n    ## loci.names:\n    ## SHOULD BE ONE NAME PER SITE (ie. PER TWO LOCI): ie. L001, NOT L001.1, L001.2 !!!!\n    ## remove last TWO characters (ie. decimal and trailing digit):\n    #       loci.names <- substr(loci.names, 1, nchar(loci.names)-2)\n    #       ## keep only every other:\n    #       loci.names <- loci.names[seq(1, length(loci.names), 2)]\n    ## OR: # loci.names <- unique(loci.names)\n\n    ## make dummy variables for irrelevant fields:\n    chromosome <- rep(26, length(loci.names)) # 26 = human mitochondrial (haploid)\n    gen.dist <- rep(0, length(loci.names))\n    ## get base-pair posi (ie. loci name - L):\n    bp <- loci.names\n    bp <- as.numeric(gsub(\"L\", \"\", bp))\n    dat <- data.frame(chromosome, loci.names, gen.dist, bp)\n\n    ## as matrix, no header:\n    dat <- as.matrix(dat, byrow=FALSE, ncol=ncol(dat))\n    colnames(dat) <- NULL\n\n    map <- dat\n\n    ## get filename\n    uniqueID <- paste(\"set\", set.number, \"_\", number, sep=\"\")\n    filename <- paste(\"./\", uniqueID, \"_map.Rdata\", sep=\"\")\n\n    ## save dat.map as Rdata\n    save(map, file=filename)\n    #map <- get(load(\"C:/Cait 2012/Work/Xavier/Sims/set3/set3_1_map.Rdata\"))\n\n    ## save as text!\n    if(Windows == FALSE){\n      filename <- paste(\"/media/caitiecollins/88CC9BCECC9BB4C2/PLINK/\", uniqueID, \".txt\", sep=\"\")\n    }else{\n      filename <- paste(\"C:/PLINK/\", uniqueID, \".txt\", sep=\"\")\n    }\n    write.table(map, file=filename, quote=FALSE, row.names=FALSE, col.names=FALSE)\n\n    ## Do NOT save as .MAP\n    ## convert from text to MAP!!\n\n    #     filename.ori <- paste(\"C:\\\\PLINK\\\\\", uniqueID, \".txt\", sep=\"\")\n    #     filename.new <- paste(\"C:\\\\PLINK\\\\\", uniqueID, \".map\", sep=\"\")\n\n    if(Windows == FALSE){\n      filename.ori <- paste(\"/media/caitiecollins/88CC9BCECC9BB4C2/PLINK/\", uniqueID, \".txt\", sep=\"\")\n      filename.new <- paste(\"/media/caitiecollins/88CC9BCECC9BB4C2/PLINK/\", uniqueID, \".map\", sep=\"\")\n      command <- paste(\"mv\", filename.ori, filename.new, sep=\" \")\n    }else{\n      filename.ori <- paste(\"C:\\\\PLINK\\\\\", uniqueID, \".txt\", sep=\"\")\n      filename.new <- paste(\"C:\\\\PLINK\\\\\", uniqueID, \".map\", sep=\"\")\n      command <- paste(\"move\", filename.ori, filename.new, sep=\" \")\n    }\n\n    ## Run command\n    if(Windows == FALSE){\n      system(command)\n    }else{\n      shell(command)\n    }\n\n\n\n    ###### ###### ###### ######\n\n    #     }else{ # end from.file = FALSE\n    #\n    #       ######################\n    #       ## from.file = TRUE ##\n    #       ######################\n    #\n    #     } # end from.file = TRUE\n\n\n    ########## #################### ########## #################### #################### ########## ####################\n\n\n    #####################\n    ## GWAS with PLINK ##\n    #####################\n\n    ## set wd for PLINK program\n    setwd(plink.wd)\n\n    ## get filename\n    if(Windows == FALSE){\n      filename <- paste(\"\\\\media\\\\caitiecollins\\\\88CC9BCECC9BB4C2\\\\PLINK\\\\\", uniqueID, sep=\"\")\n    }else{\n      filename <- paste(\"C:\\\\PLINK\\\\\", uniqueID, sep=\"\")\n    }\n\n\n    ## inspect file?\n    command <- paste(\"plink --file \", filename, \" --no-fid --no-parents --no-sex --allow-no-sex\", sep=\"\")\n    #     ## Run command\n    #     if(Windows == FALSE){\n    #       system(command)\n    #     }else{\n    #       shell(command)\n    #     }\n\n    ## make a binary PED file ##\n    ## (provide the full path, not just the file name)\n    command <- paste(\"plink --file \", filename, \" --make-bed --no-fid --no-parents --no-sex --allow-no-sex --out \", filename, sep=\"\")\n\n    ## Run command\n    if(Windows == FALSE){\n      system(command)\n    }else{\n      shell(command)\n    }\n    ########################################################################################################################################\n    ## SYSTEM(COMMAND) FAILS HERE WITH THE FOLLOWING ERROR #################################################    ####    ####    ####    ####\n\n    # sh: 1: plink: not found\n\n    ## PROBABLY NEED TO FIND SOLN AND APPLY IT TO ALL PLINK-RELATED CODE, STARTING WELL ABOVE HERE....................\n    ####    ####    ####    ####    ####    ####    ####    ####    ####    ####    ####    ####    ####    ####    ####    ####    ####\n    ########################################################################################################################################\n\n    ## use --bfile to work with the BINARY file\n    # (same as --file, but loads the binary one and prints summary stats)\n    command <- paste(\"plink --bfile \", filename, \" --no-fid --no-parents --no-sex --allow-no-sex\", sep=\"\")\n\n    ## Run command\n    if(Windows == FALSE){\n      system(command)\n    }else{\n      shell(command)\n    }\n\n    #######################\n    ## basic association ##\n    #######################\n    ##--> 1df chi-square test\n\n    ## check freq of SNPs...?\n    command <- paste(\"plink --file \", filename, \" --no-fid --no-parents --no-sex --allow-no-sex --freq --out \", filename, sep=\"\")\n\n    ## Run command\n    if(Windows == FALSE){\n      system(command)\n    }else{\n      shell(command)\n    }\n\n    ## yay!\n    if(Windows == FALSE){\n      filename <- paste(\"/media/caitiecollins/88CC9BCECC9BB4C2/PLINK/\", uniqueID, \".frq\", sep=\"\")\n    }else{\n      filename <- paste(\"C:/PLINK/\", uniqueID, \".frq\", sep=\"\")\n    }\n    freq <- read.table(filename, header=TRUE)\n    #head(freq)\n\n    ## perform a basic association analysis on the disease trait for all single SNPs\n    if(Windows == FALSE){\n      filename <- paste(\"\\\\media\\\\caitiecollins\\\\88CC9BCECC9BB4C2\\\\PLINK\\\\\", uniqueID, sep=\"\")\n    }else{\n      filename <- paste(\"C:\\\\PLINK\\\\\", uniqueID, sep=\"\")\n    }\n    command <- paste(\"plink --bfile \",  filename, \" --assoc --counts --allow-no-sex --out \", filename, sep=\"\")\n\n    ## Run command\n    if(Windows == FALSE){\n      system(command)\n    }else{\n      shell(command)\n    }\n\n    ## to view the file you created, just read it in with R:\n    if(Windows == FALSE){\n      filename <- paste(\"/media/caitiecollins/88CC9BCECC9BB4C2/PLINK/\", uniqueID, \".assoc\", sep=\"\")\n    }else{\n      filename <- paste(\"C:/PLINK/\", uniqueID, \".assoc\", sep=\"\")\n    }\n    plink.res <- read.table(filename, header=TRUE)\n    # head(plink.res)\n\n\n    ## get p.vals\n    pval.plink.assoc <- plink.res$P\n\n    ## get sig ##\n\n    ## p.thresh:\n    p.thresh <- p.value # 0.05 # 0.01 # 0.001 # ??\n\n\n    ## Uncorrected ##\n    plink.assoc.snps.uncorr <- snps.names[which(pval.plink.assoc < p.thresh)]\n\n    ## Bonferonni ##\n    p.vals.bonf <- p.adjust(pval.plink.assoc, \"bonferroni\")\n    p.bonf <- which(p.vals.bonf < p.thresh)\n    plink.assoc.snps.bonf <- snps.names[p.bonf]\n\n    ## FDR ##\n    p.vals.fdr <- p.adjust(pval.plink.assoc, \"fdr\")\n    p.fdr <- which(p.vals.fdr < p.thresh)\n    plink.assoc.snps.fdr <- snps.names[p.fdr]\n\n    ## CONVERT 0-LENGTH RESULTS TO NULL\n    if(length(plink.assoc.snps.uncorr) == 0) plink.assoc.snps.uncorr <- NULL\n    if(length(plink.assoc.snps.bonf) == 0) plink.assoc.snps.bonf <- NULL\n    if(length(plink.assoc.snps.fdr) == 0) plink.assoc.snps.fdr <- NULL\n\n    ## STORE PLINK TEST RESULTS ##\n    plink.assoc.results <- list(pval.plink.assoc, plink.assoc.snps.uncorr, plink.assoc.snps.bonf, plink.assoc.snps.fdr)\n    names(plink.assoc.results) <- c(\"pval.plink.assoc\", \"plink.assoc.snps.uncorr\", \"plink.assoc.snps.bonf\", \"plink.assoc.snps.fdr\")\n\n    ############################################\n\n    ########################################################\n    ## association w control for genomic inflation factor ##\n    ########################################################\n    ##--> 1df chi-square test\n\n    ## perform a basic association analysis on the disease trait for all single SNPs\n    if(Windows == FALSE){\n      filename <- paste(\"\\\\media\\\\caitiecollins\\\\88CC9BCECC9BB4C2\\\\PLINK\\\\\", uniqueID, sep=\"\")\n    }else{\n      filename <- paste(\"C:\\\\PLINK\\\\\", uniqueID, sep=\"\")\n    }\n    command <- paste(\"plink --bfile \",  filename, \" --assoc --adjust --gc --counts --allow-no-sex --out \", filename, sep=\"\")\n\n    ## Run command\n    if(Windows == FALSE){\n      system(command)\n    }else{\n      shell(command)\n    }\n\n\n    ## to view the file you created, just read it in with R:\n    if(Windows == FALSE){\n      filename <- paste(\"/media/caitiecollins/88CC9BCECC9BB4C2/PLINK/\", uniqueID, \".assoc.adjusted\", sep=\"\")\n    }else{\n      filename <- paste(\"C:/PLINK/\", uniqueID, \".assoc.adjusted\", sep=\"\")\n    }\n    plink.res <- read.table(filename, header=TRUE)\n    # head(plink.res)\n    ## NOT SURE WHY, BUT THE \"UNADJ\" p-values and the \"GC\" p-values are the same\n    ## in this table (even though the \"UNADJ\" p-values are not actually the same\n    ## as those in the plink.res from the basic association test above,\n    ## AND, in this case, lambdaGC was 5.12 and the mean chi-squared was 4.63!!!!!)\n\n\n    ## get p.vals\n    pval.plink.assoc.gc <- plink.res$GC\n\n    ## REORDER!!! ##\n    ## NOTE: plink.gc returns results in order of SIGNIFICANCE!\n    pval.plink.assoc.gc <- pval.plink.assoc.gc[order(plink.res$SNP)]\n\n\n    ## get sig ##\n\n    ## p.thresh:\n    p.thresh <- p.value # 0.05 # 0.01 # 0.001 # ??\n\n\n    ## Uncorrected ##\n    plink.assoc.gc.snps.uncorr <- snps.names[which(pval.plink.assoc.gc < p.thresh)]\n\n    ## Bonferonni ##\n    p.vals.bonf <- p.adjust(pval.plink.assoc.gc, \"bonferroni\")\n    p.bonf <- which(p.vals.bonf < p.thresh)\n    plink.assoc.gc.snps.bonf <- snps.names[p.bonf]\n\n    ## FDR ##\n    p.vals.fdr <- p.adjust(pval.plink.assoc.gc, \"fdr\")\n    p.fdr <- which(p.vals.fdr < p.thresh)\n    plink.assoc.gc.snps.fdr <- snps.names[p.fdr]\n\n    ## CONVERT 0-LENGTH RESULTS TO NULL\n    if(length(plink.assoc.snps.uncorr) == 0) plink.assoc.gc.snps.uncorr <- NULL\n    if(length(plink.assoc.snps.bonf) == 0) plink.assoc.gc.snps.bonf <- NULL\n    if(length(plink.assoc.snps.fdr) == 0) plink.assoc.gc.snps.fdr <- NULL\n\n\n    ## STORE PLINK TEST RESULTS ##\n    plink.assoc.gc.results <- list(pval.plink.assoc.gc, plink.assoc.gc.snps.uncorr, plink.assoc.gc.snps.bonf, plink.assoc.gc.snps.fdr)\n    names(plink.assoc.gc.results) <- c(\"pval.plink.assoc.gc\", \"plink.assoc.gc.snps.uncorr\", \"plink.assoc.gc.snps.bonf\", \"plink.assoc.gc.snps.fdr\")\n\n\n    ############################################\n\n    ## STORE COMBINED PLINK RESULTS ##\n    plink.results <- list(plink.assoc.results,\n                          plink.assoc.gc.results)\n\n\n    ###########################################################################################################################\n    ################################################# ***   PCA   *** #########################################################\n    ###########################################################################################################################\n\n    #########\n    ## PCA ##\n    #########\n\n    ## STEPS: ##\n    ## (1) Run PCA\n    ## (2) Select sig. number of PCs (--> HOW??)\n    ## (3) Regress snps along sig residuals\n    ## (4) Run assoc test on adjusted snps dataset.\n\n    ## (Below: taken from Glasgow/practical/practical-GWAS_before_cuts.Rnw ~ practical-GWAS_day4.pdf)\n\n    print(\"PCA started\")\n\n    ## get snps:\n    snps <- snps.ori.ori\n    phen <- phen.ori.ori\n    if(is.null(colnames(snps))) colnames(snps) <- c(1:ncol(snps))\n\n    ## run PCA: ##\n    ## Keep only n.PCs significant axes:\n    n.PCs <- 5\n    pca1 <- dudi.pca(snps, scale=FALSE, scannf=FALSE, nf=n.PCs)\n\n    ## Identify main pop clusters: ##\n    set.seed(seed)\n    grp <- find.clusters(snps, n.pca=n.PCs, choose.n.clust=FALSE, max.n.clust=(n.PCs + 1)) # pca.select=\"percVar\", perc.pca=60,\n    pop <- grp$grp # gives same result as cutree(clust, k=6)\n    n.grp <- length(levels(pop))\n\n    ## CHECK-- ensure no populations contain only 1 individual:\n    ## (1) reduce max.n.clust by 1:\n    if(any(table(pop) < 2)){\n      max.k <- n.PCs\n      set.seed(seed)\n      grp <- find.clusters(snps, n.pca=n.PCs, choose.n.clust=FALSE, max.n.clust=max.k) # pca.select=\"percVar\", perc.pca=60,\n      pop <- grp$grp # gives same result as cutree(clust, k=6)\n      n.grp <- length(levels(pop))\n\n      ## (2) repeat by re-setting seed with same reduced max.n.clust\n      seed.new <- seed+1\n      counter <- 0\n      while(any(table(pop) < 2)){\n        if(counter > 5){\n          max.k <- max.k - 1\n          counter <- 0\n        }\n        set.seed(seed.new)\n        grp <- find.clusters(snps, n.pca=n.PCs, choose.n.clust=FALSE, max.n.clust=max.k) # pca.select=\"percVar\", perc.pca=60,\n        pop <- grp$grp # gives same result as cutree(clust, k=6)\n        n.grp <- length(levels(pop))\n        seed.new <- seed.new+1\n        counter <- counter+1\n      } # end while\n\n    } # end pop check\n\n\n    ########################################################\n    ## Correct for pop strat by regressing along sig PCs: ##\n    ########################################################\n\n    ## NOTE-- if any MISSING DATA contained in SNPs dataset, must REPLACE it here (eg. with the mean for that snps column).\n\n    ## get formula (get string up to n.PCs): lm(e ~ pca1$li[,1] + pca1$li[,2] + pca1$li[,3] + pca1$li[,4] + pca1$li[,5])\n    PC.string <- sapply(c(1:n.PCs), function(e) paste(\"pca1$li[, \", e, \"]\", sep=\"\"))\n    PC.string <- paste0(PC.string, collapse=\" + \")\n    var.string <- paste(\"e ~ \", PC.string)\n\n    ## Correct SNPs w PCA!\n    ## SLOW STEP..!\n    snps.corrected <- apply(snps, 2, function(e) residuals(do.call(lm, list(as.formula(var.string))))) # may take a minute\n\n    ## First make sure PHEN is in BINARY form (0, 1) only!\n    levs <- levels(as.factor(phen))\n    phen.ini <- phen\n    if(any(!levs %in% c(0,1))){\n      phen <- as.character(phen)\n      phen <- replace(phen, which(phen == levs[1]), 0)\n      phen <- replace(phen, which(phen == levs[2]), 1)\n      phen <- as.numeric(phen)\n      names(phen) <- names(phen.ini)\n    } # end make phen binary..\n\n    if(!is.numeric(phen)) phen <- as.numeric(phen)\n\n    ## Get UNIQUE snps.corrected ##\n    snps.corrected.ori <- snps.corrected\n    temp <- get.unique.matrix(snps.corrected, MARGIN=2)\n    temp.unique <- temp$unique.data\n    index <- temp$index\n\n    if(ncol(temp.unique) == ncol(snps.corrected.ori)){\n      all.unique <- TRUE\n    }else{\n      all.unique <- FALSE\n    }\n\n    ## work w only unique snps:\n    snps.corrected <- temp.unique\n\n    ## SLOW STEP..\n    pval2 <- numeric(0)\n    # system.time( # 120.78\n    for(i in 1:ncol(snps.corrected)){\n      foo <- suppressWarnings(glm(phen ~ snps.corrected[,i], family=\"binomial\"))\n      ANOVA <- anova(foo, test=\"Chisq\")\n      pval2[i] <- ANOVA$\"Pr(>Chi)\"[2]\n    } # end for loop\n    # )\n\n\n    ## Get all non-unique values:\n    snps.corrected <- snps.corrected.ori\n    if(all.unique == FALSE) pval2 <- pval2[index]\n\n    ## Store pvals and snps.corrected from pca-corrected ANOVA association test:\n    pval.pca <- pval2\n    snps.corrected.pca <- snps.corrected\n\n    ## Get results:\n    p.thresh <- p.value # 0.01\n    p.vals.bonf <- p.adjust(pval.pca, \"bonferroni\")\n    p.bonf <- which(p.vals.bonf < p.thresh)\n    pca.snps.bonf <- snps.names[p.bonf]\n\n    ## Store results:\n    pca.results <- list(snps.corrected.pca, pval.pca, pca.snps.bonf)\n    names(pca.results) <- c(\"snps.corrected.pca\", \"pval.pca\", \"pca.snps.bonf\")\n\n    print(\"PCA done\")\n\n    ###########################################################################################################################\n    ################################################ ***   DAPC   *** #########################################################\n    ###########################################################################################################################\n\n    print(\"DAPC started\")\n\n    ## Using our pop clusters as the group factor in DAPC,\n    ## we can generate a new DAPC object ...\n    ## after performing cross-validation to optimise the discrimination between these subpopulations:\n\n    ## NOTE -- If this is SLOW and always results in 5-10 PCs, we may want to skip it... ??\n    xval.pop <- xvalDapc(snps, pop)\n    # str(xval.pop)\n    # xval.pop[2:6]\n\n    ## store DAPC object:\n    dapc.pop <- xval.pop$DAPC\n\n    ###################################\n    ## Correct for pop strat w DAPC: ##\n    ###################################\n\n    ## As we did when correcting with PCA, we regress along the axes of DAPC.\n    ## When correcting with the DAPC approach, we do not need to determine\n    ## how many axes are ``significant'': we will always correct with (k - 1) axes.\n    ## NOTE that (k - 1) is not necessarily = n.PCs\n    ## ... though we may want to limit the K we work with depending on how system.time scales with K... (?)\n\n    ## get formula (get string up to n.PCs):\n    ## lm(e ~ dapc.pop$ind.coord[,1] + dapc.pop$ind.coord[,2] + dapc.pop$ind.coord[,3] + dapc.pop$ind.coord[,4])\n    # DAPC.string <- sapply(c(1:n.PCs), function(e) paste(\"dapc.pop$ind.coord[, \", e, \"]\", sep=\"\"))\n    DAPC.string <- sapply(c(1:(n.grp - 1)), function(e) paste(\"dapc.pop$ind.coord[, \", e, \"]\", sep=\"\"))\n    DAPC.string <- paste0(DAPC.string, collapse=\" + \")\n    var.string <- paste(\"e ~ \", DAPC.string)\n\n    ## Correct SNPs w DAPC!\n    snps.corrected <- apply(snps, 2, function(e) residuals(do.call(lm, list(as.formula(var.string))))) # may take a minute\n\n\n    ## Get UNIQUE snps.corrected ##\n    snps.corrected.ori <- snps.corrected\n    temp <- get.unique.matrix(snps.corrected, MARGIN=2)\n    temp.unique <- temp$unique.data\n    index <- temp$index\n\n    if(ncol(temp.unique) == ncol(snps.corrected.ori)){\n      all.unique <- TRUE\n    }else{\n      all.unique <- FALSE\n    }\n\n    ## work w only unique snps:\n    snps.corrected <- temp.unique\n\n\n    ## Run association test on DAPC-corrected snps:\n    pval3 <- numeric(0)\n    system.time(\n      for(i in 1:ncol(snps.corrected)){\n        foo <- suppressWarnings(glm(phen ~ snps.corrected[,i], family=\"binomial\"))\n        ANOVA <- anova(foo, test=\"Chisq\")\n        pval3[i] <- ANOVA$\"Pr(>Chi)\"[2]\n      } # end for loop\n    )\n\n\n    ## Get all non-unique values:\n    snps.corrected <- snps.corrected.ori\n    if(all.unique == FALSE) pval3 <- pval3[index]\n\n\n    ## store pvals and snps.corrected for DAPC-corrected assoc test:\n    pval.dapc <- pval3\n    snps.corrected.dapc <- snps.corrected\n\n    ## Get results:\n    p.thresh <- p.value # 0.01\n    p.vals.bonf <- p.adjust(pval.dapc, \"bonferroni\")\n    p.bonf <- which(p.vals.bonf < p.thresh)\n    dapc.snps.bonf <- snps.names[p.bonf]\n\n    ## Store results:\n    dapc.results <- list(snps.corrected.dapc, pval.dapc, dapc.snps.bonf)\n    names(dapc.results) <- c(\"snps.corrected.dapc\", \"pval.dapc\", \"dapc.snps.bonf\")\n\n    print(\"DAPC done\")\n\n    ###########################################################################################################################\n    ################################################ ***   CMH   *** ##########################################################\n    ###########################################################################################################################\n\n    print(\"CMH started\")\n\n\n    snps <- snps.ori.ori\n    phen <- phen.ori.ori\n\n    ## Get colnames(snps)\n    if(is.null(colnames(snps))) colnames(snps) <- c(1:ncol(snps))\n    snps.names <- colnames(snps)\n\n    ## First make sure PHEN is in BINARY form (0, 1) only!\n    levs <- levels(as.factor(phen))\n    phen.ini <- phen\n    if(any(!levs %in% c(0,1))){\n      phen <- as.character(phen)\n      phen <- replace(phen, which(phen == levs[1]), 0)\n      phen <- replace(phen, which(phen == levs[2]), 1)\n    } # end make phen binary..\n    phen <- as.numeric(phen)\n    names(phen) <- names(phen.ini)\n\n    ##############################################\n\n    snps.12 <- snps+1\n    phen.34 <- phen+3\n    mat <- t(matrix(as.numeric(paste(snps.12, \".\", phen.34, sep=\"\")), nrow=ncol(snps), byrow=T))\n\n    ## get only unique columns of pasted mat:\n    mat.u <- get.unique.matrix(mat)\n    mat.unique <- mat.u$unique.data\n    index <- mat.u$index\n\n    ## get all 2x2 combos of snps.12 and phen.34:\n    noms <- c(\"1.3\", \"1.4\", \"2.3\", \"2.4\")\n\n    ## get array from table, by pop:\n    arr.l <- list()\n    for(i in 1:ncol(mat.unique)){\n      tab <- list()\n      for(e in 1:length(levels(pop))){\n        temp <- ftable(mat.unique[pop==e, i])\n        tab[[e]] <- replace(rep(0, 4), which(noms %in% attr(temp, \"col.vars\")[[1]]), temp)\n      } # end (e) loop\n      arr.l[[i]] <- do.call(cbind, tab)\n    } # end for (i) loop\n    arr <- do.call(rbind, arr.l)\n\n\n    arr.complete <- arr\n    ##############\n    ## FOR LOOP ##\n    ##############\n    ## TO GET P-VALUES FROM CMH TEST for EACH SNPs COLUMN:\n    p.vals <- list()\n    for(i in 1:ncol(mat.unique)){\n      ## get indices for this snp for all pops and all 4 2x2 combos:\n      from <- seq(1, nrow(arr.complete), 4)[i]\n      to <- from+3\n      arr <- arr.complete[from:to,]\n      dat <- array(arr,\n                   dim = c(2,2,ncol(arr)),\n                   dimnames = list(\n                     phen = c(\"0\", \"1\"),\n                     SNP = c(\"0\", \"1\"),\n                     pop = levels(pop)\n                   ))\n      ## Run CMH test on this unique snps column:\n      CMH <- mantelhaen.test(dat)\n      p.vals[[i]] <- CMH$p.value\n    } # end for loop\n    p.vals <- as.vector(unlist(p.vals))\n\n    ## get full set of p-vals for non-unique columns:\n    pval.cmh <- p.vals[index]\n\n\n    ## Get results:\n    p.thresh <- p.value # 0.01\n    p.vals.bonf <- p.adjust(pval.cmh, \"bonferroni\")\n    p.bonf <- which(p.vals.bonf < p.thresh)\n    cmh.snps.bonf <- snps.names[p.bonf]\n\n    ## Store results:\n    cmh.results <- list(pval.cmh, cmh.snps.bonf)\n    names(cmh.results) <- c(\"pval.cmh\", \"cmh.snps.bonf\")\n\n    print(\"CMH done\")\n\n    ###########################################################################################################################\n    ############################################# *** PERFORMANCE *** #########################################################\n    ###########################################################################################################################\n\n    ##########################\n    ## EVALUATE PERFORMANCE ##\n    ##########################\n\n    performance <- list()\n\n    ####################\n    ## common metrics ##\n    ####################\n    ## get n.tests\n    snps <- snps.ori.ori\n    phen <- phen.ori.ori\n    n.tests <- dim(snps)[2]\n\n    ###########################################\n    ## performance[[1]] contains snps.assoc: ##\n    ###########################################\n    performance[[1]] <- snps.assoc\n\n\n    ##############################\n    ## FOR LOOP FOR ALL 3 TESTS ##\n    ##############################\n    for(j in 2:107){\n\n\n      if(j==2) test <- \"fisher.bonf\"\n      if(j==3) test <- \"fisher.fdr\"\n\n      if(j %in% 4:99) test <- \"treeWAS\"\n\n      ## get test run:\n      if(j %in% 4:35)  t <- \"terminal\"\n      if(j %in% 36:67) t <- \"simultaneous\"\n      if(j %in% 68:99) t <- \"subsequent\"\n\n      if(j==100) test <- \"plink.assoc.bonf\"\n      if(j==101) test <- \"plink.assoc.fdr\"\n      if(j==102) test <- \"plink.assoc.gc.bonf\"\n      if(j==103) test <- \"plink.assoc.gc.fdr\"\n\n      if(j == 104) test <- \"pca\"\n      if(j == 105) test <- \"dapc\"\n      if(j == 106) test <- \"cmh\"\n\n      if(j == 107) test <- \"treeWAS.combined\"\n\n      ################\n      ## PCA & DAPC ## ########### ########### ########### ########### ########### ###########\n      ################\n\n      #########\n      ## PCA ##\n      #########\n      if(test == \"pca\"){\n        test.positive <- pca.snps.bonf\n      }\n\n      ##########\n      ## DAPC ##\n      ##########\n      if(test == \"dapc\"){\n        test.positive <- dapc.snps.bonf\n      }\n\n      #########\n      ## CMH ##\n      #########\n      if(test == \"cmh\"){\n        test.positive <- cmh.snps.bonf\n      }\n\n      ###########\n      ## PLINK ## ########### ########### ########### ########### ########### ###########\n      ###########\n\n      ## Basic association ##\n\n      ######################\n      ## plink.assoc.bonf ##\n      ######################\n      if(test == \"plink.assoc.bonf\"){\n        test.positive <- plink.assoc.snps.bonf\n      } # end test = plink.assoc.bonf\n\n      #####################\n      ## plink.assoc.fdr ##\n      #####################\n      if(test == \"plink.assoc.fdr\"){\n        test.positive <- plink.assoc.snps.fdr\n      } # end test = plink.assoc.fdr\n\n\n      ## Corrected w Genomic Control ##\n\n      #########################\n      ## plink.assoc.gc.bonf ##\n      #########################\n      if(test == \"plink.assoc.gc.bonf\"){\n        test.positive <- plink.assoc.gc.snps.bonf\n      } # end test = plink.assoc.gc.bonf\n\n      ########################\n      ## plink.assoc.gc.fdr ##\n      ########################\n      if(test == \"plink.assoc.gc.fdr\"){\n        test.positive <- plink.assoc.gc.snps.fdr\n      } # end test = plink.assoc.gc.fdr\n\n      ########### ########### ########### ########### ########### ########### ###########\n\n\n\n      #################\n      ## fisher.bonf ##\n      #################\n      if(test == \"fisher.bonf\"){\n        ## get test.positive\n        test.positive <- fisher.snps.bonf\n      } # end test = fisher.bonf\n      ################\n      ## fisher.fdr ##\n      ################\n      if(test == \"fisher.fdr\"){\n        test.positive <- fisher.snps.fdr\n      } # end test = fisher.fdr\n\n\n      ########### ########### ########### ########### ########### ########### ###########\n\n      #############\n      ## treeWAS ##\n      #############\n      if(test == \"treeWAS\"){\n\n        if(j %in% 4:35)  N <- 3\n        if(j %in% 36:67) N <- 35\n        if(j %in% 68:99) N <- 67\n\n        ## get test.positive\n        if(class(res[[t]][[(j-N)]]$sig.snps)==\"data.frame\"){\n          # test.positive <- as.character(res$SNP.locus)\n          test.positive <- as.character(res[[t]][[(j-N)]]$sig.snps$SNP.locus)\n        }else{\n          test.positive <- NULL\n        }\n      } # end test = treeWAS\n\n      ######################\n      ## treeWAS.combined ##\n      ######################\n      if(test == \"treeWAS.combined\"){\n        test.positive <- treeWAS.all$treeWAS.combined\n      }\n\n      ########### ########### ########### ########### ########### ########### ###########\n\n\n\n      if(is.null(names(snps.assoc))) names(snps.assoc) <- as.character(snps.assoc)\n      if(is.null(snps.names)){\n        if(is.null(colnames(snps))) colnames(snps) <- as.character(1:ncol(snps))\n        snps.names <- colnames(snps)\n      }\n\n      #########################\n      ## common calculations ##\n      #########################\n      ## get test.negative\n      if(length(which(snps.names %in% test.positive)) != 0){\n        test.negative <- snps.names[-which(snps.names %in% test.positive)]\n      }else{\n        test.negative <- snps.names\n      }\n\n\n      ## get n.test.positive\n      n.test.positive <- length(test.positive)\n      ## get n.test.negative\n      n.test.negative <- length(test.negative) ## == n.tests - n.test.positive\n\n      n.tests <- ncol(snps)\n\n      ########################\n      ## GET TP, TN, FP, FN ##\n      ########################\n      ## get true positives\n      ## for Set 3 there is 1 associated SNP, so 1 true positive...\n      # if(set.number < 3){\n      #   snps.associated <- NULL\n      # }else{\n      #   #         snps.associated <- paste(sapply(c(1:length(snps.assoc)),\n      #   #                                         function(e)\n      #   #                                           rep(names(snps.assoc)[e], 2)), c(1, 2), sep=\".\")\n      snps.associated <- names(snps.assoc)\n      # }\n      true.positive <- test.positive[which(test.positive %in% snps.associated)]\n      TP <- length(true.positive)\n\n      ## get true negatives\n      ## for Set 3 all but ONE SNPs are NOT (intentionally) associated with the phenotype\n      # if(set.number < 3){\n      #   snps.not <- snps.names\n      # }else{\n      snps.not <- snps.names[-which(snps.names %in% snps.associated)]\n      # }\n      true.negative <- test.negative[which(test.negative %in% snps.not)]\n      TN <- length(true.negative)\n\n      ## get false positives\n      false.positive <- test.positive[which(test.positive %in% snps.not)]\n      FP <- length(false.positive)\n\n      ## get false negatives\n      false.negative <- test.negative[which(test.negative %in% snps.associated)]\n      FN <- length(false.negative)\n\n\n      #####################################\n      ## CALCULATE METRICS OF EVALUATION ##\n      #####################################\n\n      ## Do NOT need anything to find (no associated SNPs required) ######################################\n\n      ##############\n      ## accuracy ##\n      ##############\n      ## ie. SUMMARY STATISTIC--Of all the CALLS/tests you made, how many of them were CORRECT\n      ## ~ Pr(Correct Call | Call)\n      # accuracy <- ((TP + TN) / n.tests) ### WHY IS THIS GIVING ME 0.5 (when all other metrics seem to be working....) ??!?!\n      accuracy <- ((TP + TN) / (TP + TN + FP + FN))\n      # acc <- (sensitivity*length(snps.associated) + specificity*length(snps.not))/ncol(snps)\n\n      #################\n      ## specificity ##\n      #################\n      ## ie. Of all the truly NOT associated SNPs, how many did you manage to rule out?\n      ## ~ Pr(Negative Test | SNP NOT associated)\n      specificity <- (TN / (TN + FP)) ## = (1 - FPR)\n\n      #########\n      ## FPR ##\n      #########\n      ## ie. How many truly NOT associated SNPs did you accidentally call significant\n      ## ~ Pr(Positive Test | SNP NOT associated)\n      FPR <- (FP / (FP + TN)) ## = (1 - specificity)\n\n\n      ## NEED something to FIND, else uninformative! (True ASSOCIATED SNPs ~ required) ###################\n\n      #########\n      ## FNR ##\n      #########\n      ## ie. How many truly ASSOCIATED SNPs did you accidentally miss\n      ## ~ Pr(Negative Test | SNP ASSOCIATED)\n      ## --> Set 1: will be 0/0 = NaN\n      FNR <- (FN / (FN + TP))\n\n      #################\n      ## sensitivity ##\n      #################\n      ## ie. How many truly ASSOCIATED SNPs did you manage to catch\n      ## ~ Pr(Positive Test | SNP ASSOCIATED)\n      ## --> Set 1: will be 0/0 = NaN\n      sensitivity <- (TP / (TP + FN))\n\n      #########\n      ## PPV ##\n      #########\n      ## ie. Of all the POSITIVE calls you made, how many were CORRECT/ identified truly ASSOCIATED SNPs\n      ## ~ Pr(SNP ASSOCIATED | Positive Test)\n      ## --> Set 1: will be 0 (UNLESS you made NO positive calls, then 0/0 = NaN)\n      PPV <- (TP / (TP + FP)) ## = (1 - FDR)\n\n      #########\n      ## FDR ##\n      #########\n      ## ie. Of all the POSITIVE calls you made, how many were WRONG/ identified truly NOT associated SNPs\n      ## ~ Pr(SNP NOT associated | Positive Test)\n      ## --> Set 1: will be 1 (UNLESS you made NO positive calls, then 0/0 = NaN)\n      FDR <- (FP / (FP + TP)) ## = (1 - PPV)\n\n\n      ##############\n      ## F1.score ##\n      ##############\n      ## Balanced accuracy-like score considering both sensitivity and PPV:\n      F1.score <- 2*((sensitivity*PPV) / (sensitivity+PPV))\n\n      ##################################\n      ## combine eval metrics into df ##\n      ##################################\n      performance[[j]] <- data.frame(accuracy, specificity, FPR, FNR, sensitivity, PPV, FDR, F1.score)\n\n    } # end for loop\n\n    ## get names for treeWAS tests:\n    treeWAS.names <- list()\n\n    for(r in 1:length(res)){\n      if(r == 1) t <- \"terminal\"\n      if(r == 2) t <- \"simultaneous\"\n      if(r == 3) t <- \"subsequent\"\n\n      treeWAS.names[[r]] <- paste(\"treeWAS\", t, names(res[[t]]), sep=\".\")\n    }\n\n    treeWAS.names <- as.vector(unlist(treeWAS.names))\n\n    names(performance) <- c(\"snps.assoc\",\n                            \"fisher.bonf\", \"fisher.fdr\",\n                            treeWAS.names,\n                            \"plink.assoc.bonf\", \"plink.assoc.fdr\",\n                            \"plink.assoc.gc.bonf\", \"plink.assoc.gc.fdr\",\n                            \"pca\", \"dapc\", \"cmh\",\n                            \"treeWAS.combined\")\n\n    ################################    ################################    ################################\n\n\n    ###########################################################################################################################\n    ######################################### *** SAVING & RETURNING *** ######################################################\n    ###########################################################################################################################\n\n\n    ########################\n    ## SAVE DATA & OUTPUT ##\n    ########################\n    ## set wd\n    setwd(wd)\n    ## get uniqueID\n    uniqueID <- paste(\"set\", set.number, \"_\", number, sep=\"\")\n\n    ## save snps, phen, tree, out, res, fisher.results, plink.assoc.results, performance\n    snps <- snps.ori.ori\n    phen <- phen.ori.ori\n\n    ## save snps\n    filename.snps[[i]] <- paste(\"./\", uniqueID, \"_snps\", \".Rdata\", sep=\"\")\n    save(snps, file=filename.snps[[i]])\n    ## save phen\n    filename.phen[[i]] <- paste(\"./\", uniqueID, \"_phen\", \".Rdata\", sep=\"\")\n    save(phen, file=filename.phen[[i]])\n    ## save phen.plot.col\n    filename.phen.plot.col[[i]] <- paste(\"./\", uniqueID, \"_phen.plot.col\", \".Rdata\", sep=\"\")\n    save(phen.plot.col, file=filename.phen.plot.col[[i]])\n    ## save tree\n    filename.tree[[i]] <- paste(\"./\", uniqueID, \"_tree\", \".Rdata\", sep=\"\")\n    save(tree, file=filename.tree[[i]])\n    ## save out\n    filename.out[[i]] <- paste(\"./\", uniqueID, \"_out\", \".Rdata\", sep=\"\")\n    save(out, file=filename.out[[i]])\n    ## save res\n    res <- res.complete # includes data from reconstructions, values from treeWAS tests\n    filename.res[[i]] <- paste(\"./\", uniqueID, \"_res\", \".Rdata\", sep=\"\")\n    save(res, file=filename.res[[i]])\n    ## save fisher.results\n    filename.fisher.results[[i]] <- paste(\"./\", uniqueID, \"_fisher.results\", \".Rdata\", sep=\"\")\n    save(fisher.results, file=filename.fisher.results[[i]])\n    ## save plink.assoc.results\n    filename.plink.results[[i]] <- paste(\"./\", uniqueID, \"_plink.results\", \".Rdata\", sep=\"\")\n    save(plink.results, file=filename.plink.results[[i]])\n\n    ## save pca\n    filename.pca[[i]] <- paste(\"./\", uniqueID, \"_pca\", \".Rdata\", sep=\"\")\n    save(pca.results, file=filename.pca[[i]])\n    ## save dapc\n    filename.dapc[[i]] <- paste(\"./\", uniqueID, \"_dapc\", \".Rdata\", sep=\"\")\n    save(dapc.results, file=filename.dapc[[i]])\n\n    ## save cmh\n    filename.cmh[[i]] <- paste(\"./\", uniqueID, \"_cmh\", \".Rdata\", sep=\"\")\n    save(cmh.results, file=filename.cmh[[i]])\n\n\n    ## save performance\n    filename.args[[i]] <- paste(\"./\", uniqueID, \"_args\", \".Rdata\", sep=\"\")\n    save(args, file=filename.args[[i]])\n    ## save performance\n    filename.performance[[i]] <- paste(\"./\", uniqueID, \"_performance\", \".Rdata\", sep=\"\")\n    save(performance, file=filename.performance[[i]])\n\n    ## save score3 raw data and alternatives\n    filename.score3[[i]] <- paste(\"./\", uniqueID, \"_score3\", \".Rdata\", sep=\"\")\n    save(score3, file=filename.score3[[i]])\n\n\n\n\n\n    #########################\n    ## STORE DATA & OUTPUT ##\n    #########################\n    SNPS[[i]] <- snps\n    names(SNPS)[[i]] <- uniqueID\n    PHEN[[i]] <- phen\n    names(PHEN)[[i]] <- uniqueID\n    PHEN.PLOT.COL[[i]] <- phen.plot.col\n    names(PHEN.PLOT.COL[[i]]) <- uniqueID\n    TREE[[i]] <- tree\n    names(TREE)[[i]] <- uniqueID\n    OUT[[i]] <- out\n    names(OUT)[[i]] <- uniqueID\n    RES[[i]] <- res\n    names(RES)[[i]] <- uniqueID\n    FISHER.RESULTS[[i]] <- fisher.results\n    names(FISHER.RESULTS)[[i]] <- uniqueID\n    PLINK.RESULTS[[i]] <- plink.results\n    names(PLINK.RESULTS)[[i]] <- uniqueID\n\n    PCA.RESULTS[[i]] <- pca.results\n    names(PCA.RESULTS)[[i]] <- uniqueID\n    DAPC.RESULTS[[i]] <- dapc.results\n    names(DAPC.RESULTS)[[i]] <- uniqueID\n\n    CMH.RESULTS[[i]] <- cmh.results\n    names(CMH.RESULTS)[[i]] <- uniqueID\n\n    SCORE3[[i]] <- score3\n    names(SCORE3)[[i]] <- uniqueID\n\n    ARGS[[i]] <- args\n    names(ARGS)[[i]] <- uniqueID\n    PERFORMANCE[[i]] <- performance\n    names(PERFORMANCE)[[i]] <- uniqueID\n\n  } # end for loop\n\n\n  ##########################\n  ## RETURN DATA & OUTPUT ##\n  ##########################\n\n  toReturn <- list(SNPS, PHEN, PHEN.PLOT.COL, TREE, RES,\n                   FISHER.RESULTS, PLINK.RESULTS, PCA.RESULTS, DAPC.RESULTS, CMH.RESULTS,\n                   ARGS, PERFORMANCE)\n  names(toReturn) <- c(\"snps\", \"phen\", \"phen.plot.col\", \"tree\", \"res\",\n                       \"fisher.results\", \"plink.results\", \"pca.results\", \"dapc.results\", \"cmh.results\",\n                       \"arguments\", \"performance\")\n\n  return(toReturn)\n\n} # end simTest (generic) function\n",
    "created" : 1476082680748.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "191354918",
    "id" : "899C86E0",
    "lastKnownWriteTime" : 1478051174,
    "path" : "C:/Users/Caitlin/treeWAS/pkg/R/simTest.R",
    "project_path" : "R/simTest.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : true,
    "type" : "r_source"
}