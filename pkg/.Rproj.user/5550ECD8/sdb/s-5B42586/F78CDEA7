{
    "contents" : "\n####################\n## manhattan.plot ##\n####################\n\n########################################################################\n\n###################\n## DOCUMENTATION ##\n###################\n\n#' Short one-phrase description.\n#'\n#' Longer proper discription of function...\n#'\n#' @param arg Description.\n#'\n#'\n#' @author Caitlin Collins \\email{caitiecollins@@gmail.com}\n#' @export\n#'\n#' @import adegenet\n\n########################################################################\n\n## EG:\n# manhattan.plot(p.vals = corr.dat,\n#                col = \"deepseasun\", # c(\"red\", \"royalblue\"),\n#                transp = 0.5,\n#                sig.thresh = c(0.68,0.71,0.75,0.80,0.81),\n#                jitter.amount = 0.00001,\n#                min.p = NULL,\n#                log10=FALSE,\n#                thresh.col=\"wasp\",\n#                ylab = \"Terminal Correlation Score\")\n\nmanhattan.plot <- function(p.vals,\n                           col = \"wasp\",\n                           transp = 0.75,\n                           sig.thresh = 0.05,\n                           thresh.col=\"seasun\",\n                           snps.assoc = NULL,\n                           snps.assoc.col = \"red\",\n                           jitter.amount = 0.00001,\n                           min.p = NULL,\n                           log10=TRUE,\n                           ylab=NULL){\n\n  # require(adegenet) # transp, col.pal\n\n\n  pval <- p.vals\n\n  # Handle thresholds\n  if(!is.null(sig.thresh)){\n    if(class(sig.thresh) == \"list\") sig.thresh <- as.vector(unlist(sig.thresh))\n    sig.thresh.complete <- sig.thresh\n    sig.thresh <- unique(sig.thresh)\n  }\n\n  ## replace any \"0\" p.vals with min.p\n  if(any(pval == 0)){\n    toReplace <- which(pval == 0)\n    if(is.null(min.p)) min.p <- 1/length(pval)\n    pval[toReplace] <- min.p\n  }\n\n  ## PLOTTING METHOD--MANHATTAN PLOT\n\n  # with Bonferroni:\n  if(log10 == TRUE){\n    log.pval <- -log10(pval)\n  }else{\n    log.pval <- pval\n  }\n  set.seed(1)\n  if(jitter.amount > 0) log.pval <- jitter(log.pval, amount=jitter.amount)\n\n  ## get colour scheme\n  ## from colour palette?\n  col.pals <- c(\"bluepal\", \"redpal\", \"greenpal\", \"greypal\",\n                \"flame\", \"azur\",\n                \"seasun\", \"lightseasun\", \"deepseasun\",\n                \"spectral\", \"wasp\", \"funky\")\n  if(col %in% col.pals){\n    myCol <- eval(parse(text=paste(col, \"(\", ceiling(length(pval)/1000), \")\")))\n    myCol <- as.vector(unlist(sapply(c(1:length(myCol)),\n                                     function(e)\n                                       rep(myCol[e], 1000))))\n    myCol <- myCol[c(1:length(pval))]\n  }else{\n    ## from vector of colours?\n    myCol <- as.vector(unlist(sapply(c(1:length(col)),\n                                     function(e)\n                                       rep(col[e], 1000))))\n    myCol <- sort(myCol)\n    myCol <- rep(myCol, ceiling(length(pval)/(1000*(length(col)))))\n    myCol <- myCol[1:length(pval)]\n  }\n  ## add transparency?\n  if(!is.null(transp)){\n    if(transp < 0 | transp > 1){\n      transp <- 0.5\n      warning(\"transp must be between 0 and 1;\n              using default value 0.5.\")\n    }\n    transp <- 1-transp\n    myCol <- transp(myCol, alpha = transp)\n  }\n\n\n\n  ##p- Manhattan- Bonferroni\n  if(log10 == TRUE){\n    if(is.null(ylab)){\n      ylab <- \"Uncorrected -log10(p-value)\"\n    }\n    plot(log.pval,\n         col = myCol,\n         pch = 19,\n         cex = 1,\n         main=\"Manhattan plot\",\n         xlab=\"SNP loci\",\n         ylab=ylab,\n         cex.main=1)\n\n  }else{\n    if(is.null(ylab)){\n      ylab <- \"Uncorrected p-value\"\n    }\n    plot(log.pval,\n         col = myCol,\n         pch = 19,\n         cex = 1,\n         main=\"Manhattan plot\",\n         xlab=\"SNP loci\",\n         ylab=ylab,\n         cex.main=1)\n  }\n\n  ## overlay/highlight snps.assoc?\n  if(!is.null(snps.assoc)){\n    ## modify colour\n    if(is.null(snps.assoc.col)) snps.assoc.col <- \"red\"\n    myCol[snps.assoc] <- snps.assoc.col\n    ## overlay points:\n    points(x=snps.assoc,\n           y=log.pval[snps.assoc],\n           col = myCol[snps.assoc],\n           pch = 19,\n           cex = 1)\n  }\n\n  ## get significance threshold\n  if(thresh.col %in% col.pals){\n    thresh.col <- eval(parse(text=paste(thresh.col, \"(\", length(sig.thresh), \")\")))\n  }\n\n  for(i in 1:length(sig.thresh)){\n    if(log10 == TRUE){\n      thresh <- -log10(sig.thresh[i])\n    }else{\n      thresh <- sig.thresh[i]\n    }\n    ## move sig thresh below nearest points by 0.5% of ylim\n    thresh <- thresh-(max(log.pval)*0.005)\n    ## draw threshold line on plot:\n    # abline(h=thresh, col = thresh.col[i], lwd = 2)\n    lines(x=c(-400, length(log.pval+400)), y=c(thresh, thresh), col=thresh.col[i], lwd=2)\n  } # end for loop plotting thresh lines\n\n} # end manhattan.plot\n\n\n\n##########################\n## qqman Manhattan Plot ##\n##########################\n# require(qqman)\n#\n# # manhattan(gwasResults,\n# #           main = \"Manhattan Plot\",\n# #           ylim = c(0, 10),\n# #           cex = 0.6,\n# #           cex.axis = 0.9,\n# #           col = c(\"blue4\", \"orange3\"),\n# #           suggestiveline = F,\n# #           genomewideline = F,\n# #           chrlabs = c(1:20, \"P\", \"Q\"))\n#\n# BP <- as.numeric(dimnames(snps.ori)[[2]])\n# if(is.null(BP)) BP <- c(1:ncol(snps.ori))\n# CHR <- sort(rep(1:20, ncol(snps.ori)/20))\n# P <- p.vals\n# df <- data.frame(BP, CHR, P)\n#\n# manhattan(df,\n#           main = \"Manhattan Plot\",\n#           ylim = c(0, 10),\n#           cex = 0.6,\n#           cex.axis = 0.9,\n#           col = c(\"blue4\", \"orange3\"),\n#           suggestiveline = F,\n#           genomewideline = F,\n#           chrlabs = c(1:20, \"P\", \"Q\"))\n\n\n\n\n\n\n\n\n###################\n## plot.sig.snps ##\n###################\n\n########################################################################\n\n###################\n## DOCUMENTATION ##\n###################\n\n#' Short one-phrase description.\n#'\n#' Longer proper discription of function...\n#'\n#' @param arg Description.\n#'\n#'\n#' @author Caitlin Collins \\email{caitiecollins@@gmail.com}\n#' @export\n#'\n#' @import adegenet ape phangorn\n\n########################################################################\n# res <- out$res\n# vals <- res$vals\n#\n# corr.dat <- vals$subsequent$corr.dat\n# corr.sim <- vals$subsequent$corr.sim\n#\n# sig.thresh <- as.vector(unlist(res$thresh))\n#\n# snps.assoc <- out$performance[[1]]\n# sig.corrs <- corr.dat[snps.assoc]\n# sig.snps <- snps.assoc\n\nplot.sig.snps <- function(corr.dat,\n                          corr.sim,\n                          corr.sim.subset = NULL,\n                          sig.corrs,\n                          sig.snps,\n                          sig.thresh = NULL,\n                          test = NULL,\n                          sig.snps.col = \"blue\",\n                          hist.col = rgb(0,0,1,0.5), # blue ## OR ## rgb(0.1,0.1,0.1,0.5) # darkgrey\n                          hist.subset.col = rgb(1,0,0,0.5), # red ## OR ## rgb(0.8,0.8,0.8,0.5) # lightgrey\n                          thresh.col=\"seasun\",\n                          snps.assoc = NULL,\n                          snps.assoc.col = \"red\",\n                          bg = \"lightgray\",\n                          grid=TRUE,\n                          plot.null.dist=TRUE,\n                          plot.dist=FALSE){\n\n  ###############################################################################\n  ## Add threshold(s) and SNP annotations to histogram of (null) distributions ##\n  ###############################################################################\n\n  # thresh <- sig.thresh\n  if(!is.null(sig.thresh)){\n    if(class(sig.thresh) == \"list\") sig.thresh <- as.vector(unlist(sig.thresh))\n    sig.thresh.complete <- sig.thresh\n    sig.thresh <- unique(sig.thresh)\n  }\n\n  if(plot.null.dist==TRUE & plot.dist==TRUE) par(ask=TRUE)\n\n  ##############################\n  ## plot.null.dist ############\n  ##############################\n\n  ###########################################################\n  ## plot (null) hist of corr's btw SIMULATED SNPs n phen: ##\n  ###########################################################\n  ## plot correlations btw simulated SNPs and phenotype:\n\n  if(plot.null.dist==TRUE){\n\n    h.null <- hist(as.vector(unlist(corr.sim)), plot=FALSE)\n\n    ## add second (subset) histogram):\n    if(!is.null(corr.sim.subset)){\n      h.null.subset <- hist(as.vector(unlist(corr.sim.subset)), plot=FALSE)\n      ## if no subset col provided, choose 2:\n      if(is.null(hist.subset.col)){\n        # hist.col <- rgb(0,0,1,0.5) # blue\n        # hist.subset.col <- rgb(1,0,0,0.5) # red\n        # warning(\"No colour provided for subset:\n        #         Choosing primary and subset colours.\")\n        hist.subset.col <- hist.col ## (makes more sense if expecting a SUBSET)\n      }\n    }\n\n    xmax <- ceiling(max(corr.dat)+.05)\n\n    ## if the true correlation value for SNP i is >\n    ## max bin, then extend the x-axis of the plot\n    ## to accommodate annotation:\n    if(xmax > max(h.null$breaks)){\n\n      ## plot histogram of correlations btw real\n      ## SNPs and phenotype: ##\n      ## EXTENDING THE X-AXIS\n      plot(h.null,\n           main=paste(\"Null distribution of\", test, \"scores\"\n           # \\n (with significant SNPs indicated)\"\n                      , sep=\" \"),\n           xlab=paste(test, \"score\", sep=\" \"),\n           xlim=c(min(h.null$breaks), xmax),\n           col=hist.col)\n\n\n      ## Add grey background? ##\n      if(!is.null(bg)){\n        if(bg != \"white\"){\n          lim <- par(\"usr\")\n          rect(lim[1],  lim[3], lim[2], lim[4], col=bg)\n          # rect(lim[1],  lim[3], lim[2], lim[4], col=bg, border=NA)\n\n          axis(1) ## add axes back\n          axis(2)\n\n          ## add grid:\n          if(grid == TRUE){\n            grid(col=\"white\", lwd=1, lty=1)\n          }\n\n          box()   ## and the plot frame\n\n          ## Re-plot original plot:\n          plot(h.null,\n               main=paste(\"Null distribution of\", test, \"scores\"\n               # \\n (with significant SNPs indicated)\"\n                          , sep=\" \"),\n               xlab=paste(test, \"score\", sep=\" \"),\n               xlim=c(min(h.null$breaks), xmax),\n               col=hist.col,\n               add = TRUE)\n\n        }\n      } # end background\n\n\n      ## Overlay subset histogram:\n      if(!is.null(h.null.subset)){\n        plot(h.null.subset,\n             xlim=c(min(h.null$breaks), xmax),\n             col=hist.subset.col,\n             add=TRUE)\n      }\n\n    }else{\n      ## plot histogram of correlations btw real\n      ## SNPs and phenotype: ##\n      ## WITHOUT EXTENDING THE X-AXIS\n      plot(h.null,\n           main=paste(\"Null distribution of\", test, \"scores\"\n           # \\n (with significant SNPs indicated)\"\n                      , sep=\" \"),\n           xlab=paste(test, \"score\", sep=\" \"),\n           col=hist.col)\n\n      ## Add grey background? ##\n      if(!is.null(bg)){\n        if(bg != \"white\"){\n          lim <- par(\"usr\")\n          rect(lim[1],  lim[3], lim[2], lim[4], col=bg)\n\n          axis(1) ## add axes back\n          axis(2)\n\n          ## add grid:\n          if(grid == TRUE){\n            grid(col=\"white\", lwd=1, lty=1)\n          }\n\n          box()   ## and the plot frame\n\n          ## Re-plot original plot:\n          plot(h.null,\n               main=paste(\"Null distribution of\", test, \"scores\"\n                # \\n (with significant SNPs indicated)\"\n                          , sep=\" \"),\n               xlab=paste(test, \"score\", sep=\" \"),\n               col=hist.col,\n               add = TRUE)\n\n        }\n      } # end background\n\n      ## Overlay subset histogram:\n      if(!is.null(h.null.subset)){\n        plot(h.null.subset,\n             xlim=c(min(h.null$breaks), max(h.null$breaks)),\n             col=hist.subset.col,\n             add=TRUE)\n      }\n\n    }\n\n    ## Add box around periphery:\n    box()\n\n    #################\n    ## Add density curves?\n    # d <- density(dat1) # from=min(hist(dat1, plot=FALSE)$breaks) ## from=0\n    # ymax <- ceiling(max(d$y))\n    # # hist(dat, freq=F, xlim=c(0,1), ylim=c(0,ymax))\n    # # lines(d, col=\"red\", lwd=2, xlim=c(0,1), ylim=c(0,ymax))\n    # polygon(d, col=transp(\"red\", 0.25), border=\"red\", lwd=2, xlim=c(0,1), ylim=c(0,ymax))\n    #################\n\n    ## get significance threshold(s)\n    ## get colour scheme\n    ## from colour palette?\n    col.pals <- c(\"bluepal\", \"redpal\", \"greenpal\", \"greypal\",\n                  \"flame\", \"azur\",\n                  \"seasun\", \"lightseasun\", \"deepseasun\",\n                  \"spectral\", \"wasp\", \"funky\")\n    if(thresh.col %in% col.pals){\n      my.thresh.col <- eval(parse(text=paste(thresh.col, \"(\", length(sig.thresh), \")\")))\n    }else{\n      my.thresh.col <- rep(thresh.col, length(sig.thresh))\n    }\n\n    for(i in 1:length(sig.thresh)){\n\n      thresh <- sig.thresh[i]\n\n      ## move sig thresh below nearest points?\n      # thresh <- thresh-0.05\n\n      ## draw threshold line on plot:\n      # abline(v=thresh, col = my.thresh.col[i], lwd = 2)\n      lines(x=c(thresh, thresh), y=c(0, max(h.null$counts)), col=thresh.col[i], lwd=2)\n    } # end for loop plotting thresh lines\n\n    #######\n\n    ## get significant loci (incl. snps.assoc)\n    sig.loc <- NULL\n    if(!is.null(sig.snps)) sig.loc <- sig.snps\n    if(!is.null(snps.assoc)) sig.loc <- c(sig.loc, snps.assoc)\n    sig.loc <- unique(sig.loc)\n\n    # myCol <- rep(\"blue\", length(sig.loc))\n\n    ## sig.snps.col\n    if(!is.null(sig.loc)){\n      ## get colour\n      if(is.null(sig.snps.col)) sig.snps.col <- \"blue\"\n      myCol <- rep(sig.snps.col, length(sig.loc))\n    }\n\n    ## snps.assoc.col\n    if(!is.null(snps.assoc)){\n      ## modify colour\n      if(is.null(snps.assoc.col)) snps.assoc.col <- \"red\"\n      myCol[which(sig.loc %in% snps.assoc)] <- snps.assoc.col\n    }\n\n\n    ## overlay/highlight sig.loc\n    if(length(sig.loc) > 0){\n      X <- corr.dat[sig.loc]\n      ymin <- max(h.null$counts)/10 # 10%\n      ymax <- max(h.null$counts) - max(h.null$counts)/10 # 90%\n\n      Y <- seq(ymin, ymax, length.out = length(X))\n\n      ## ADD arrows pointing from each label to\n      ## position on X-axis:\n      arrows(x0=X , y0=Y ,\n             x1=X , y1=0 , col=myCol,\n             length=0.1, lwd=1)\n      ## add annotation text labelling SNPs >\n      ## threshold at their location on the x-axis:\n      text(x=X, y=Y, labels=sig.loc,\n           col=myCol, font=2, pos=4, cex=0.7)\n\n    }else{\n      text(x=(max(h.null$breaks)*3/4),\n           y=(max(h.null$counts)*3/4),\n           labels=\"no significant SNPs found\",\n           col=myCol, font=2, pos=2, cex = 0.7)\n    }\n\n  } # end plot.null.dist\n\n\n\n\n\n  ################################\n  ## plot.dist ###################\n  ################################\n\n  #################################################################\n  ## plot histogram of correlations btw real SNPs and phenotype: ##\n  #################################################################\n\n  if(plot.dist == TRUE){\n\n    h.null <- hist(as.vector(unlist(corr.dat)), plot=FALSE)\n\n    xmax <- ceiling(max(corr.dat)+.05)\n\n    ## if the true correlation value for SNP i is >\n    ## max bin, then extend the x-axis of the plot\n    ## to accommodate annotation:\n    if(xmax > max(h.null$breaks)){\n      ## plot histogram of correlations btw real\n      ## SNPs and phenotype: ##\n      ## EXTENDING THE X-AXIS\n      plot(h.null,\n           main=paste(\"Real distribution of\", test, \"scores\"\n                      # \\n (with significant SNPs indicated)\"\n                      , sep=\" \"),\n           xlab=paste(test, \"score\", sep=\" \"),\n           xlim=c(min(h.null$breaks), xmax),\n           col=hist.col)\n\n      ## Add grey background? ##\n      if(!is.null(bg)){\n        if(bg != \"white\"){\n          lim <- par(\"usr\")\n          rect(lim[1],  lim[3], lim[2], lim[4], col=bg)\n\n          axis(1) ## add axes back\n          axis(2)\n\n          ## add grid:\n          if(grid == TRUE){\n            grid(col=\"white\", lwd=1, lty=1)\n          }\n\n          box()   ## and the plot frame\n\n          ## Re-plot original plot:\n          plot(h.null,\n               main=paste(\"Real distribution of\", test, \"scores\"\n                      # \\n (with significant SNPs indicated)\"\n                          , sep=\" \"),\n               xlab=paste(test, \"score\", sep=\" \"),\n               xlim=c(min(h.null$breaks), xmax),\n               col=hist.col,\n               add = TRUE)\n\n        }\n      } # end background\n\n    }else{\n      ## plot histogram of correlations btw real\n      ## SNPs and phenotype: ##\n      ## WITHOUT EXTENDING THE X-AXIS\n      plot(h.null,\n           main=paste(\"Real distribution of\", test, \"scores\"\n                      # \\n (with significant SNPs indicated)\"\n                      , sep=\" \"),\n           xlab=paste(test, \"score\", sep=\" \"),\n           col=hist.col)\n\n      ## Add grey background? ##\n      if(!is.null(bg)){\n        if(bg != \"white\"){\n          lim <- par(\"usr\")\n          rect(lim[1],  lim[3], lim[2], lim[4], col=bg)\n\n          axis(1) ## add axes back\n          axis(2)\n\n          ## add grid:\n          if(grid == TRUE){\n            grid(col=\"white\", lwd=1, lty=1)\n          }\n\n          box()   ## and the plot frame\n\n          ## Re-plot original plot:\n          plot(h.null,\n               main=paste(\"Real distribution of\", test, \"scores\"\n                      # \\n (with significant SNPs indicated)\"\n                          , sep=\" \"),\n               xlab=paste(test, \"score\", sep=\" \"),\n               col=hist.col,\n               add = TRUE)\n\n        }\n      } # end background\n    }\n\n    ## Add box around periphery:\n    box()\n\n    #################\n\n    ## get significance threshold(s)\n    ## get colour scheme\n    ## from colour palette?\n    col.pals <- c(\"bluepal\", \"redpal\", \"greenpal\", \"greypal\",\n                  \"flame\", \"azur\",\n                  \"seasun\", \"lightseasun\", \"deepseasun\",\n                  \"spectral\", \"wasp\", \"funky\")\n    if(thresh.col %in% col.pals){\n      my.thresh.col <- eval(parse(text=paste(thresh.col, \"(\", length(sig.thresh), \")\")))\n    }else{\n      my.thresh.col <- rep(thresh.col, length(sig.thresh))\n    }\n\n    for(i in 1:length(sig.thresh)){\n\n      thresh <- sig.thresh[i]\n\n      ## move sig thresh below nearest points\n      # thresh <- thresh-0.05\n\n      ## draw threshold line on plot:\n      # abline(v=thresh, col = my.thresh.col[i], lwd = 2)\n      lines(x=c(thresh, thresh), y=c(0, max(h.null$counts)), col=thresh.col[i], lwd=2)\n    } # end for loop plotting thresh lines\n\n    #######\n\n    ## get significant loci (incl. snps.assoc)\n    sig.loc <- NULL\n    if(!is.null(sig.snps)) sig.loc <- sig.snps\n    if(!is.null(snps.assoc)) sig.loc <- c(sig.loc, snps.assoc)\n    sig.loc <- unique(sig.loc)\n\n    # myCol <- rep(\"blue\", length(sig.loc))\n\n    ## sig.snps.col\n    if(!is.null(sig.loc)){\n      ## get colour\n      if(is.null(sig.snps.col)) sig.snps.col <- \"blue\"\n      myCol <- rep(sig.snps.col, length(sig.loc))\n    }\n\n    ## snps.assoc.col\n    if(!is.null(snps.assoc)){\n      ## modify colour\n      if(is.null(snps.assoc.col)) snps.assoc.col <- \"red\"\n      myCol[which(sig.loc %in% snps.assoc)] <- snps.assoc.col\n    }\n\n\n    ## overlay/highlight sig.loc\n    if(length(sig.loc) > 0){\n      X <- corr.dat[sig.loc]\n      ymin <- max(h.null$counts)/10 # 10%\n      ymax <- max(h.null$counts) - max(h.null$counts)/10 # 90%\n\n      Y <- seq(ymin, ymax, length.out = length(X))\n\n      ## ADD arrows pointing from each label to\n      ## position on X-axis:\n      arrows(x0=X , y0=Y ,\n             x1=X , y1=0 , col=myCol,\n             length=0.1, lwd=1)\n      ## add annotation text labelling SNPs >\n      ## threshold at their location on the x-axis:\n      text(x=X, y=Y, labels=sig.loc,\n           col=myCol, font=2, pos=4, cex = 0.7)\n\n    }else{\n      text(x=(max(h.null$breaks)*3/4),\n           y=(max(h.null$counts)*3/4),\n           labels=\"no significant SNPs found\",\n           col=myCol, font=2, pos=2, cex = 0.7)\n    }\n\n  } # end plot.dist == TRUE\n\n\n  if(plot.null.dist==TRUE & plot.dist==TRUE) par(ask=FALSE)\n\n} # end plot.sig.snps\n\n\n\n\n\n\n\n\n#' ###################\n#' ## plot.sig.snps ##\n#' ###################\n#'\n#' ########################################################################\n#'\n#' ###################\n#' ## DOCUMENTATION ##\n#' ###################\n#'\n#' #' Short one-phrase description.\n#' #'\n#' #' Longer proper discription of function...\n#' #'\n#' #' @param arg Description.\n#' #'\n#' #'\n#' #' @author Caitlin Collins \\email{caitiecollins@@gmail.com}\n#' #' @export\n#' #'\n#' #' @import adegenet ape phangorn\n#'\n#' ########################################################################\n#'\n#'\n#' plot.sig.snps <- function(corr.dat, corr.sim,\n#'                           sig.corrs, sig.snps,\n#'                           sig.thresh, test,\n#'                           plot.null.dist=TRUE, plot.dist=FALSE){\n#'\n#'   thresh <- sig.thresh\n#'\n#'   if(plot.null.dist==TRUE & plot.dist==TRUE) par(ask=TRUE)\n#'\n#'   ## plot.null.dist #####################################\n#'\n#'   ###################################################\n#'   ## Add SNP annotations to histogram of null dist ##\n#'   ###################################################\n#'\n#'\n#'   ##############\n#'   ## TERMINAL ##\n#'   ##############\n#'   if(test==\"terminal\"){\n#'     ## plot.null.dist ##\n#'\n#'     ###########################################################\n#'     ## plot (null) hist of corr's btw SIMULATED SNPs n phen: ##\n#'     ###########################################################\n#'     ## plot correlations btw simulated SNPs and phenotype:\n#'     h.null <- hist(as.vector(unlist(corr.sim)), plot=FALSE)\n#'\n#'     ## get alternate (null dist) label heights:\n#'     X <- thresh\n#'     if(length(sig.corrs) > 0) X <- sig.corrs\n#'     Y.null <- runif(n=length(sig.snps), min=0.00001,\n#'                     max=max(h.null$counts))\n#'\n#'\n#'     if(plot.null.dist==TRUE){\n#'       ## if the true correlation value for SNP i is >\n#'       ## max bin, then extend the x-axis of the plot\n#'       ## to accommodate annotation:\n#'       if(max(X) > max(h.null$breaks)){\n#'         ## plot histogram of correlations btw real\n#'         ## SNPs and phenotype: ##\n#'         ## EXTENDING THE X-AXIS\n#'         plot(h.null,\n#'              main=\"Null distribution of Terminal Correlation Scores\n#'              \\n (with significant SNPs indicated)\",\n#'              xlab=\"Terminal Correlation Score\",\n#'              xlim=c(min(h.null$breaks), max(X)+.05))\n#'       }else{\n#'         ## plot histogram of correlations btw real\n#'         ## SNPs and phenotype: ##\n#'         ## WITHOUT EXTENDING THE X-AXIS\n#'         plot(h.null,\n#'              main=\"Null distribution of Terminal Correlation Scores\n#'              \\n (with significant SNPs indicated)\",\n#'              xlab=\"Terminal Correlation Score\"\n#'         )\n#'       }\n#'\n#'       ## ADD threshold line in red on x-axis where thresh hits...\n#'       abline(v=thresh, col=\"grey\", lwd=2, lty=2)\n#'       ## label threshold line(?)\n#'       text(x=thresh, y=(max(h.null$counts)),\n#'            labels=\"significance threshold\", pos=2,\n#'            col=\"grey\", font=4)\n#'       if(length(sig.snps) > 0){\n#'         ## ADD arrows pointing from each label to\n#'         ## position on X-axis:\n#'         arrows(x0=X , y0=(Y.null-(min(Y.null)/50)) ,\n#'                x1=X , y1=0 , col=\"blue\",\n#'                length=0.1, lwd=1)\n#'         ## add annotation text labelling SNPs >\n#'         ## threshold at their location on the x-axis:\n#'         text(x=X, y=Y.null, labels=sig.snps,\n#'              col=\"red\", font=2, pos=2)\n#'       }else{\n#'         text(x=thresh, y=(max(h.null$counts)/4)*3,\n#'              labels=\"no significant SNPs found\",\n#'              col=\"red\", font=2, pos=2)\n#'       }\n#'     } # end plot.null.dist\n#'   } # end test Terminal\n#'\n#'\n#'   ##################\n#'   ## SIMULTANEOUS ##\n#'   ##################\n#'   if(test==\"simultaneous\"){\n#'     ## plot.null.dist ##\n#'\n#'     ###########################################################\n#'     ## plot (null) hist of corr's btw SIMULATED SNPs n phen: ##\n#'     ###########################################################\n#'     ## plot correlations btw simulated SNPs and phenotype:\n#'     h.null <- hist(as.vector(unlist(corr.sim)), plot=FALSE)\n#'\n#'     ## get alternate (null dist) label heights:\n#'     X <- thresh\n#'     if(length(sig.corrs) > 0) X <- sig.corrs\n#'     Y.null <- runif(n=length(sig.snps), min=0.00001,\n#'                     max=max(h.null$counts))\n#'\n#'\n#'     if(plot.null.dist==TRUE){\n#'       ## if the true correlation value for SNP i is >\n#'       ## max bin, then extend the x-axis of the plot\n#'       ## to accommodate annotation:\n#'       if(max(X) > max(h.null$breaks)){\n#'         ## plot histogram of correlations btw real\n#'         ## SNPs and phenotype: ##\n#'         ## EXTENDING THE X-AXIS\n#'         plot(h.null,\n#'              main=\"Null distribution of Simultaneous Scores\n#'              \\n (with significant SNPs indicated)\",\n#'              xlab=\"Simultaneous Score\",\n#'              xlim=c(min(h.null$breaks), max(X)+.05))\n#'       }else{\n#'         ## plot histogram of correlations btw real\n#'         ## SNPs and phenotype: ##\n#'         ## WITHOUT EXTENDING THE X-AXIS\n#'         plot(h.null,\n#'              main=\"Null distribution of Simultaneous Scores\n#'              \\n (with significant SNPs indicated)\",\n#'              xlab=\"Simultaneous Score\"\n#'         )\n#'       }\n#'\n#'       ## ADD threshold line in red on x-axis where thresh hits...\n#'       abline(v=thresh, col=\"grey\", lwd=2, lty=2)\n#'       ## label threshold line(?)\n#'       text(x=thresh, y=(max(h.null$counts)),\n#'            labels=\"significance threshold\", pos=2,\n#'            col=\"grey\", font=4)\n#'       if(length(sig.snps) > 0){\n#'         ## ADD arrows pointing from each label to\n#'         ## position on X-axis:\n#'         arrows(x0=X , y0=(Y.null-(min(Y.null)/50)) ,\n#'                x1=X , y1=0 , col=\"blue\",\n#'                length=0.1, lwd=1)\n#'         ## add annotation text labelling SNPs >\n#'         ## threshold at their location on the x-axis:\n#'         text(x=X, y=Y.null, labels=sig.snps,\n#'              col=\"red\", font=2, pos=2)\n#'       }else{\n#'         text(x=thresh, y=(max(h.null$counts)/4)*3,\n#'              labels=\"no significant SNPs found\",\n#'              col=\"red\", font=2, pos=2)\n#'       }\n#'     } # end plot.null.dist\n#'   } # end test Simultaneous\n#'\n#'   ################\n#'   ## SUBSEQUENT ##\n#'   ################\n#'   if(test==\"subsequent\"){\n#'     ## plot.null.dist ##\n#'\n#'     ###########################################################\n#'     ## plot (null) hist of corr's btw SIMULATED SNPs n phen: ##\n#'     ###########################################################\n#'     ## plot correlations btw simulated SNPs and phenotype:\n#'     h.null <- hist(as.vector(unlist(corr.sim)), plot=FALSE)\n#'\n#'     ## get alternate (null dist) label heights:\n#'     X <- thresh\n#'     if(length(sig.corrs) > 0) X <- sig.corrs\n#'     Y.null <- runif(n=length(sig.snps), min=0.00001,\n#'                     max=max(h.null$counts))\n#'\n#'\n#'     if(plot.null.dist==TRUE){\n#'       ## if the true correlation value for SNP i is >\n#'       ## max bin, then extend the x-axis of the plot\n#'       ## to accommodate annotation:\n#'       if(max(X) > max(h.null$breaks)){\n#'         ## plot histogram of correlations btw real\n#'         ## SNPs and phenotype: ##\n#'         ## EXTENDING THE X-AXIS\n#'         plot(h.null,\n#'              main=\"Null distribution of Subsequent Scores\n#'              \\n (with significant SNPs indicated)\",\n#'              xlab=\"Subsequent Score\",\n#'              xlim=c(min(h.null$breaks), max(X)+.05))\n#'       }else{\n#'         ## plot histogram of correlations btw real\n#'         ## SNPs and phenotype: ##\n#'         ## WITHOUT EXTENDING THE X-AXIS\n#'         plot(h.null,\n#'              main=\"Null distribution of Subsequent Scores\n#'              \\n (with significant SNPs indicated)\",\n#'              xlab=\"Subsequent Score\"\n#'         )\n#'       }\n#'\n#'       ## ADD threshold line in red on x-axis where thresh hits...\n#'       abline(v=thresh, col=\"grey\", lwd=2, lty=2)\n#'       ## label threshold line(?)\n#'       text(x=thresh, y=(max(h.null$counts)),\n#'            labels=\"significance threshold\", pos=2,\n#'            col=\"grey\", font=4)\n#'       if(length(sig.snps) > 0){\n#'         ## ADD arrows pointing from each label to\n#'         ## position on X-axis:\n#'         arrows(x0=X , y0=(Y.null-(min(Y.null)/50)) ,\n#'                x1=X , y1=0 , col=\"blue\",\n#'                length=0.1, lwd=1)\n#'         ## add annotation text labelling SNPs >\n#'         ## threshold at their location on the x-axis:\n#'         text(x=X, y=Y.null, labels=sig.snps,\n#'              col=\"red\", font=2, pos=2)\n#'       }else{\n#'         text(x=thresh, y=(max(h.null$counts)/4)*3,\n#'              labels=\"no significant SNPs found\",\n#'              col=\"red\", font=2, pos=2)\n#'       }\n#'     } # end plot.null.dist\n#'   } # end test Subsequent\n#'\n#'\n#'   #################\n#'   ## CORRELATION ##\n#'   #################\n#'   if(test==\"cor\"){\n#'     ## plot.null.dist ##\n#'\n#'     ###########################################################\n#'     ## plot (null) hist of corr's btw SIMULATED SNPs n phen: ##\n#'     ###########################################################\n#'     ## plot correlations btw simulated SNPs and phenotype:\n#'     h.null <- hist(as.vector(unlist(corr.sim)), plot=FALSE)\n#'\n#'     ## get alternate (null dist) label heights:\n#'     X <- thresh\n#'     if(length(sig.corrs) > 0) X <- sig.corrs\n#'     Y.null <- runif(n=length(sig.snps), min=0.00001,\n#'                     max=max(h.null$counts))\n#'\n#'\n#'     if(plot.null.dist==TRUE){\n#'\n#'       ## if the true correlation value for SNP i is >\n#'       ## max bin, then extend the x-axis of the plot\n#'       ## to accommodate annotation:\n#'       if(max(X) > max(h.null$breaks)){\n#'         ## plot histogram of correlations btw real\n#'         ## SNPs and phenotype: ##\n#'         ## EXTENDING THE X-AXIS\n#'         plot(h.null,\n#'              main=\"Null distribution of correlations\n#'              \\n (with significant SNPs indicated)\",\n#'              xlab=\"Correlation\",\n#'              xlim=c(min(h.null$breaks), max(X)+.05))\n#'       }else{\n#'         ## plot histogram of correlations btw real\n#'         ## SNPs and phenotype: ##\n#'         ## WITHOUT EXTENDING THE X-AXIS\n#'         plot(h.null,\n#'              main=\"Null distribution of correlations\n#'              \\n (with significant SNPs indicated)\",\n#'              xlab=\"Correlation\"\n#'         )\n#'       }\n#'\n#'       ## ADD threshold line in red on x-axis where thresh hits...\n#'       abline(v=thresh, col=\"grey\", lwd=2, lty=2)\n#'       ## label threshold line(?)\n#'       text(x=thresh, y=(max(h.null$counts)),\n#'            labels=\"significance threshold\", pos=2,\n#'            col=\"grey\", font=4)\n#'       if(length(sig.snps) > 0){\n#'         ## ADD arrows pointing from each label to\n#'         ## position on X-axis:\n#'         arrows(x0=X , y0=(Y.null-(min(Y.null)/50)) ,\n#'                x1=X , y1=0 , col=\"blue\", length=0.1, lwd=1)\n#'         ## add annotation text labelling SNPs >\n#'         ## threshold at their location on the x-axis:\n#'         text(x=X, y=Y.null, labels=sig.snps,\n#'              col=\"red\", font=2)\n#'       }else{\n#'         text(x=thresh, y=(max(h.null$counts)/4)*3,\n#'              labels=\"no significant SNPs found\",\n#'              col=\"red\", font=2, pos=2)\n#'       }\n#'     } # end plot.null.dist\n#'     } # end test cor\n#'\n#'\n#'   #########################\n#'   ## FISHER'S EXACT TEST ##\n#'   #########################\n#'   if(test==\"fisher\"){\n#'     ## plot.null.dist ##\n#'\n#'     ###########################################################\n#'     ## plot (null) hist of corr's btw SIMULATED SNPs n phen: ##\n#'     ###########################################################\n#'     ## plot correlations btw simulated SNPs and phenotype:\n#'     h.null <- hist(as.vector(unlist(corr.sim)), plot=FALSE)\n#'\n#'     ## get alternate (null dist) label heights:\n#'     X <- thresh\n#'     if(length(sig.corrs) > 0) X <- sig.corrs\n#'     Y.null <- runif(n=length(sig.snps), min=0.00001,\n#'                     max=max(h.null$counts))\n#'\n#'     if(plot.null.dist==TRUE){\n#'       ## if the true correlation value for SNP i is <\n#'       ## min bin, then extend the x-axis of the plot to\n#'       ## accommodate annotation:\n#'       if(min(X) < min(h.null$breaks)){\n#'         ## plot histogram of correlations btw real\n#'         ## SNPs and phenotype: ##\n#'         ## EXTENDING THE X-AXIS\n#'         plot(h.null,\n#'              main=\"Null distribution of Fisher's exact test p-values\n#'              \\n (with significant SNPs indicated)\",\n#'              xlab=\"p-value\",\n#'              xlim=c((min(X)-.05), max(h.null$breaks)))\n#'       }else{\n#'         ## plot histogram of correlations btw real SNPs and phenotype: ##\n#'         ## WITHOUT EXTENDING THE X-AXIS\n#'         plot(h.null,\n#'              main=\"Null distribution of Fisher's exact test p-values\n#'              \\n (with significant SNPs indicated)\",\n#'              xlab=\"p-value\"\n#'         )\n#'       }\n#'\n#'       ## ADD threshold line in red on x-axis where thresh hits...\n#'       abline(v=thresh, col=\"grey\", lwd=2, lty=2)\n#'       ## label threshold line(?)\n#'       text(x=thresh, y=(max(h.null$counts)),\n#'            labels=\"significance threshold\", pos=4,\n#'            col=\"grey\", font=4)\n#'       ## only ask to draw arrows if sig snps exist\n#'       if(length(sig.snps) > 0){\n#'         ## ADD arrows pointing from each label to\n#'         ## position on X-axis:\n#'         arrows(x0=X , y0=(Y.null-(min(Y.null)/50)) ,\n#'                x1=X , y1=0 , col=\"blue\", length=0.1, lwd=1)\n#'         ## add annotation text labelling SNPs >\n#'         ## threshold at their location on the x-axis:\n#'         text(x=X, y=Y.null, labels=sig.snps,\n#'              col=\"red\", font=2, pos=4)\n#'       }else{\n#'         text(x=thresh, y=(max(h.null$counts)/4)*3,\n#'              labels=\"no significant SNPs found\",\n#'              col=\"red\", font=2, pos=4)\n#'       }\n#'     } # end plot.null.dist\n#'   } # end test fisher\n#'\n#'\n#'   ## plot.dist ###################\n#'\n#'   #################################################################\n#'   ## plot histogram of correlations btw real SNPs and phenotype: ##\n#'   #################################################################\n#'\n#'   ###########\n#'   ## SCORE ##\n#'   ###########\n#'   if(test==\"score\"){\n#'     ## plot.dist ##\n#'\n#'     #################################################################\n#'     ## plot histogram of correlations btw real SNPs and phenotype: ##\n#'     #################################################################\n#'     ## get histogram of correlations btw real SNPs and phenotype:\n#'     h <- hist(corr.dat, plot=FALSE)\n#'     ## get X and Y coords for labelling positions of all sig SNPs\n#'     X <- sig.corrs\n#'     ## get the number of sig SNPs in each bin of the histogram\n#'     ## counting correlations==upper limit of each bin\n#'     ## as falling within that bin...\n#'     sig.counts <- sapply(c(1:(length(h$breaks)-1)),\n#'                          function(e) length(X[which(X[which(X <=\n#'                                                               h$breaks[(e+1)])] > h$breaks[e])]))\n#'     ## keep only counts > 0\n#'     sig.counts <- sig.counts[which(sig.counts > 0)]\n#'     ## get label heights:\n#'     Y <- list()\n#'     ## get average height of labels\n#'     Y.avg <- max(h$counts)/4\n#'     ## for bins with > 1 sig SNP, adjust height\n#'     if(length(sig.counts)!=0){\n#'       for(i in 1:length(sig.counts)){\n#'         if(!.is.integer0(sig.counts[i])){\n#'           if(sig.counts[i]==1){\n#'             Y[[i]] <- Y.avg\n#'           }else{\n#'             ## divide up the space on the y-axis into\n#'             ## increments (adding 1 to the denomenator\n#'             ## s.t y-max not exceeded)\n#'             increment <- max(h$counts)/(sig.counts[i]+1)\n#'             Y[[i]] <- increment*c(1:sig.counts[i])\n#'           }\n#'         }\n#'       } # end for loop\n#'     }\n#'     Y <- as.vector(unlist(Y))\n#'\n#'     if(plot.dist==TRUE){\n#'\n#'       ## plot histogram of correlations btw real SNPs and phenotype: ##\n#'       plot(h, main=\"Distribution of SNP-trait correlations\n#'            \\n (with significant SNPs indicated if present)\")\n#'       ## ADD threshold line in red on x-axis where thresh hits...\n#'       abline(v=thresh, col=\"grey\", lwd=2, lty=2)\n#'       ## label threshold line(?)\n#'       text(x=thresh, y=(max(h$counts)),\n#'            labels=\"significance threshold\",\n#'            col=\"grey\", pos=2, font=4)\n#'\n#'       ## Only ask to draw arrows if at least 1 significant SNP:\n#'       if(length(sig.snps) > 0){\n#'         ## ADD arrows pointing from each label to position on X-axis:\n#'         arrows(x0=X , y0=(Y-(max(h$counts)/50)) ,\n#'                x1=X , y1=0 ,\n#'                col=\"blue\", length=0.1, lwd=1)\n#'         ## add annotation text labelling SNPs >\n#'         ## threshold at their location on the x-axis:\n#'         text(x=X, y=Y, labels=sig.snps,\n#'              col=\"red\", font=2, pos=2)\n#'       }else{\n#'         text(x=thresh, y=(max(h$counts)/4)*3,\n#'              labels=\"no significant SNPs found\",\n#'              col=\"red\", font=2, pos=2)\n#'       }\n#'     } # end plot.dist\n#'   } # end test score\n#'\n#'   #################\n#'   ## CORRELATION ##\n#'   #################\n#'   if(test==\"cor\"){\n#'     ## plot.dist ##\n#'\n#'     #################################################################\n#'     ## plot histogram of correlations btw real SNPs and phenotype: ##\n#'     #################################################################\n#'     ## get histogram of correlations btw real SNPs and phenotype:\n#'     h <- hist(corr.dat, plot=FALSE)\n#'     ## get X and Y coords for labelling positions of all sig SNPs\n#'     X <- sig.corrs\n#'     ## get the number of sig SNPs in each bin of the histogram\n#'     ## counting correlations==upper limit of each bin as falling\n#'     ## within that bin...\n#'     sig.counts <- sapply(c(1:(length(h$breaks)-1)),\n#'                          function(e) length(X[which(X[which(X <=\n#'                                                               h$breaks[(e+1)])] > h$breaks[e])]))\n#'     ## keep only counts > 0\n#'     sig.counts <- sig.counts[which(sig.counts > 0)]\n#'     ## get label heights:\n#'     Y <- list()\n#'     ## get average height of labels\n#'     Y.avg <- max(h$counts)/4\n#'     ## for bins with > 1 sig SNP, adjust height\n#'     if(length(sig.counts)!=0){\n#'       for(i in 1:length(sig.counts)){\n#'         if(!.is.integer0(sig.counts[i])){\n#'           if(sig.counts[i]==1){\n#'             Y[[i]] <- Y.avg\n#'           }else{\n#'             ## divide up the space on the y-axis into\n#'             ## increments (adding 1 to the denomenator\n#'             ## s.t y-max not exceeded)\n#'             increment <- max(h$counts)/(sig.counts[i]+1)\n#'             Y[[i]] <- increment*c(1:sig.counts[i])\n#'           }\n#'         }\n#'       } # end for loop\n#'     }\n#'     Y <- as.vector(unlist(Y))\n#'\n#'     if(plot.dist==TRUE){\n#'\n#'       ## plot histogram of correlations btw real\n#'       ## SNPs and phenotype: ##\n#'       plot(h, main=\"Distribution of SNP-trait\n#'            correlations \\n (with significant SNPs indicated if present)\")\n#'       ## ADD threshold line in red on x-axis where thresh hits...\n#'       abline(v=thresh, col=\"grey\", lwd=2, lty=2)\n#'       ## label threshold line(?)\n#'       text(x=thresh, y=(max(h$counts)),\n#'            labels=\"significance threshold\",\n#'            col=\"grey\", pos=2, font=4)\n#'\n#'       ## Only ask to draw arrows if at least 1 significant SNP:\n#'       if(length(sig.snps) > 0){\n#'         ## ADD arrows pointing from each\n#'         ## label to position on X-axis:\n#'         arrows(x0=X , y0=(Y-(max(h$counts)/50)) ,\n#'                x1=X , y1=0 , col=\"blue\", length=0.1, lwd=1)\n#'         ## add annotation text labelling SNPs >\n#'         ## threshold at their location on the x-axis:\n#'         text(x=X, y=Y, labels=sig.snps, col=\"red\", font=2)\n#'       }else{\n#'         text(x=thresh, y=(max(h$counts)/4)*3,\n#'              labels=\"no significant SNPs found\",\n#'              col=\"red\", font=2, pos=2)\n#'       }\n#'     } # end plot.dist\n#'   } # end test cor\n#'\n#'\n#'   #########################\n#'   ## FISHER'S EXACT TEST ##\n#'   #########################\n#'   if(test==\"fisher\"){\n#'     ## plot.dist ##\n#'\n#'     ############################################################\n#'     ## plot histogram of correlations btw real SNPs and phen: ##\n#'     ############################################################\n#'\n#'     ## get histogram of correlations btw real SNPs and phenotype:\n#'     h <- hist(corr.dat, plot=FALSE)\n#'     ## get X and Y coords for labelling positions of all sig SNPs\n#'     X <- thresh\n#'     if(length(sig.corrs) > 0) X <- sig.corrs\n#'     ## get the number of sig SNPs in each bin of the histogram\n#'     ## counting correlations==upper limit of each bin as\n#'     ## falling within that bin...\n#'     sig.counts <- sapply(c(1:(length(h$breaks)-1)),\n#'                          function(e) length(X[which(X[which(X <=\n#'                                                               h$breaks[(e+1)])] > h$breaks[e])]))\n#'     ## keep only counts > 0\n#'     sig.counts <- sig.counts[which(sig.counts > 0)]\n#'     ## get label heights:\n#'     Y <- list()\n#'     ## get average height of labels\n#'     Y.avg <- max(h$counts)/4\n#'     ## for bins with > 1 sig SNP, adjust height\n#'     if(length(sig.counts)!=0){\n#'       for(i in 1:length(sig.counts)){\n#'         if(!.is.integer0(sig.counts[i])){\n#'           if(sig.counts[i]==1){\n#'             Y[[i]] <- Y.avg\n#'           }else{\n#'             ## divide up the space on the y-axis into\n#'             ## increments (adding 1 to the denomenator s.t y-max not exceeded)\n#'             increment <- max(h$counts)/(sig.counts[i]+1)\n#'             Y[[i]] <- increment*c(1:sig.counts[i])\n#'           }\n#'         }\n#'       } # end for loop\n#'     }\n#'     Y <- as.vector(unlist(Y))\n#'\n#'     if(plot.dist==TRUE){\n#'\n#'       ## plot histogram of correlations btw real SNPs and phenotype: ##\n#'       plot(h, main=\"Distribution of SNP-trait correlations\n#'            \\n (with significant SNPs indicated if present)\")\n#'       ## ADD threshold line in red on x-axis where thresh hits...\n#'       abline(v=thresh, col=\"grey\", lwd=2, lty=2)\n#'       ## label threshold line(?)\n#'       text(x=thresh, y=(max(h$counts)),\n#'            labels=\"significance threshold\",\n#'            col=\"grey\", pos=4, font=4)\n#'\n#'       ## Only ask to draw arrows if at least 1 significant SNP:\n#'       if(length(sig.snps) > 0){\n#'         ## ADD arrows pointing from each label to\n#'         ## position on X-axis:\n#'         arrows(x0=X , y0=(Y-(max(h$counts)/50)) ,\n#'                x1=X , y1=0 , col=\"blue\", length=0.1, lwd=1)\n#'         ## add annotation text labelling SNPs > threshold at their location on the x-axis:\n#'         text(x=X, y=Y, labels=sig.snps,\n#'              col=\"red\", font=2, pos=4)\n#'       }else{\n#'         text(x=thresh, y=(max(h$counts)/4)*3,\n#'              labels=\"no significant SNPs found\",\n#'              col=\"red\", font=2, pos=4)\n#'       }\n#'     } # end plot.dist\n#'   } # end test fisher\n#'\n#'   if(plot.null.dist==TRUE & plot.dist==TRUE) par(ask=FALSE)\n#'\n#' } # end plot.sig.snps\n",
    "created" : 1478036914692.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3654226172",
    "id" : "F78CDEA7",
    "lastKnownWriteTime" : 1478037981,
    "path" : "C:/Users/Caitlin/treeWAS/pkg/R/plot.sig.snps.R",
    "project_path" : "R/plot.sig.snps.R",
    "properties" : {
    },
    "relative_order" : 17,
    "source_on_save" : false,
    "type" : "r_source"
}