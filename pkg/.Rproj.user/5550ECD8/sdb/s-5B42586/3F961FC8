{
    "contents" : "\n#####################\n## get.fitch.n.mts ##\n#####################\n## phangorn-based fitch fn\n\n########################################################################\n\n###################\n## DOCUMENTATION ##\n###################\n\n#' Caclulate parsimony scores.\n#'\n#' Determine parsimony scores for all genetic loci and a given tree.\n#' An extension of the fitch function available in package phangorn.\n#'\n#' @param snps A numeric matrix containing two unique values with row.names matching tree tip.labels.\n#' @param tree A phylo object.\n#'\n#' @author Caitlin Collins \\email{caitiecollins@@gmail.com}\n#'\n#' @examples\n#'\n#' ## generate a tree\n#' tree <- rtree(100)\n#' ## geerate snps, a matrix of 0s and 1s\n#' snps <- matrix(sample(c(0,1),100000,T), nrow=100)\n#' row.names(snps) <- tree$tip.label\n#'\n#' ## run function\n#' out <- get.fitch.n.mts(snps, tree)\n#'\n#' ## examine output\n#' str(out)\n#' table(out)\n#' hist(out)\n#'\n#' @import phangorn\n#'\n#' @export\n\n########################################################################\n\nget.fitch.n.mts <- function(snps, tree){\n\n  ## load packages\n  # require(phangorn)\n\n  ## checks\n  if(!is.matrix(snps)) stop(\"snps must be of class matrix.\")\n  if(!is.numeric(snps) | length(unique(as.vector(snps)))!=2){\n    stop(\"snps must be a numeric matrix with exactly two unique values.\")\n  }\n  snps.levels <- unique(as.vector(snps))\n  ## returns only unique patterns...\n  snps.phyDat <- as.phyDat(as.matrix(snps),\n                           type=\"USER\", levels=snps.levels)\n  ## get index of all original snps columns to map to unique pattern\n  index <- attr(snps.phyDat, \"index\")\n\n  fitch.phangorn <- phangorn::fitch\n  ## get parsimony score for all unique patterns in snps\n  ## NB: For fitch.phangorn, snps data must be of class phyDat\n  fitch.unique <- fitch.phangorn(tree, snps.phyDat, site=\"site\")\n  # table(fitch.unique)\n\n  ## get score for all original sites\n  fitch.complete <- fitch.unique[index]\n  return(fitch.complete)\n} # end get.fitch.n.mts\n\n\n\n\n",
    "created" : 1478015599274.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "899493343",
    "id" : "3F961FC8",
    "lastKnownWriteTime" : 1469465272,
    "path" : "C:/Users/Caitlin/treeWAS/pkg/R/fitch.R",
    "project_path" : "R/fitch.R",
    "properties" : {
    },
    "relative_order" : 16,
    "source_on_save" : false,
    "type" : "r_source"
}