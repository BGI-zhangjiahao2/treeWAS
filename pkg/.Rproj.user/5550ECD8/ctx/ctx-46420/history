p.thresh <- p.value # 0.05 # 0.01 # 0.001 # ??
## Uncorrected ##
plink.assoc.snps.uncorr <- snps.names[which(pval.plink.assoc < p.thresh)]
## Bonferonni ##
p.vals.bonf <- p.adjust(pval.plink.assoc, "bonferroni")
p.bonf <- which(p.vals.bonf < p.thresh)
plink.assoc.snps.bonf <- snps.names[p.bonf]
## FDR ##
p.vals.fdr <- p.adjust(pval.plink.assoc, "fdr")
p.fdr <- which(p.vals.fdr < p.thresh)
plink.assoc.snps.fdr <- snps.names[p.fdr]
## CONVERT 0-LENGTH RESULTS TO NULL
if(length(plink.assoc.snps.uncorr) == 0) plink.assoc.snps.uncorr <- NULL
if(length(plink.assoc.snps.bonf) == 0) plink.assoc.snps.bonf <- NULL
if(length(plink.assoc.snps.fdr) == 0) plink.assoc.snps.fdr <- NULL
## STORE PLINK TEST RESULTS ##
plink.assoc.results <- list(pval.plink.assoc, plink.assoc.snps.uncorr, plink.assoc.snps.bonf, plink.assoc.snps.fdr)
names(plink.assoc.results) <- c("pval.plink.assoc", "plink.assoc.snps.uncorr", "plink.assoc.snps.bonf", "plink.assoc.snps.fdr")
## perform a basic association analysis on the disease trait for all single SNPs
if(Windows == FALSE){
filename <- paste("\\media\\caitiecollins\\88CC9BCECC9BB4C2\\PLINK\\", uniqueID, sep="")
}else{
filename <- paste("C:\\PLINK\\", uniqueID, sep="")
}
command <- paste("plink --bfile ",  filename, " --assoc --adjust --gc --counts --allow-no-sex --out ", filename, sep="")
## Run command
if(Windows == FALSE){
system(command)
}else{
shell(command)
}
## to view the file you created, just read it in with R:
if(Windows == FALSE){
filename <- paste("/media/caitiecollins/88CC9BCECC9BB4C2/PLINK/", uniqueID, ".assoc.adjusted", sep="")
}else{
filename <- paste("C:/PLINK/", uniqueID, ".assoc.adjusted", sep="")
}
plink.res <- read.table(filename, header=TRUE)
head(plink.res)
## get p.vals
pval.plink.assoc.gc <- plink.res$P
## get sig ##
## p.thresh:
p.thresh <- p.value # 0.05 # 0.01 # 0.001 # ??
## Uncorrected ##
plink.assoc.gc.snps.uncorr <- snps.names[which(pval.plink.assoc.gc < p.thresh)]
## Bonferonni ##
p.vals.bonf <- p.adjust(pval.plink.assoc.gc, "bonferroni")
p.bonf <- which(p.vals.bonf < p.thresh)
plink.assoc.gc.snps.bonf <- snps.names[p.bonf]
## FDR ##
p.vals.fdr <- p.adjust(pval.plink.assoc.gc, "fdr")
p.fdr <- which(p.vals.fdr < p.thresh)
plink.assoc.gc.snps.fdr <- snps.names[p.fdr]
## CONVERT 0-LENGTH RESULTS TO NULL
if(length(plink.assoc.snps.uncorr) == 0) plink.assoc.gc.snps.uncorr <- NULL
if(length(plink.assoc.snps.bonf) == 0) plink.assoc.gc.snps.bonf <- NULL
if(length(plink.assoc.snps.fdr) == 0) plink.assoc.gc.snps.fdr <- NULL
## STORE PLINK TEST RESULTS ##
plink.assoc.gc.results <- list(pval.plink.assoc.gc, plink.assoc.gc.snps.uncorr, plink.assoc.gc.snps.bonf, plink.assoc.gc.snps.fdr)
names(plink.assoc.gc.results) <- c("pval.plink.assoc.gc", "plink.assoc.gc.snps.uncorr", "plink.assoc.gc.snps.bonf", "plink.assoc.gc.snps.fdr")
############################################
## STORE COMBINED PLINK RESULTS ##
plink.results <- list(plink.assoc.results,
plink.assoc.gc.results)
head(plink.results[[1]])
snps.assoc
source('C:/Users/Caitlin/treeWAS/pkg/R/simTest.R')
source('C:/Users/Caitlin/treeWAS/pkg/R/simTest.R')
out <- simTest(
## simTest args:
set.number = 3, # 2,
n.reps = 2,
set.seed.as = "file.number",
working.dir = "/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims",
## data from file args:
from.file = FALSE,
file.n =NULL,
Windows=TRUE,
## coalescent.sim args:
n.ind = 100,
n.snps = 10000, # gen.size
# sim.by = "locus",
n.subs = 1, # theta (*2)
n.phen.subs = NULL, # theta_p = NULL # 15
n.snps.assoc = 10, # = 0
# assoc.option = "all",
assoc.prob = 100, # 90, #
grp.min = 0.25,
## treeWAS args:
## RUNNING ALL OF THESE OPTIONS (FOR NOW):
p.value = 0.05, # REQUIRED FOR FISHER TEST
#   p.value.correct = c("bonf", "fdr", FALSE), #mt.correct = FALSE
#   p.value.by = c("count", "density"),
sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL
treeWAS.test = c("terminal", "simultaneous", "subsequent"), # "score"
snps.reconstruction = "parsimony",
phen.reconstruction = "parsimony"
)
load("C:/Cait 2016/Work/Xavier/Sims/set3/set3_7_score3.Rdata")
load("C:/Cait 2016/Work/Xavier/Sims/set3/set3_7_performance.Rdata")
load("C:/Cait 2016/Work/Xavier/Sims/set3/set3_7_tree.Rdata")
snps.assoc <- performance$snps.assoc
SCORE3 <- score3
source('C:/Users/Caitlin/treeWAS/pkg/R/get.sig.snps.eval.R')
Q.ew <- score3$corr.dat[[13]]
Q.uw <- score3$corr.dat[[14]]
Q.uw[[snps.assoc[1]]]
score3.raw <- score3$corr.dat[[6]]
i <- snps.assoc[1]
Qi <- Q.uw[[snps.assoc[1]]]
score3 <- SCORE3$corr.dat[[6]]
Qi*length(score3[!is.na(score3)])
length(score3)
length(score3[[1]])
Qi*length(score3[[snps.assoc[1]]][!is.na(score3[[snps.assoc[1]]])])
Qi.subs <- Qi*length(score3[[snps.assoc[1]]][!is.na(score3[[snps.assoc[1]]])])
temp <- sapply(c(1:nrow(Qi.subs)),
function(e)
Qi.subs/sum(Qi.subs[e,]))
temp
e <- 1
sum(Qi.subs[e,])
Qi.subs
temp <- sapply(c(1:nrow(Qi.subs)),
function(e)
Qi.subs[e,]/sum(Qi.subs[e,]))
temp
colnames(temp) <- rownames(temp) <- colnames(Qi.subs)
temp
sum(temp[1,])
Qi.subs
3/14
sum(temp[,1])
temp <- t(sapply(c(1:nrow(Qi.subs)),
function(e)
Qi.subs[e,]/sum(Qi.subs[e,])))
colnames(temp) <- rownames(temp) <- colnames(Qi.subs)
temp
sum(temp[1,])
sum(temp[2,])
sum(temp[3,])
sum(temp[4,])
temp.uw <- temp
identical(Q.uw, SCORE3$corr.dat[[14]])
Q.ew <- SCORE3$corr.dat[[13]]
i <- snps.assoc[1]
i <- snps.assoc[1]
Qi <- Q.ew[[i]]
Qi.subs <- Qi*length(score3[[i]][!is.na(score3[[i]])])
Qi.subs
Qi <- Q.uw[[i]]
Qi.subs <- Qi*length(score3[[i]][!is.na(score3[[i]])])
# NOTICE much heavier diagonal :)
## re-weight by ROW?:
temp <- t(sapply(c(1:nrow(Qi.subs)),
function(e)
Qi.subs[e,]/sum(Qi.subs[e,])))
colnames(temp) <- rownames(temp) <- colnames(Qi.subs)
temp.uw <- temp
temp.uw
Qi <- Q.ew[[i]]
## get NUMBERS of subs:
Qi.ew <- Qi*length(score3[[i]][!is.na(score3[[i]])])
Qi.ew
sum(tree$edge.length)
Qi <- Q.ew[[i]]
## get sum of edge lengths with these subs:
Qi.ew <- Qi*sum(tree$edge.length[!is.na(score3[[i]])])
Qi.ew
sum(Qi.ew)
sum(tree$edge.length[!is.na(score3[[i]])])
temp <- t(sapply(c(1:nrow(Qi.ew)),
function(e)
Qi.ew[e,]/sum(Qi.ew[e,])))
colnames(temp) <- rownames(temp) <- colnames(Qi.ew)
temp.ew <- temp
temp.ew
sum(temp.ew[1,])
tree$edge.length[!is.na(score3[[i]])]
round(tree$edge.length[!is.na(score3[[i]])], 2)
temp.uw
temp.ew
Qi.ew
Q.ew[[i]]
i <- snps.assoc[2]
Qi <- Q.uw[[i]]
Qi
Qi.subs <- Qi*length(score3[[i]][!is.na(score3[[i]])])
Qi.subs
temp <- t(sapply(c(1:nrow(Qi.subs)),
function(e)
Qi.subs[e,]/sum(Qi.subs[e,])))
colnames(temp) <- rownames(temp) <- colnames(Qi.subs)
temp.uw <- temp
temp.uw
i
snps.assoc
i <- snps.assoc[6]
i
Qi <- Q.uw[[i]]
Qi
Qi.subs <- Qi*length(score3[[i]][!is.na(score3[[i]])])
Qi.subs
snps <- get(load("C:/Cait 2016/Work/Xavier/Sims/set3/set3_7_snps.Rdata"))
phen <- get(load("C:/Cait 2016/Work/Xavier/Sims/set3/set3_7_phen.Rdata"))
data.frame(snps[,snps.assoc[6]], phen)
length(snps)
str(snps)
str(phen)
phen <- get(load("C:/Cait 2016/Work/Xavier/Sims/set3/set3_7_phen.Rdata"))
str(phen)
str(foo)
source('C:/Users/Caitlin/treeWAS/pkg/R/simTest.R')
source('C:/Users/Caitlin/treeWAS/pkg/R/simTest.R')
out <- simTest(
## simTest args:
set.number = 3, # 2,
n.reps = 1,
set.seed.as = "file.number",
working.dir = "/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims",
## data from file args:
from.file = FALSE,
file.n =NULL,
Windows=TRUE,
## coalescent.sim args:
n.ind = 100,
n.snps = 10000, # gen.size
# sim.by = "locus",
n.subs = 1, # theta (*2)
n.phen.subs = NULL, # theta_p = NULL # 15
n.snps.assoc = 10, # = 0
# assoc.option = "all",
assoc.prob = 100, # 90, #
grp.min = 0.25,
## treeWAS args:
## RUNNING ALL OF THESE OPTIONS (FOR NOW):
p.value = 0.05, # REQUIRED FOR FISHER TEST
#   p.value.correct = c("bonf", "fdr", FALSE), #mt.correct = FALSE
#   p.value.by = c("count", "density"),
sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL
treeWAS.test = c("terminal", "simultaneous", "subsequent"), # "score"
snps.reconstruction = "parsimony",
phen.reconstruction = "parsimony"
)
source('C:/Users/Caitlin/treeWAS/pkg/R/simTest.R')
out <- simTest(
## simTest args:
set.number = 3, # 2,
n.reps = 1,
set.seed.as = "file.number",
working.dir = "/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims",
## data from file args:
from.file = FALSE,
file.n =NULL,
Windows=TRUE,
## coalescent.sim args:
n.ind = 100,
n.snps = 10000, # gen.size
# sim.by = "locus",
n.subs = 1, # theta (*2)
n.phen.subs = NULL, # theta_p = NULL # 15
n.snps.assoc = 10, # = 0
# assoc.option = "all",
assoc.prob = 100, # 90, #
grp.min = 0.25,
## treeWAS args:
## RUNNING ALL OF THESE OPTIONS (FOR NOW):
p.value = 0.05, # REQUIRED FOR FISHER TEST
#   p.value.correct = c("bonf", "fdr", FALSE), #mt.correct = FALSE
#   p.value.by = c("count", "density"),
sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL
treeWAS.test = c("terminal", "simultaneous", "subsequent"), # "score"
snps.reconstruction = "parsimony",
phen.reconstruction = "parsimony"
)
source('C:/Users/Caitlin/treeWAS/pkg/R/simTest.R')
out <- simTest(
## simTest args:
set.number = 3, # 2,
n.reps = 1,
set.seed.as = "file.number",
working.dir = "/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims",
## data from file args:
from.file = FALSE,
file.n =NULL,
Windows=TRUE,
## coalescent.sim args:
n.ind = 100,
n.snps = 10000, # gen.size
# sim.by = "locus",
n.subs = 1, # theta (*2)
n.phen.subs = NULL, # theta_p = NULL # 15
n.snps.assoc = 10, # = 0
# assoc.option = "all",
assoc.prob = 100, # 90, #
grp.min = 0.25,
## treeWAS args:
## RUNNING ALL OF THESE OPTIONS (FOR NOW):
p.value = 0.05, # REQUIRED FOR FISHER TEST
#   p.value.correct = c("bonf", "fdr", FALSE), #mt.correct = FALSE
#   p.value.by = c("count", "density"),
sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL
treeWAS.test = c("terminal", "simultaneous", "subsequent"), # "score"
snps.reconstruction = "parsimony",
phen.reconstruction = "parsimony"
)
out <- simTest(
## simTest args:
set.number = 3, # 2,
n.reps = 4,
set.seed.as = "file.number",
working.dir = "/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims",
## data from file args:
from.file = FALSE,
file.n =NULL,
Windows=TRUE,
## coalescent.sim args:
n.ind = 100,
n.snps = 10000, # gen.size
# sim.by = "locus",
n.subs = 1, # theta (*2)
n.phen.subs = NULL, # theta_p = NULL # 15
n.snps.assoc = 10, # = 0
# assoc.option = "all",
assoc.prob = 100, # 90, #
grp.min = 0.25,
## treeWAS args:
## RUNNING ALL OF THESE OPTIONS (FOR NOW):
p.value = 0.05, # REQUIRED FOR FISHER TEST
#   p.value.correct = c("bonf", "fdr", FALSE), #mt.correct = FALSE
#   p.value.by = c("count", "density"),
sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL
treeWAS.test = c("terminal", "simultaneous", "subsequent"), # "score"
snps.reconstruction = "parsimony",
phen.reconstruction = "parsimony"
)
snps <- get(load("C:/Cait 2016/Work/Xavier/Sims/set3/set3_9_snps.Rdata"))
phen <- get(load("C:/Cait 2016/Work/Xavier/Sims/set3/set3_9_phen.Rdata"))
phen
SCORE3 <- get(load("C:/Cait 2016/Work/Xavier/Sims/set3/set3_9_score3.Rdata"))
perf <- get(load("C:/Cait 2016/Work/Xavier/Sims/set3/set3_9_performance.Rdata"))
snps.assoc <- perf$snps.assoc
snps.assoc
Q.ew <- SCORE3$corr.dat[[13]]
Q.uw <- SCORE3$corr.dat[[14]]
score3 <- SCORE3$corr.dat[[6]]
i <- snps.assoc[3]
Qi <- Q.uw[[i]]
## get NUMBERS of subs:
Qi.subs <- Qi*length(score3[[i]][!is.na(score3[[i]])])
Qi.subs
snps[,i]
phen
source('C:/Users/Caitlin/treeWAS/pkg/R/simTest.R')
i
str(snps)
snps[,i*2]
phen
Qi.subs
Q = matrix(c(2, 0.75, 0.75, 1, 3, 0.5, 0.25,  3, 3, 0.25, 0.5, 3, 1, 0.75, 0.75, 2),
nrow=4, byrow=T, dimnames=rep(list(c("0|0", "0|1", "1|0", "1|1")), 2))
Q
which(!keepLastN(colnames(Q), 1) == "1")
which(keepLastN(colnames(Q), 1) != "1")
Qi.subs
res <- get(load("C:/Cait 2016/Work/Xavier/Sims/set3/set3_9_res.Rdata"))
phen.rec <- res$dat$phen.rec
snps.rec <- res$dat$snps.rec
tree <- get(load("C:/Cait 2016/Work/Xavier/Sims/set3/set3_9_tree.Rdata"))
plot.phen(tree, phen.nodes=phen.rec, snp.nodes=snps.rec[,i])
i
snps.rec[,i]
phen.rec
phen
snps[,i*2]
temp <- seq.int(1, ncol(snps), 2)
head(temp)
snps[1:10,1:10]
snps <- snps[, seq.int(1, ncol(snps), 2)]
snps.new <- snps
snps.rec.ori.ori <- snps.rec
snps.REC <- asr(var = snps, tree = tree, type = "parsimony")
rownames(snps) <- c(1:nrow(snps))
colnames(snps) <- c(1:ncol(snps))
snps.REC <- asr(var = snps, tree = tree, type = "parsimony")
snps.rec <- snps.REC$var.rec
snps.rec.ori.ori[,i]
snps.rec[,i]
snps[,i]
snps.new <- snps
snps <- snps-1
snps[,i]
snps.rec1 <- snps.rec
snps.REC <- asr(var = snps, tree = tree, type = "parsimony")
snps.rec <- snps.REC$var.rec
snps.rec[,i]
snps.levels <- unique(as.vector(snps))
## returns only unique patterns...
snps.phyDat <- as.phyDat(as.matrix(snps),
type="USER", levels=snps.levels)
index <- attr(snps.phyDat, "index")
length(snps.phyDat)
snps.phyDat[[1]][i]
length(snps.phyDat[[1]])
index[i]
snps.phyDat[[1]][821]
snps.phyDat[[3]][821]
phen.levels <- unique(phen)
phen.phyDat <- as.phyDat(as.matrix(phen),
type="USER", levels=phen.levels)
names(phen) <- rownames(snps)
phen.levels <- unique(phen)
phen.phyDat <- as.phyDat(as.matrix(phen),
type="USER", levels=phen.levels)
phen.phyDat
phen[1:10]
phen.phyDat[[1]]
phen.phyDat[[3]]
phen.rec
head(phen)
head(snps[,i])
phen <- as.numeric(phen)
head(phen)
head(phen-1)
phen <- phen-1
names(phen) <- rownames(snps)
phen.REC <- asr(var = phen, tree = tree, type = "parsimony")
phen.rec <- phen.REC$var.rec
phen.rec
head(snps[,i])
snps.REC <- asr(var = snps, tree = tree, type = "ace")
snps.REC <- asr(var = snps, tree = tree, type = "parsimony")
snps.rec <- snps.REC$var.rec
head(snps.rec[,i])
phen.levels
snps.levels
phen.levels <- unique(phen)
phen.levels
phen.levels <- c(1,0)
phen.phyDat <- as.phyDat(as.matrix(phen),
type="USER", levels=phen.levels)
phen.phyDat[[1]]
sort(unique(phen))
sort(unique(as.vector(snps)))
source('C:/Users/Caitlin/treeWAS/pkg/R/reconstruct.R')
snps.REC <- asr(var = snps, tree = tree, type = "parsimony")
snps.rec <- snps.REC$var.rec
head(snps.rec[,i])
phen.REC <- asr(var = phen, tree = tree, type = "parsimony")
phen.rec <- phen.REC$var.rec
head(phen.rec)
plot.phen(tree, phen.nodes=phen.rec, snp.nodes=snps.rec[,i])
out <- simTest(
## simTest args:
set.number = 3, # 2,
n.reps = 1,
set.seed.as = "file.number",
working.dir = "/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims",
## data from file args:
from.file = FALSE,
file.n =NULL,
Windows=TRUE,
## coalescent.sim args:
n.ind = 100,
n.snps = 10000, # gen.size
# sim.by = "locus",
n.subs = 1, # theta (*2)
n.phen.subs = NULL, # theta_p = NULL # 15
n.snps.assoc = 10, # = 0
# assoc.option = "all",
assoc.prob = 100, # 90, #
grp.min = 0.25,
## treeWAS args:
## RUNNING ALL OF THESE OPTIONS (FOR NOW):
p.value = 0.05, # REQUIRED FOR FISHER TEST
#   p.value.correct = c("bonf", "fdr", FALSE), #mt.correct = FALSE
#   p.value.by = c("count", "density"),
sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL
treeWAS.test = c("terminal", "simultaneous", "subsequent"), # "score"
snps.reconstruction = "parsimony",
phen.reconstruction = "parsimony"
)
source('C:/Users/Caitlin/treeWAS/pkg/R/simTest.R')
snps <- get(load("C:/Cait 2016/Work/Xavier/Sims/set3/set3_9_snps.Rdata"))
phen <- get(load("C:/Cait 2016/Work/Xavier/Sims/set3/set3_9_phen.Rdata"))
perf <- get(load("C:/Cait 2016/Work/Xavier/Sims/set3/set3_9_performance.Rdata"))
snps.assoc <- perf$snps.assoc
res <- get(load("C:/Cait 2016/Work/Xavier/Sims/set3/set3_9_res.Rdata"))
tree <- get(load("C:/Cait 2016/Work/Xavier/Sims/set3/set3_9_tree.Rdata"))
phen.rec <- res$dat$phen.rec
snps.rec <- res$dat$snps.rec
str(snps)
i <- snps.assoc[3]
phen.rec
snps.rec[,i]
snps <- snps[, seq.int(1, ncol(snps), 2)]
rownames(snps) <- c(1:nrow(snps))
colnames(snps) <- c(1:ncol(snps))
SCORE3 <- get(load("C:/Cait 2016/Work/Xavier/Sims/set3/set3_9_score3.Rdata"))
Q.ew <- SCORE3$corr.dat[[13]]
Q.uw <- SCORE3$corr.dat[[14]]
score3 <- SCORE3$corr.dat[[6]]
i <- snps.assoc[3]
Qi <- Q.uw[[i]]
## get NUMBERS of subs:
Qi.subs <- Qi*length(score3[[i]][!is.na(score3[[i]])])
Qi.subs
snps.REC <- asr(var = snps, tree = tree, type = "parsimony")
snps.rec <- snps.REC$var.rec
snps.rec[,i]
phen
