## make dummy variables for irrelevant fields:
chromosome <- rep(26, length(loci.names)) # 26 = human mitochondrial (haploid)
gen.dist <- rep(0, length(loci.names))
## get base-pair posi (ie. loci name - L):
bp <- loci.names
bp <- as.numeric(gsub("L", "", bp))
dat <- data.frame(chromosome, loci.names, gen.dist, bp)
## as matrix, no header:
dat <- as.matrix(dat, byrow=FALSE, ncol=ncol(dat))
colnames(dat) <- NULL
map <- dat
## get filename
uniqueID <- paste("set", set.number, "_", number, sep="")
filename <- paste("./", uniqueID, "_map.Rdata", sep="")
## save dat.map as Rdata
save(map, file=filename)
#map <- get(load("C:/Cait 2012/Work/Xavier/Sims/set3/set3_1_map.Rdata"))
## save as text!
if(Windows == FALSE){
filename <- paste("/media/caitiecollins/88CC9BCECC9BB4C2/PLINK/", uniqueID, ".txt", sep="")
}else{
filename <- paste("C:/PLINK/", uniqueID, ".txt", sep="")
}
write.table(map, file=filename, quote=FALSE, row.names=FALSE, col.names=FALSE)
## Do NOT save as .MAP
## convert from text to MAP!!
#     filename.ori <- paste("C:\\PLINK\\", uniqueID, ".txt", sep="")
#     filename.new <- paste("C:\\PLINK\\", uniqueID, ".map", sep="")
if(Windows == FALSE){
filename.ori <- paste("/media/caitiecollins/88CC9BCECC9BB4C2/PLINK/", uniqueID, ".txt", sep="")
filename.new <- paste("/media/caitiecollins/88CC9BCECC9BB4C2/PLINK/", uniqueID, ".map", sep="")
command <- paste("mv", filename.ori, filename.new, sep=" ")
}else{
filename.ori <- paste("C:\\PLINK\\", uniqueID, ".txt", sep="")
filename.new <- paste("C:\\PLINK\\", uniqueID, ".map", sep="")
command <- paste("move", filename.ori, filename.new, sep=" ")
}
## Run command
if(Windows == FALSE){
system(command)
}else{
shell(command)
}
###### ###### ###### ######
#     }else{ # end from.file = FALSE
#
#       ######################
#       ## from.file = TRUE ##
#       ######################
#
#     } # end from.file = TRUE
########## #################### ########## #################### #################### ########## ####################
#####################
## GWAS with PLINK ##
#####################
## set wd for PLINK program
setwd(plink.wd)
## get filename
if(Windows == FALSE){
filename <- paste("\\media\\caitiecollins\\88CC9BCECC9BB4C2\\PLINK\\", uniqueID, sep="")
}else{
filename <- paste("C:\\PLINK\\", uniqueID, sep="")
}
## inspect file?
command <- paste("plink --file ", filename, " --no-fid --no-parents --no-sex --allow-no-sex", sep="")
#     ## Run command
#     if(Windows == FALSE){
#       system(command)
#     }else{
#       shell(command)
#     }
## make a binary PED file ##
## (provide the full path, not just the file name)
command <- paste("plink --file ", filename, " --make-bed --no-fid --no-parents --no-sex --allow-no-sex --out ", filename, sep="")
## Run command
if(Windows == FALSE){
system(command)
}else{
shell(command)
}
########################################################################################################################################
## SYSTEM(COMMAND) FAILS HERE WITH THE FOLLOWING ERROR #################################################    ####    ####    ####    ####    ####    ####
# sh: 1: plink: not found
## PROBABLY NEED TO FIND SOLN AND APPLY IT TO ALL PLINK-RELATED CODE, STARTING WELL ABOVE HERE....................................................................
####    ####    ####    ####    ####    ####    ####    ####    ####    ####    ####    ####    ####    ####    ####    ####    ####    ####    ####    ####    ####
########################################################################################################################################
## use --bfile to work with the BINARY file
# (same as --file, but loads the binary one and prints summary stats)
command <- paste("plink --bfile ", filename, " --no-fid --no-parents --no-sex --allow-no-sex", sep="")
## Run command
if(Windows == FALSE){
system(command)
}else{
shell(command)
}
#######################
## basic association ##
#######################
##--> 1df chi-square test
## check freq of SNPs...?
command <- paste("plink --file ", filename, " --no-fid --no-parents --no-sex --allow-no-sex --freq --out ", filename, sep="")
## Run command
if(Windows == FALSE){
system(command)
}else{
shell(command)
}
## yay!
if(Windows == FALSE){
filename <- paste("/media/caitiecollins/88CC9BCECC9BB4C2/PLINK/", uniqueID, ".frq", sep="")
}else{
filename <- paste("C:/PLINK/", uniqueID, ".frq", sep="")
}
freq <- read.table(filename, header=TRUE)
#head(freq)
## perform a basic association analysis on the disease trait for all single SNPs
if(Windows == FALSE){
filename <- paste("\\media\\caitiecollins\\88CC9BCECC9BB4C2\\PLINK\\", uniqueID, sep="")
}else{
filename <- paste("C:\\PLINK\\", uniqueID, sep="")
}
command <- paste("plink --bfile ",  filename, " --assoc --counts --allow-no-sex --out ", filename, sep="")
## Run command
if(Windows == FALSE){
system(command)
}else{
shell(command)
}
## to view the file you created, just read it in with R:
if(Windows == FALSE){
filename <- paste("/media/caitiecollins/88CC9BCECC9BB4C2/PLINK/", uniqueID, ".assoc", sep="")
}else{
filename <- paste("C:/PLINK/", uniqueID, ".assoc", sep="")
}
plink.res <- read.table(filename, header=TRUE)
#head(plink.res)
## get p.vals
pval.plink.assoc <- plink.res$P
## get sig ##
## p.thresh:
p.thresh <- p.value # 0.05 # 0.01 # 0.001 # ??
## Uncorrected ##
plink.assoc.snps.uncorr <- snps.names[which(pval.plink.assoc < p.thresh)]
## Bonferonni ##
p.vals.bonf <- p.adjust(pval.plink.assoc, "bonferroni")
p.bonf <- which(p.vals.bonf < p.thresh)
plink.assoc.snps.bonf <- snps.names[p.bonf]
## FDR ##
p.vals.fdr <- p.adjust(pval.plink.assoc, "fdr")
p.fdr <- which(p.vals.fdr < p.thresh)
plink.assoc.snps.fdr <- snps.names[p.fdr]
## CONVERT 0-LENGTH RESULTS TO NULL
if(length(plink.assoc.snps.uncorr) == 0) plink.assoc.snps.uncorr <- NULL
if(length(plink.assoc.snps.bonf) == 0) plink.assoc.snps.bonf <- NULL
if(length(plink.assoc.snps.fdr) == 0) plink.assoc.snps.fdr <- NULL
## STORE PLINK TEST RESULTS ##
plink.assoc.results <- list(pval.plink.assoc, plink.assoc.snps.uncorr, plink.assoc.snps.bonf, plink.assoc.snps.fdr)
names(plink.assoc.results) <- c("pval.plink.assoc", "plink.assoc.snps.uncorr", "plink.assoc.snps.bonf", "plink.assoc.snps.fdr")
############################################
########################################################
## association w control for genomic inflation factor ##
########################################################
##--> 1df chi-square test
## perform a basic association analysis on the disease trait for all single SNPs
if(Windows == FALSE){
filename <- paste("\\media\\caitiecollins\\88CC9BCECC9BB4C2\\PLINK\\", uniqueID, sep="")
}else{
filename <- paste("C:\\PLINK\\", uniqueID, sep="")
}
command <- paste("plink --bfile ",  filename, " --assoc --adjust --gc --counts --allow-no-sex --out ", filename, sep="")
## Run command
if(Windows == FALSE){
system(command)
}else{
shell(command)
}
## to view the file you created, just read it in with R:
if(Windows == FALSE){
filename <- paste("/media/caitiecollins/88CC9BCECC9BB4C2/PLINK/", uniqueID, ".assoc.adjusted", sep="")
}else{
filename <- paste("C:/PLINK/", uniqueID, ".assoc.adjusted", sep="")
}
plink.res <- read.table(filename, header=TRUE)
# head(plink.res)
## NOT SURE WHY, BUT THE "UNADJ" p-values and the "GC" p-values are the same
## in this table (even though the "UNADJ" p-values are not actually the same
## as those in the plink.res from the basic association test above,
## AND, in this case, lambdaGC was 5.12 and the mean chi-squared was 4.63!!!!!)
## get p.vals
pval.plink.assoc.gc <- plink.res$P
## get sig ##
## p.thresh:
p.thresh <- p.value # 0.05 # 0.01 # 0.001 # ??
## Uncorrected ##
plink.assoc.gc.snps.uncorr <- snps.names[which(pval.plink.assoc.gc < p.thresh)]
## Bonferonni ##
p.vals.bonf <- p.adjust(pval.plink.assoc.gc, "bonferroni")
p.bonf <- which(p.vals.bonf < p.thresh)
plink.assoc.gc.snps.bonf <- snps.names[p.bonf]
## FDR ##
p.vals.fdr <- p.adjust(pval.plink.assoc.gc, "fdr")
p.fdr <- which(p.vals.fdr < p.thresh)
plink.assoc.gc.snps.fdr <- snps.names[p.fdr]
## CONVERT 0-LENGTH RESULTS TO NULL
if(length(plink.assoc.snps.uncorr) == 0) plink.assoc.gc.snps.uncorr <- NULL
if(length(plink.assoc.snps.bonf) == 0) plink.assoc.gc.snps.bonf <- NULL
if(length(plink.assoc.snps.fdr) == 0) plink.assoc.gc.snps.fdr <- NULL
## STORE PLINK TEST RESULTS ##
plink.assoc.gc.results <- list(pval.plink.assoc.gc, plink.assoc.gc.snps.uncorr, plink.assoc.gc.snps.bonf, plink.assoc.gc.snps.fdr)
names(plink.assoc.gc.results) <- c("pval.plink.assoc.gc", "plink.assoc.gc.snps.uncorr", "plink.assoc.gc.snps.bonf", "plink.assoc.gc.snps.fdr")
############################################
## STORE COMBINED PLINK RESULTS ##
plink.results <- list(plink.assoc.results,
plink.assoc.gc.results)
###########################################################################################################################
############################################# *** PERFORMANCE *** #########################################################
###########################################################################################################################
##########################
## EVALUATE PERFORMANCE ##
##########################
performance <- list()
####################
## common metrics ##
####################
## get n.tests
snps <- snps.ori.ori
phen <- phen.ori.ori
n.tests <- dim(snps)[2]
###########################################
## performance[[1]] contains snps.assoc: ##
###########################################
performance[[1]] <- snps.assoc
##############################
## FOR LOOP FOR ALL 3 TESTS ##
##############################
for(j in 2:103){
if(j==2) test <- "fisher.bonf"
if(j==3) test <- "fisher.fdr"
if(j %in% 4:99) test <- "treeWAS"
## get test run:
if(j %in% 4:35)  t <- "terminal"
if(j %in% 36:67) t <- "simultaneous"
if(j %in% 68:99) t <- "subsequent"
if(j==100) test <- "plink.assoc.bonf"
if(j==101) test <- "plink.assoc.fdr"
if(j==102) test <- "plink.assoc.gc.bonf"
if(j==103) test <- "plink.assoc.gc.fdr"
###########
## PLINK ## ########### ########### ########### ########### ########### ###########
###########
## Basic association ##
######################
## plink.assoc.bonf ##
######################
if(test == "plink.assoc.bonf"){
test.positive <- plink.assoc.snps.bonf
} # end test = plink.assoc.bonf
#####################
## plink.assoc.fdr ##
#####################
if(test == "plink.assoc.fdr"){
test.positive <- plink.assoc.snps.fdr
} # end test = plink.assoc.fdr
## Corrected w Genomic Control ##
#########################
## plink.assoc.gc.bonf ##
#########################
if(test == "plink.assoc.bonf"){
test.positive <- plink.assoc.gc.snps.bonf
} # end test = plink.assoc.bonf
########################
## plink.assoc.gc.fdr ##
########################
if(test == "plink.assoc.fdr"){
test.positive <- plink.assoc.gc.snps.fdr
} # end test = plink.assoc.fdr
########### ########### ########### ########### ########### ########### ###########
#################
## fisher.bonf ##
#################
if(test == "fisher.bonf"){
## get test.positive
test.positive <- fisher.snps.bonf
} # end test = fisher.bonf
################
## fisher.fdr ##
################
if(test == "fisher.fdr"){
test.positive <- fisher.snps.fdr
} # end test = fisher.fdr
########### ########### ########### ########### ########### ########### ###########
#############
## treeWAS ##
#############
if(test == "treeWAS"){
if(j %in% 4:35)  N <- 3
if(j %in% 36:67) N <- 35
if(j %in% 68:99) N <- 67
## get test.positive
if(class(res[[t]][[(j-N)]]$sig.snps)=="data.frame"){
# test.positive <- as.character(res$SNP.locus)
test.positive <- as.character(res[[t]][[(j-N)]]$sig.snps$SNP.locus)
}else{
test.positive <- NULL
}
} # end test = treeWAS
########### ########### ########### ########### ########### ########### ###########
if(is.null(names(snps.assoc))) names(snps.assoc) <- as.character(snps.assoc)
if(is.null(snps.names)){
if(is.null(colnames(snps))) colnames(snps) <- as.character(1:ncol(snps))
snps.names <- colnames(snps)
}
#########################
## common calculations ##
#########################
## get test.negative
if(length(which(snps.names %in% test.positive)) != 0){
test.negative <- snps.names[-which(snps.names %in% test.positive)]
}else{
test.negative <- snps.names
}
## get n.test.positive
n.test.positive <- length(test.positive)
## get n.test.negative
n.test.negative <- length(test.negative) ## == n.tests - n.test.positive
n.tests <- ncol(snps)
########################
## GET TP, TN, FP, FN ##
########################
## get true positives
## for Set 3 there is 1 associated SNP, so 1 true positive...
# if(set.number < 3){
#   snps.associated <- NULL
# }else{
#   #         snps.associated <- paste(sapply(c(1:length(snps.assoc)),
#   #                                         function(e)
#   #                                           rep(names(snps.assoc)[e], 2)), c(1, 2), sep=".")
snps.associated <- names(snps.assoc)
# }
true.positive <- test.positive[which(test.positive %in% snps.associated)]
TP <- length(true.positive)
## get true negatives
## for Set 3 all but ONE SNPs are NOT (intentionally) associated with the phenotype
# if(set.number < 3){
#   snps.not <- snps.names
# }else{
snps.not <- snps.names[-which(snps.names %in% snps.associated)]
# }
true.negative <- test.negative[which(test.negative %in% snps.not)]
TN <- length(true.negative)
## get false positives
false.positive <- test.positive[which(test.positive %in% snps.not)]
FP <- length(false.positive)
## get false negatives
false.negative <- test.negative[which(test.negative %in% snps.associated)]
FN <- length(false.negative)
#####################################
## CALCULATE METRICS OF EVALUATION ##
#####################################
## Do NOT need anything to find (no associated SNPs required) ######################################
##############
## accuracy ##
##############
## ie. SUMMARY STATISTIC--Of all the CALLS/tests you made, how many of them were CORRECT
## ~ Pr(Correct Call | Call)
# accuracy <- ((TP + TN) / n.tests) ### WHY IS THIS GIVING ME 0.5 (when all other metrics seem to be working....) ??!?!
accuracy <- ((TP + TN) / (TP + TN + FP + FN))
# acc <- (sensitivity*length(snps.associated) + specificity*length(snps.not))/ncol(snps)
#################
## specificity ##
#################
## ie. Of all the truly NOT associated SNPs, how many did you manage to rule out?
## ~ Pr(Negative Test | SNP NOT associated)
specificity <- (TN / (TN + FP)) ## = (1 - FPR)
#########
## FPR ##
#########
## ie. How many truly NOT associated SNPs did you accidentally call significant
## ~ Pr(Positive Test | SNP NOT associated)
FPR <- (FP / (FP + TN)) ## = (1 - specificity)
## NEED something to FIND, else uninformative! (True ASSOCIATED SNPs ~ required) ###################
#########
## FNR ##
#########
## ie. How many truly ASSOCIATED SNPs did you accidentally miss
## ~ Pr(Negative Test | SNP ASSOCIATED)
## --> Set 1: will be 0/0 = NaN
FNR <- (FN / (FN + TP))
#################
## sensitivity ##
#################
## ie. How many truly ASSOCIATED SNPs did you manage to catch
## ~ Pr(Positive Test | SNP ASSOCIATED)
## --> Set 1: will be 0/0 = NaN
sensitivity <- (TP / (TP + FN))
#########
## PPV ##
#########
## ie. Of all the POSITIVE calls you made, how many were CORRECT/ identified truly ASSOCIATED SNPs
## ~ Pr(SNP ASSOCIATED | Positive Test)
## --> Set 1: will be 0 (UNLESS you made NO positive calls, then 0/0 = NaN)
PPV <- (TP / (TP + FP)) ## = (1 - FDR)
#########
## FDR ##
#########
## ie. Of all the POSITIVE calls you made, how many were WRONG/ identified truly NOT associated SNPs
## ~ Pr(SNP NOT associated | Positive Test)
## --> Set 1: will be 1 (UNLESS you made NO positive calls, then 0/0 = NaN)
FDR <- (FP / (FP + TP)) ## = (1 - PPV)
##
##################################
## combine eval metrics into df ##
##################################
performance[[j]] <- data.frame(accuracy, specificity, FPR, FNR, sensitivity, PPV, FDR)
} # end for loop
## get names for treeWAS tests:
treeWAS.names <- list()
for(r in 1:length(res)){
if(r == 1) t <- "terminal"
if(r == 2) t <- "simultaneous"
if(r == 3) t <- "subsequent"
treeWAS.names[[r]] <- paste("treeWAS", t, names(res[[t]]), sep=".")
}
treeWAS.names <- as.vector(unlist(treeWAS.names))
names(performance) <- c("snps.assoc",
"fisher.bonf", "fisher.fdr",
treeWAS.names,
"plink.assoc.bonf", "plink.assoc.fdr",
"plink.assoc.gc.bonf", "plink.assoc.gc.fdr")
################################    ################################    ################################
###########################################################################################################################
######################################### *** SAVING & RETURNING *** ######################################################
###########################################################################################################################
########################
## SAVE DATA & OUTPUT ##
########################
## set wd
setwd(wd)
## get uniqueID
uniqueID <- paste("set", set.number, "_", number, sep="")
## save snps, phen, tree, out, res, fisher.results, plink.assoc.results, performance
snps <- snps.ori.ori
phen <- phen.ori.ori
## save snps
filename.snps[[i]] <- paste("./", uniqueID, "_snps", ".Rdata", sep="")
save(snps, file=filename.snps[[i]])
## save phen
filename.phen[[i]] <- paste("./", uniqueID, "_phen", ".Rdata", sep="")
save(phen, file=filename.phen[[i]])
## save phen.plot.col
filename.phen.plot.col[[i]] <- paste("./", uniqueID, "_phen.plot.col", ".Rdata", sep="")
save(phen.plot.col, file=filename.phen.plot.col[[i]])
## save tree
filename.tree[[i]] <- paste("./", uniqueID, "_tree", ".Rdata", sep="")
save(tree, file=filename.tree[[i]])
## save out
filename.out[[i]] <- paste("./", uniqueID, "_out", ".Rdata", sep="")
save(out, file=filename.out[[i]])
## save res
res <- res.complete # includes data from reconstructions, values from treeWAS tests
filename.res[[i]] <- paste("./", uniqueID, "_res", ".Rdata", sep="")
save(res, file=filename.res[[i]])
## save fisher.results
filename.fisher.results[[i]] <- paste("./", uniqueID, "_fisher.results", ".Rdata", sep="")
save(fisher.results, file=filename.fisher.results[[i]])
## save plink.assoc.results
filename.plink.results[[i]] <- paste("./", uniqueID, "_plink.results", ".Rdata", sep="")
save(plink.results, file=filename.plink.results[[i]])
## save performance
filename.args[[i]] <- paste("./", uniqueID, "_args", ".Rdata", sep="")
save(args, file=filename.args[[i]])
## save performance
filename.performance[[i]] <- paste("./", uniqueID, "_performance", ".Rdata", sep="")
save(performance, file=filename.performance[[i]])
## save score3 raw data and alternatives
filename.score3[[i]] <- paste("./", uniqueID, "_score3", ".Rdata", sep="")
save(score3, file=filename.score3[[i]])
#########################
## STORE DATA & OUTPUT ##
#########################
SNPS[[i]] <- snps
names(SNPS)[[i]] <- uniqueID
PHEN[[i]] <- phen
names(PHEN)[[i]] <- uniqueID
PHEN.PLOT.COL[[i]] <- phen.plot.col
names(PHEN.PLOT.COL[[i]]) <- uniqueID
TREE[[i]] <- tree
names(TREE)[[i]] <- uniqueID
OUT[[i]] <- out
names(OUT)[[i]] <- uniqueID
RES[[i]] <- res
names(RES)[[i]] <- uniqueID
FISHER.RESULTS[[i]] <- fisher.results
names(FISHER.RESULTS)[[i]] <- uniqueID
PLINK.RESULTS[[i]] <- plink.results
names(PLINK.RESULTS)[[i]] <- uniqueID
ARGS[[i]] <- args
names(ARGS)[[i]] <- uniqueID
PERFORMANCE[[i]] <- performance
names(PERFORMANCE)[[i]] <- uniqueID
SCORE3[[i]] <- score3
names(SCORE3)[[i]] <- uniqueID
toReturn <- list(SNPS, PHEN, PHEN.PLOT.COL, TREE, RES, FISHER.RESULTS, PLINK.RESULTS, ARGS, PERFORMANCE, score3)
names(toReturn) <- c("snps", "phen", "phen.plot.col", "tree", "res", "fisher.results", "plink.results", "arguments", "performance", "score3")
args
getwd()
toto <- get(load("./set1_28_args.Rdata"))
toto
args <- toto
save(args, file="./set1_29_args.Rdata")
gc()
source('C:/Users/Caitlin/treeWAS/pkg/R/simTest.R')
