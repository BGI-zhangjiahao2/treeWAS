{
    "data" : [
        "+ ",
        "      system(command)",
        "+ ",
        "    }else{",
        "+ ",
        "      shell(command)",
        "+ ",
        "    }",
        "\n@----------------------------------------------------------@\n|        PLINK!       |     v1.07      |   10/Aug/2009     |\n|----------------------------------------------------------|\n|  (C) 2009 Shaun Purcell, GNU General Public License, v2  |\n|----------------------------------------------------------|\n|  For documentation, citation & bug-report instructions:  |\n|        http://pngu.mgh.harvard.edu/purcell/plink/        |\n@----------------------------------------------------------@\n\nWeb-based version check ( --noweb to skip )\n",
        "Recent cached web-check found... OK, v1.07 is current\n\n+++ PLINK 1.9 is now available! See above website for details +++ \n\nWriting this text to log file [ C:\\PLINK\\set1_29.log ]\nAnalysis started: Wed Sep 14 14:12:36 2016\n\nOptions in effect:\n\t--bfile C:\\PLINK\\set1_29\n\t--assoc\n\t--counts\n\t--allow-no-sex\n\t--out C:\\PLINK\\set1_29\n\nReading map (extended format) from [ C:\\PLINK\\set1_29.bim ] \n10000 markers to be included from [ C:\\PLINK\\set1_29.bim ]\nReading pedigree information from [ C:\\PLINK\\set1_29.fam ] \n100 individuals read from [ C:\\PLINK\\set1_29.fam ] \n",
        "100 individuals with nonmissing phenotypes\nAssuming a disease phenotype (1=unaff, 2=aff, 0=miss)\nMissing phenotype value is also -9\n66 cases, 34 controls and 0 missing\n0 males, 0 females, and 100 of unspecified sex\nWarning, found 100 individuals with ambiguous sex codes\nWriting list of these individuals to [ C:\\PLINK\\set1_29.nosex ]\nReading genotype bitfile from [ C:\\PLINK\\set1_29.bed ] \nDetected that binary PED file is v1.00 SNP-major mode\nBefore frequency and genotyping pruning, there are 10000 SNPs\n100 founders and 0 non-founders found\n",
        "Total genotyping rate in remaining individuals is 1\n0 SNPs failed missingness test ( GENO > 1 )\n0 SNPs failed frequency test ( MAF < 0 )\nAfter frequency and genotyping pruning, there are 10000 SNPs\nAfter filtering, 66 cases, 34 controls and 0 missing\nAfter filtering, 0 males, 0 females, and 100 of unspecified sex\nWriting main association results to [ C:\\PLINK\\set1_29.assoc ] \n\nAnalysis finished: Wed Sep 14 14:12:36 2016\n\n",
        "> ",
        "",
        "> ",
        "    ## to view the file you created, just read it in with R:",
        "> ",
        "    if(Windows == FALSE){",
        "+ ",
        "      filename <- paste(\"/media/caitiecollins/88CC9BCECC9BB4C2/PLINK/\", uniqueID, \".assoc\", sep=\"\")",
        "+ ",
        "    }else{",
        "+ ",
        "      filename <- paste(\"C:/PLINK/\", uniqueID, \".assoc\", sep=\"\")",
        "+ ",
        "    }",
        "> ",
        "    plink.res <- read.table(filename, header=TRUE)",
        "> ",
        "    #head(plink.res)",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "    ## get p.vals",
        "> ",
        "    pval.plink.assoc <- plink.res$P",
        "> ",
        "",
        "> ",
        "    ## get sig ##",
        "> ",
        "",
        "> ",
        "    ## p.thresh:",
        "> ",
        "    p.thresh <- p.value # 0.05 # 0.01 # 0.001 # ??",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "    ## Uncorrected ##",
        "> ",
        "    plink.assoc.snps.uncorr <- snps.names[which(pval.plink.assoc < p.thresh)]",
        "> ",
        "",
        "> ",
        "    ## Bonferonni ##",
        "> ",
        "    p.vals.bonf <- p.adjust(pval.plink.assoc, \"bonferroni\")",
        "> ",
        "    p.bonf <- which(p.vals.bonf < p.thresh)",
        "> ",
        "    plink.assoc.snps.bonf <- snps.names[p.bonf]",
        "> ",
        "",
        "> ",
        "    ## FDR ##",
        "> ",
        "    p.vals.fdr <- p.adjust(pval.plink.assoc, \"fdr\")",
        "> ",
        "    p.fdr <- which(p.vals.fdr < p.thresh)",
        "> ",
        "    plink.assoc.snps.fdr <- snps.names[p.fdr]",
        "> ",
        "",
        "> ",
        "    ## CONVERT 0-LENGTH RESULTS TO NULL",
        "> ",
        "    if(length(plink.assoc.snps.uncorr) == 0) plink.assoc.snps.uncorr <- NULL",
        "> ",
        "    if(length(plink.assoc.snps.bonf) == 0) plink.assoc.snps.bonf <- NULL",
        "> ",
        "    if(length(plink.assoc.snps.fdr) == 0) plink.assoc.snps.fdr <- NULL",
        "> ",
        "",
        "> ",
        "    ## STORE PLINK TEST RESULTS ##",
        "> ",
        "    plink.assoc.results <- list(pval.plink.assoc, plink.assoc.snps.uncorr, plink.assoc.snps.bonf, plink.assoc.snps.fdr)",
        "> ",
        "    names(plink.assoc.results) <- c(\"pval.plink.assoc\", \"plink.assoc.snps.uncorr\", \"plink.assoc.snps.bonf\", \"plink.assoc.snps.fdr\")",
        "> ",
        "",
        "> ",
        "    ############################################",
        "> ",
        "",
        "> ",
        "    ########################################################",
        "> ",
        "    ## association w control for genomic inflation factor ##",
        "> ",
        "    ########################################################",
        "> ",
        "    ##--> 1df chi-square test",
        "> ",
        "",
        "> ",
        "    ## perform a basic association analysis on the disease trait for all single SNPs",
        "> ",
        "    if(Windows == FALSE){",
        "+ ",
        "      filename <- paste(\"\\\\media\\\\caitiecollins\\\\88CC9BCECC9BB4C2\\\\PLINK\\\\\", uniqueID, sep=\"\")",
        "+ ",
        "    }else{",
        "+ ",
        "      filename <- paste(\"C:\\\\PLINK\\\\\", uniqueID, sep=\"\")",
        "+ ",
        "    }",
        "> ",
        "    command <- paste(\"plink --bfile \",  filename, \" --assoc --adjust --gc --counts --allow-no-sex --out \", filename, sep=\"\")",
        "> ",
        "",
        "> ",
        "    ## Run command",
        "> ",
        "    if(Windows == FALSE){",
        "+ ",
        "      system(command)",
        "+ ",
        "    }else{",
        "+ ",
        "      shell(command)",
        "+ ",
        "    }",
        "\n@----------------------------------------------------------@\n|        PLINK!       |     v1.07      |   10/Aug/2009     |\n|----------------------------------------------------------|\n|  (C) 2009 Shaun Purcell, GNU General Public License, v2  |\n|----------------------------------------------------------|\n|  For documentation, citation & bug-report instructions:  |\n|        http://pngu.mgh.harvard.edu/purcell/plink/        |\n@----------------------------------------------------------@\n\nWeb-based version check ( --noweb to skip )\n",
        "Recent cached web-check found... OK, v1.07 is current\n\n+++ PLINK 1.9 is now available! See above website for details +++ \n\nWriting this text to log file [ C:\\PLINK\\set1_29.log ]\nAnalysis started: Wed Sep 14 14:12:37 2016\n\nOptions in effect:\n\t--bfile C:\\PLINK\\set1_29\n\t--assoc\n\t--adjust\n\t--gc\n\t--counts\n\t--allow-no-sex\n\t--out C:\\PLINK\\set1_29\n\nReading map (extended format) from [ C:\\PLINK\\set1_29.bim ] \n10000 markers to be included from [ C:\\PLINK\\set1_29.bim ]\nReading pedigree information from [ C:\\PLINK\\set1_29.fam ] \n",
        "100 individuals read from [ C:\\PLINK\\set1_29.fam ] \n100 individuals with nonmissing phenotypes\nAssuming a disease phenotype (1=unaff, 2=aff, 0=miss)\nMissing phenotype value is also -9\n66 cases, 34 controls and 0 missing\n0 males, 0 females, and 100 of unspecified sex\nWarning, found 100 individuals with ambiguous sex codes\nWriting list of these individuals to [ C:\\PLINK\\set1_29.nosex ]\nReading genotype bitfile from [ C:\\PLINK\\set1_29.bed ] \nDetected that binary PED file is v1.00 SNP-major mode\nBefore frequency and genotyping pruning, there are 10000 SNPs\n",
        "100 founders and 0 non-founders found\nTotal genotyping rate in remaining individuals is 1\n0 SNPs failed missingness test ( GENO > 1 )\n0 SNPs failed frequency test ( MAF < 0 )\nAfter frequency and genotyping pruning, there are 10000 SNPs\nAfter filtering, 66 cases, 34 controls and 0 missing\nAfter filtering, 0 males, 0 females, and 100 of unspecified sex\nWriting main association results to [ C:\\PLINK\\set1_29.assoc ] \nComputing corrected significance values (FDR, Sidak, etc)\nGenomic inflation factor (based on median chi-squared) is 2.30555\n",
        "Mean chi-squared statistic is 1.95656\nCorrecting for 10000 tests\nUsing genomic-controlled p-values for adjusted p-values\nWriting multiple-test corrected significance values to [ C:\\PLINK\\set1_29.assoc.adjusted ] \n\nAnalysis finished: Wed Sep 14 14:12:37 2016\n\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "    ## to view the file you created, just read it in with R:",
        "> ",
        "    if(Windows == FALSE){",
        "+ ",
        "      filename <- paste(\"/media/caitiecollins/88CC9BCECC9BB4C2/PLINK/\", uniqueID, \".assoc.adjusted\", sep=\"\")",
        "+ ",
        "    }else{",
        "+ ",
        "      filename <- paste(\"C:/PLINK/\", uniqueID, \".assoc.adjusted\", sep=\"\")",
        "+ ",
        "    }",
        "> ",
        "    plink.res <- read.table(filename, header=TRUE)",
        "> ",
        "    # head(plink.res)",
        "> ",
        "    ## NOT SURE WHY, BUT THE \"UNADJ\" p-values and the \"GC\" p-values are the same",
        "> ",
        "    ## in this table (even though the \"UNADJ\" p-values are not actually the same",
        "> ",
        "    ## as those in the plink.res from the basic association test above,",
        "> ",
        "    ## AND, in this case, lambdaGC was 5.12 and the mean chi-squared was 4.63!!!!!)",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "    ## get p.vals",
        "> ",
        "    pval.plink.assoc.gc <- plink.res$P",
        "> ",
        "",
        "> ",
        "    ## get sig ##",
        "> ",
        "",
        "> ",
        "    ## p.thresh:",
        "> ",
        "    p.thresh <- p.value # 0.05 # 0.01 # 0.001 # ??",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "    ## Uncorrected ##",
        "> ",
        "    plink.assoc.gc.snps.uncorr <- snps.names[which(pval.plink.assoc.gc < p.thresh)]",
        "> ",
        "",
        "> ",
        "    ## Bonferonni ##",
        "> ",
        "    p.vals.bonf <- p.adjust(pval.plink.assoc.gc, \"bonferroni\")",
        "> ",
        "    p.bonf <- which(p.vals.bonf < p.thresh)",
        "> ",
        "    plink.assoc.gc.snps.bonf <- snps.names[p.bonf]",
        "> ",
        "",
        "> ",
        "    ## FDR ##",
        "> ",
        "    p.vals.fdr <- p.adjust(pval.plink.assoc.gc, \"fdr\")",
        "> ",
        "    p.fdr <- which(p.vals.fdr < p.thresh)",
        "> ",
        "    plink.assoc.gc.snps.fdr <- snps.names[p.fdr]",
        "> ",
        "",
        "> ",
        "    ## CONVERT 0-LENGTH RESULTS TO NULL",
        "> ",
        "    if(length(plink.assoc.snps.uncorr) == 0) plink.assoc.gc.snps.uncorr <- NULL",
        "> ",
        "    if(length(plink.assoc.snps.bonf) == 0) plink.assoc.gc.snps.bonf <- NULL",
        "> ",
        "    if(length(plink.assoc.snps.fdr) == 0) plink.assoc.gc.snps.fdr <- NULL",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "    ## STORE PLINK TEST RESULTS ##",
        "> ",
        "    plink.assoc.gc.results <- list(pval.plink.assoc.gc, plink.assoc.gc.snps.uncorr, plink.assoc.gc.snps.bonf, plink.assoc.gc.snps.fdr)",
        "> ",
        "    names(plink.assoc.gc.results) <- c(\"pval.plink.assoc.gc\", \"plink.assoc.gc.snps.uncorr\", \"plink.assoc.gc.snps.bonf\", \"plink.assoc.gc.snps.fdr\")",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "    ############################################",
        "> ",
        "",
        "> ",
        "    ## STORE COMBINED PLINK RESULTS ##",
        "> ",
        "    plink.results <- list(plink.assoc.results,",
        "+ ",
        "                          plink.assoc.gc.results)",
        "> ",
        "",
        "> ",
        "    ###########################################################################################################################",
        "> ",
        "    ############################################# *** PERFORMANCE *** #########################################################",
        "> ",
        "    ###########################################################################################################################",
        "> ",
        "",
        "> ",
        "    ##########################",
        "> ",
        "    ## EVALUATE PERFORMANCE ##",
        "> ",
        "    ##########################",
        "> ",
        "",
        "> ",
        "    performance <- list()",
        "> ",
        "",
        "> ",
        "    ####################",
        "> ",
        "    ## common metrics ##",
        "> ",
        "    ####################",
        "> ",
        "    ## get n.tests",
        "> ",
        "    snps <- snps.ori.ori",
        "> ",
        "    phen <- phen.ori.ori",
        "> ",
        "    n.tests <- dim(snps)[2]",
        "> ",
        "",
        "> ",
        "    ###########################################",
        "> ",
        "    ## performance[[1]] contains snps.assoc: ##",
        "> ",
        "    ###########################################",
        "> ",
        "    performance[[1]] <- snps.assoc",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "    ##############################",
        "> ",
        "    ## FOR LOOP FOR ALL 3 TESTS ##",
        "> ",
        "    ##############################",
        "> ",
        "    for(j in 2:103){",
        "+ ",
        "",
        "+ ",
        "",
        "+ ",
        "      if(j==2) test <- \"fisher.bonf\"",
        "+ ",
        "      if(j==3) test <- \"fisher.fdr\"",
        "+ ",
        "",
        "+ ",
        "      if(j %in% 4:99) test <- \"treeWAS\"",
        "+ ",
        "",
        "+ ",
        "      ## get test run:",
        "+ ",
        "      if(j %in% 4:35)  t <- \"terminal\"",
        "+ ",
        "      if(j %in% 36:67) t <- \"simultaneous\"",
        "+ ",
        "      if(j %in% 68:99) t <- \"subsequent\"",
        "+ ",
        "",
        "+ ",
        "      if(j==100) test <- \"plink.assoc.bonf\"",
        "+ ",
        "      if(j==101) test <- \"plink.assoc.fdr\"",
        "+ ",
        "      if(j==102) test <- \"plink.assoc.gc.bonf\"",
        "+ ",
        "      if(j==103) test <- \"plink.assoc.gc.fdr\"",
        "+ ",
        "",
        "+ ",
        "      ###########",
        "+ ",
        "      ## PLINK ## ########### ########### ########### ########### ########### ###########",
        "+ ",
        "      ###########",
        "+ ",
        "",
        "+ ",
        "      ## Basic association ##",
        "+ ",
        "",
        "+ ",
        "      ######################",
        "+ ",
        "      ## plink.assoc.bonf ##",
        "+ ",
        "      ######################",
        "+ ",
        "      if(test == \"plink.assoc.bonf\"){",
        "+ ",
        "        test.positive <- plink.assoc.snps.bonf",
        "+ ",
        "      } # end test = plink.assoc.bonf",
        "+ ",
        "",
        "+ ",
        "      #####################",
        "+ ",
        "      ## plink.assoc.fdr ##",
        "+ ",
        "      #####################",
        "+ ",
        "      if(test == \"plink.assoc.fdr\"){",
        "+ ",
        "        test.positive <- plink.assoc.snps.fdr",
        "+ ",
        "      } # end test = plink.assoc.fdr",
        "+ ",
        "",
        "+ ",
        "",
        "+ ",
        "      ## Corrected w Genomic Control ##",
        "+ ",
        "",
        "+ ",
        "      #########################",
        "+ ",
        "      ## plink.assoc.gc.bonf ##",
        "+ ",
        "      #########################",
        "+ ",
        "      if(test == \"plink.assoc.bonf\"){",
        "+ ",
        "        test.positive <- plink.assoc.gc.snps.bonf",
        "+ ",
        "      } # end test = plink.assoc.bonf",
        "+ ",
        "",
        "+ ",
        "      ########################",
        "+ ",
        "      ## plink.assoc.gc.fdr ##",
        "+ ",
        "      ########################",
        "+ ",
        "      if(test == \"plink.assoc.fdr\"){",
        "+ ",
        "        test.positive <- plink.assoc.gc.snps.fdr",
        "+ ",
        "      } # end test = plink.assoc.fdr",
        "+ ",
        "",
        "+ ",
        "      ########### ########### ########### ########### ########### ########### ###########",
        "+ ",
        "",
        "+ ",
        "",
        "+ ",
        "",
        "+ ",
        "      #################",
        "+ ",
        "      ## fisher.bonf ##",
        "+ ",
        "      #################",
        "+ ",
        "      if(test == \"fisher.bonf\"){",
        "+ ",
        "        ## get test.positive",
        "+ ",
        "        test.positive <- fisher.snps.bonf",
        "+ ",
        "      } # end test = fisher.bonf",
        "+ ",
        "      ################",
        "+ ",
        "      ## fisher.fdr ##",
        "+ ",
        "      ################",
        "+ ",
        "      if(test == \"fisher.fdr\"){",
        "+ ",
        "        test.positive <- fisher.snps.fdr",
        "+ ",
        "      } # end test = fisher.fdr",
        "+ ",
        "",
        "+ ",
        "",
        "+ ",
        "      ########### ########### ########### ########### ########### ########### ###########",
        "+ ",
        "",
        "+ ",
        "      #############",
        "+ ",
        "      ## treeWAS ##",
        "+ ",
        "      #############",
        "+ ",
        "      if(test == \"treeWAS\"){",
        "+ ",
        "",
        "+ ",
        "        if(j %in% 4:35)  N <- 3",
        "+ ",
        "        if(j %in% 36:67) N <- 35",
        "+ ",
        "        if(j %in% 68:99) N <- 67",
        "+ ",
        "",
        "+ ",
        "        ## get test.positive",
        "+ ",
        "        if(class(res[[t]][[(j-N)]]$sig.snps)==\"data.frame\"){",
        "+ ",
        "          # test.positive <- as.character(res$SNP.locus)",
        "+ ",
        "          test.positive <- as.character(res[[t]][[(j-N)]]$sig.snps$SNP.locus)",
        "+ ",
        "        }else{",
        "+ ",
        "          test.positive <- NULL",
        "+ ",
        "        }",
        "+ ",
        "      } # end test = treeWAS",
        "+ ",
        "",
        "+ ",
        "      ########### ########### ########### ########### ########### ########### ###########",
        "+ ",
        "",
        "+ ",
        "",
        "+ ",
        "",
        "+ ",
        "      if(is.null(names(snps.assoc))) names(snps.assoc) <- as.character(snps.assoc)",
        "+ ",
        "      if(is.null(snps.names)){",
        "+ ",
        "        if(is.null(colnames(snps))) colnames(snps) <- as.character(1:ncol(snps))",
        "+ ",
        "        snps.names <- colnames(snps)",
        "+ ",
        "      }",
        "+ ",
        "",
        "+ ",
        "      #########################",
        "+ ",
        "      ## common calculations ##",
        "+ ",
        "      #########################",
        "+ ",
        "      ## get test.negative",
        "+ ",
        "      if(length(which(snps.names %in% test.positive)) != 0){",
        "+ ",
        "        test.negative <- snps.names[-which(snps.names %in% test.positive)]",
        "+ ",
        "      }else{",
        "+ ",
        "        test.negative <- snps.names",
        "+ ",
        "      }",
        "+ ",
        "",
        "+ ",
        "",
        "+ ",
        "      ## get n.test.positive",
        "+ ",
        "      n.test.positive <- length(test.positive)",
        "+ ",
        "      ## get n.test.negative",
        "+ ",
        "      n.test.negative <- length(test.negative) ## == n.tests - n.test.positive",
        "+ ",
        "",
        "+ ",
        "      n.tests <- ncol(snps)",
        "+ ",
        "",
        "+ ",
        "      ########################",
        "+ ",
        "      ## GET TP, TN, FP, FN ##",
        "+ ",
        "      ########################",
        "+ ",
        "      ## get true positives",
        "+ ",
        "      ## for Set 3 there is 1 associated SNP, so 1 true positive...",
        "+ ",
        "      # if(set.number < 3){",
        "+ ",
        "      #   snps.associated <- NULL",
        "+ ",
        "      # }else{",
        "+ ",
        "      #   #         snps.associated <- paste(sapply(c(1:length(snps.assoc)),",
        "+ ",
        "      #   #                                         function(e)",
        "+ ",
        "      #   #                                           rep(names(snps.assoc)[e], 2)), c(1, 2), sep=\".\")",
        "+ ",
        "        snps.associated <- names(snps.assoc)",
        "+ ",
        "      # }",
        "+ ",
        "      true.positive <- test.positive[which(test.positive %in% snps.associated)]",
        "+ ",
        "      TP <- length(true.positive)",
        "+ ",
        "",
        "+ ",
        "      ## get true negatives",
        "+ ",
        "      ## for Set 3 all but ONE SNPs are NOT (intentionally) associated with the phenotype",
        "+ ",
        "      # if(set.number < 3){",
        "+ ",
        "      #   snps.not <- snps.names",
        "+ ",
        "      # }else{",
        "+ ",
        "        snps.not <- snps.names[-which(snps.names %in% snps.associated)]",
        "+ ",
        "      # }",
        "+ ",
        "      true.negative <- test.negative[which(test.negative %in% snps.not)]",
        "+ ",
        "      TN <- length(true.negative)",
        "+ ",
        "",
        "+ ",
        "      ## get false positives",
        "+ ",
        "      false.positive <- test.positive[which(test.positive %in% snps.not)]",
        "+ ",
        "      FP <- length(false.positive)",
        "+ ",
        "",
        "+ ",
        "      ## get false negatives",
        "+ ",
        "      false.negative <- test.negative[which(test.negative %in% snps.associated)]",
        "+ ",
        "      FN <- length(false.negative)",
        "+ ",
        "",
        "+ ",
        "",
        "+ ",
        "      #####################################",
        "+ ",
        "      ## CALCULATE METRICS OF EVALUATION ##",
        "+ ",
        "      #####################################",
        "+ ",
        "",
        "+ ",
        "      ## Do NOT need anything to find (no associated SNPs required) ######################################",
        "+ ",
        "",
        "+ ",
        "      ##############",
        "+ ",
        "      ## accuracy ##",
        "+ ",
        "      ##############",
        "+ ",
        "      ## ie. SUMMARY STATISTIC--Of all the CALLS/tests you made, how many of them were CORRECT",
        "+ ",
        "      ## ~ Pr(Correct Call | Call)",
        "+ ",
        "      # accuracy <- ((TP + TN) / n.tests) ### WHY IS THIS GIVING ME 0.5 (when all other metrics seem to be working....) ??!?!",
        "+ ",
        "      accuracy <- ((TP + TN) / (TP + TN + FP + FN))",
        "+ ",
        "      # acc <- (sensitivity*length(snps.associated) + specificity*length(snps.not))/ncol(snps)",
        "+ ",
        "",
        "+ ",
        "      #################",
        "+ ",
        "      ## specificity ##",
        "+ ",
        "      #################",
        "+ ",
        "      ## ie. Of all the truly NOT associated SNPs, how many did you manage to rule out?",
        "+ ",
        "      ## ~ Pr(Negative Test | SNP NOT associated)",
        "+ ",
        "      specificity <- (TN / (TN + FP)) ## = (1 - FPR)",
        "+ ",
        "",
        "+ ",
        "      #########",
        "+ ",
        "      ## FPR ##",
        "+ ",
        "      #########",
        "+ ",
        "      ## ie. How many truly NOT associated SNPs did you accidentally call significant",
        "+ ",
        "      ## ~ Pr(Positive Test | SNP NOT associated)",
        "+ ",
        "      FPR <- (FP / (FP + TN)) ## = (1 - specificity)",
        "+ ",
        "",
        "+ ",
        "",
        "+ ",
        "      ## NEED something to FIND, else uninformative! (True ASSOCIATED SNPs ~ required) ###################",
        "+ ",
        "",
        "+ ",
        "      #########",
        "+ ",
        "      ## FNR ##",
        "+ ",
        "      #########",
        "+ ",
        "      ## ie. How many truly ASSOCIATED SNPs did you accidentally miss",
        "+ ",
        "      ## ~ Pr(Negative Test | SNP ASSOCIATED)",
        "+ ",
        "      ## --> Set 1: will be 0/0 = NaN",
        "+ ",
        "      FNR <- (FN / (FN + TP))",
        "+ ",
        "",
        "+ ",
        "      #################",
        "+ ",
        "      ## sensitivity ##",
        "+ ",
        "      #################",
        "+ ",
        "      ## ie. How many truly ASSOCIATED SNPs did you manage to catch",
        "+ ",
        "      ## ~ Pr(Positive Test | SNP ASSOCIATED)",
        "+ ",
        "      ## --> Set 1: will be 0/0 = NaN",
        "+ ",
        "      sensitivity <- (TP / (TP + FN))",
        "+ ",
        "",
        "+ ",
        "      #########",
        "+ ",
        "      ## PPV ##",
        "+ ",
        "      #########",
        "+ ",
        "      ## ie. Of all the POSITIVE calls you made, how many were CORRECT/ identified truly ASSOCIATED SNPs",
        "+ ",
        "      ## ~ Pr(SNP ASSOCIATED | Positive Test)",
        "+ ",
        "      ## --> Set 1: will be 0 (UNLESS you made NO positive calls, then 0/0 = NaN)",
        "+ ",
        "      PPV <- (TP / (TP + FP)) ## = (1 - FDR)",
        "+ ",
        "",
        "+ ",
        "      #########",
        "+ ",
        "      ## FDR ##",
        "+ ",
        "      #########",
        "+ ",
        "      ## ie. Of all the POSITIVE calls you made, how many were WRONG/ identified truly NOT associated SNPs",
        "+ ",
        "      ## ~ Pr(SNP NOT associated | Positive Test)",
        "+ ",
        "      ## --> Set 1: will be 1 (UNLESS you made NO positive calls, then 0/0 = NaN)",
        "+ ",
        "      FDR <- (FP / (FP + TP)) ## = (1 - PPV)",
        "+ ",
        "",
        "+ ",
        "",
        "+ ",
        "      ##",
        "+ ",
        "",
        "+ ",
        "      ##################################",
        "+ ",
        "      ## combine eval metrics into df ##",
        "+ ",
        "      ##################################",
        "+ ",
        "      performance[[j]] <- data.frame(accuracy, specificity, FPR, FNR, sensitivity, PPV, FDR)",
        "+ ",
        "",
        "+ ",
        "    } # end for loop",
        "> ",
        "",
        "> ",
        "    ## get names for treeWAS tests:",
        "> ",
        "    treeWAS.names <- list()",
        "> ",
        "",
        "> ",
        "    for(r in 1:length(res)){",
        "+ ",
        "      if(r == 1) t <- \"terminal\"",
        "+ ",
        "      if(r == 2) t <- \"simultaneous\"",
        "+ ",
        "      if(r == 3) t <- \"subsequent\"",
        "+ ",
        "",
        "+ ",
        "      treeWAS.names[[r]] <- paste(\"treeWAS\", t, names(res[[t]]), sep=\".\")",
        "+ ",
        "    }",
        "> ",
        "",
        "> ",
        "    treeWAS.names <- as.vector(unlist(treeWAS.names))",
        "> ",
        "",
        "> ",
        "    names(performance) <- c(\"snps.assoc\",",
        "+ ",
        "                            \"fisher.bonf\", \"fisher.fdr\",",
        "+ ",
        "                            treeWAS.names,",
        "+ ",
        "                            \"plink.assoc.bonf\", \"plink.assoc.fdr\",",
        "+ ",
        "                            \"plink.assoc.gc.bonf\", \"plink.assoc.gc.fdr\")",
        "> ",
        "",
        "> ",
        "    ################################    ################################    ################################",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "    ###########################################################################################################################",
        "> ",
        "    ######################################### *** SAVING & RETURNING *** ######################################################",
        "> ",
        "    ###########################################################################################################################",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "    ########################",
        "> ",
        "    ## SAVE DATA & OUTPUT ##",
        "> ",
        "    ########################",
        "> ",
        "    ## set wd",
        "> ",
        "    setwd(wd)",
        "> ",
        "    ## get uniqueID",
        "> ",
        "    uniqueID <- paste(\"set\", set.number, \"_\", number, sep=\"\")",
        "> ",
        "",
        "> ",
        "    ## save snps, phen, tree, out, res, fisher.results, plink.assoc.results, performance",
        "> ",
        "    snps <- snps.ori.ori",
        "> ",
        "    phen <- phen.ori.ori",
        "> ",
        "",
        "> ",
        "    ## save snps",
        "> ",
        "    filename.snps[[i]] <- paste(\"./\", uniqueID, \"_snps\", \".Rdata\", sep=\"\")",
        "> ",
        "    save(snps, file=filename.snps[[i]])",
        "> ",
        "    ## save phen",
        "> ",
        "    filename.phen[[i]] <- paste(\"./\", uniqueID, \"_phen\", \".Rdata\", sep=\"\")",
        "> ",
        "    save(phen, file=filename.phen[[i]])",
        "> ",
        "    ## save phen.plot.col",
        "> ",
        "    filename.phen.plot.col[[i]] <- paste(\"./\", uniqueID, \"_phen.plot.col\", \".Rdata\", sep=\"\")",
        "> ",
        "    save(phen.plot.col, file=filename.phen.plot.col[[i]])",
        "> ",
        "    ## save tree",
        "> ",
        "    filename.tree[[i]] <- paste(\"./\", uniqueID, \"_tree\", \".Rdata\", sep=\"\")",
        "> ",
        "    save(tree, file=filename.tree[[i]])",
        "> ",
        "    ## save out",
        "> ",
        "    filename.out[[i]] <- paste(\"./\", uniqueID, \"_out\", \".Rdata\", sep=\"\")",
        "> ",
        "    save(out, file=filename.out[[i]])",
        "> ",
        "    ## save res",
        "> ",
        "    res <- res.complete # includes data from reconstructions, values from treeWAS tests",
        "> ",
        "    filename.res[[i]] <- paste(\"./\", uniqueID, \"_res\", \".Rdata\", sep=\"\")",
        "> ",
        "    save(res, file=filename.res[[i]])",
        "> ",
        "    ## save fisher.results",
        "> ",
        "    filename.fisher.results[[i]] <- paste(\"./\", uniqueID, \"_fisher.results\", \".Rdata\", sep=\"\")",
        "> ",
        "    save(fisher.results, file=filename.fisher.results[[i]])",
        "> ",
        "    ## save plink.assoc.results",
        "> ",
        "    filename.plink.results[[i]] <- paste(\"./\", uniqueID, \"_plink.results\", \".Rdata\", sep=\"\")",
        "> ",
        "    save(plink.results, file=filename.plink.results[[i]])",
        "> ",
        "    ## save performance",
        "> ",
        "    filename.args[[i]] <- paste(\"./\", uniqueID, \"_args\", \".Rdata\", sep=\"\")",
        "> ",
        "    save(args, file=filename.args[[i]])",
        "> ",
        "    ## save performance",
        "> ",
        "    filename.performance[[i]] <- paste(\"./\", uniqueID, \"_performance\", \".Rdata\", sep=\"\")",
        "> ",
        "    save(performance, file=filename.performance[[i]])",
        "> ",
        "",
        "> ",
        "    ## save score3 raw data and alternatives",
        "> ",
        "    filename.score3[[i]] <- paste(\"./\", uniqueID, \"_score3\", \".Rdata\", sep=\"\")",
        "> ",
        "    save(score3, file=filename.score3[[i]])",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "    #########################",
        "> ",
        "    ## STORE DATA & OUTPUT ##",
        "> ",
        "    #########################",
        "> ",
        "    SNPS[[i]] <- snps",
        "> ",
        "    names(SNPS)[[i]] <- uniqueID",
        "> ",
        "    PHEN[[i]] <- phen",
        "> ",
        "    names(PHEN)[[i]] <- uniqueID",
        "> ",
        "    PHEN.PLOT.COL[[i]] <- phen.plot.col",
        "> ",
        "    names(PHEN.PLOT.COL[[i]]) <- uniqueID",
        "> ",
        "    TREE[[i]] <- tree",
        "> ",
        "    names(TREE)[[i]] <- uniqueID",
        "> ",
        "    OUT[[i]] <- out",
        "> ",
        "    names(OUT)[[i]] <- uniqueID",
        "> ",
        "    RES[[i]] <- res",
        "> ",
        "    names(RES)[[i]] <- uniqueID",
        "> ",
        "    FISHER.RESULTS[[i]] <- fisher.results",
        "> ",
        "    names(FISHER.RESULTS)[[i]] <- uniqueID",
        "> ",
        "    PLINK.RESULTS[[i]] <- plink.results",
        "> ",
        "    names(PLINK.RESULTS)[[i]] <- uniqueID",
        "> ",
        "    ARGS[[i]] <- args",
        "> ",
        "    names(ARGS)[[i]] <- uniqueID",
        "Error in names(ARGS)[[i]] <- uniqueID : \n  'names' attribute [1] must be the same length as the vector [0]\n",
        "> ",
        "    PERFORMANCE[[i]] <- performance",
        "> ",
        "    names(PERFORMANCE)[[i]] <- uniqueID",
        "> ",
        "",
        "> ",
        "    SCORE3[[i]] <- score3",
        "> ",
        "    names(SCORE3)[[i]] <- uniqueID",
        "> ",
        "toReturn <- list(SNPS, PHEN, PHEN.PLOT.COL, TREE, RES, FISHER.RESULTS, PLINK.RESULTS, ARGS, PERFORMANCE, score3)",
        "> ",
        "names(toReturn) <- c(\"snps\", \"phen\", \"phen.plot.col\", \"tree\", \"res\", \"fisher.results\", \"plink.results\", \"arguments\", \"performance\", \"score3\")",
        "> ",
        "args",
        "NULL\n",
        "> ",
        "getwd()",
        "[1] \"C:/Cait 2016/Work/Xavier/Sims/set1\"\n",
        "> ",
        "toto <- get(load(\"./set1_28_args.Rdata\"))",
        "> ",
        "toto",
        "$set.number\n[1] 1\n\n$n.reps\n[1] 20\n\n$set.seed.as\n[1] \"file.number\"\n\n$working.dir\n[1] \"C:/Cait 2016/Work/Xavier/Sims\"\n\n$from.file\n[1] FALSE\n\n$file.n\nNULL\n\n$Windows\n[1] TRUE\n\n$n.ind\n[1] 100\n\n$n.snps\n[1] 10000\n\n$n.subs\n[1] 1\n\n$n.phen.subs\n[1] 15\n\n$n.snps.assoc\n[1] 10\n\n$assoc.prob\n[1] 90\n\n$grp.min\n[1] 0.25\n\n$s\n[1] 1\n\n$af\n[1] 5\n\n$coaltree\n[1] FALSE\n\n$p.value\n[1] 0.05\n\n$sim.n.snps\n[1] 1e+05\n\n$treeWAS.test\n[1] \"terminal\"     \"simultaneous\" \"subsequent\"  \n\n$snps.reconstruction\n[1] \"parsimony\"\n\n$phen.reconstruction\n[1]",
        " \"parsimony\"\n\n",
        "> ",
        "args <- toto",
        "> ",
        "save(args, file=\"./set1_29_args.Rdata\")",
        "> ",
        "gc()",
        "           used  (Mb) gc trigger    (Mb)   max used    (Mb)\nNcells  2990930 159.8   15509756   828.4   24233996  1294.3\nVcells 71904919 548.6 1399147788 10674.7 2000460622 15262.4\n",
        "> ",
        "source('C:/Users/Caitlin/treeWAS/pkg/R/simTest.R')",
        "\nRestarting R session...\n\n"
    ],
    "type" : [
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2
    ]
}