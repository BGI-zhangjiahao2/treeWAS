{
    "collab_server" : "",
    "contents" : "\n###############\n## plot.phen ##\n###############\n\n############\n## TO DO: ##\n############\n\n## (1) Code to reconstruct phen of internal nodes (and branches) if\n## only phen for terminal is provided with tree.\n\n\n########################################################################\n\n###################\n## DOCUMENTATION ##\n###################\n\n#' Short one-phrase description.\n#'\n#' Longer proper discription of function...\n#'\n#' @param tree A phylo object.\n#' @param phen.nodes A vector containing the phenotypic state of either\n#' (i) only terminal nodes in tree or\n#' (ii) all nodes, terminal and internal in tree.\n#' @param plot A logical specifying whether to display a plot\n#' of the inputted phylogenetic tree with edges coloured to show the\n#' simulated phenotypic substitution process.\n#'\n#'\n#'\n#' @author Caitlin Collins \\email{caitiecollins@@gmail.com}\n#' @export\n#' @examples\n#'\n#' ## load data\n#' data(dist)\n#' str(dist)\n#'\n#' ## basic use of fn\n#' fn(arg1, arg2)\n#'\n#' #' ## more elaborate use of fn\n#' fn(arg1, arg2)\n#'\n#' @import adegenet phangorn\n\n########################################################################\n\n###############################\n## SIMPLE PLOT FOR CHECKING: ##\n###############################\n\n# plot(tree, show.tip=FALSE, edge.width=2)\n# tiplabels(text=tree$tip.label, cex=0.6, adj=c(-0.5, 0), col=\"black\", frame=\"none\")\n# edgelabels(text=paste(\"e\", c(1:nrow(tree$edge)), sep=\".\"),\n#            cex=0.66, font=2, frame=\"none\", col=\"blue\", adj=c(1,1))\n# ## coaltree??\n# # nodelabels(text=rev(unique(tree$edge[,1])), cex=0.6, bg=transp(\"yellow\", 0.7), col=\"black\", frame=\"circle\") # frame=\"none\", col=\"red\"\n# ## rtree??\n# nodelabels(text=unique(tree$edge[,1]), cex=0.6, bg=transp(\"yellow\", 0.7), col=\"black\", frame=\"circle\") # frame=\"none\", col=\"red\"\n# axisPhylo()\n\n\n\nplot.phen <- function(tree, phen.nodes, snp.nodes=NULL, plot=TRUE, RTL=FALSE, main.title = TRUE, ...){\n\n  # require(phangorn)\n  # require(adegenet)\n\n  #############################################################################\n  ######################## PLOT phylo with PHEN ###############################\n  #############################################################################\n\n  ## SIDE-BY-SIDE PLOTS??\n  if(!is.null(phen.nodes) & !is.null(snp.nodes)) par(mfrow=c(1,2))\n\n  ## get number of terminal nodes\n  n.ind <- tree$Nnode+1\n\n  ## check if phen provided is for all nodes or only terminal nodes:\n  if(length(phen.nodes) == (n.ind + tree$Nnode)){\n\n    ## get COLOR for NODES\n    nodeCol <- as.vector(phen.nodes)\n    nodeCol <- as.character(nodeCol)\n    # nodeCol <- replace(nodeCol, which(nodeCol == \"B\"), \"red\")\n    # nodeCol <- replace(nodeCol, which(nodeCol == \"A\"), \"blue\")\n    nodeCol <- replace(nodeCol, which(nodeCol %in% c(\"B\", \"1\")), \"red\")\n    nodeCol <- replace(nodeCol, which(nodeCol %in% c(\"A\", \"0\")), \"blue\")\n    nodeCol <- as.vector(unlist(nodeCol))\n    ## get COLOR for LEAVES ONLY\n    leafCol <- nodeCol[1:n.ind]\n    ## get COLOR of INTERNAL nodes ONLY\n    internalNodeCol <- nodeCol[(n.ind+1):length(nodeCol)]\n\n    ## get COLOR for EDGES\n    edgeCol <- rep(\"black\", nrow(tree$edge))\n    for(i in 1:nrow(tree$edge)){\n      edgeCol[i] <- nodeCol[tree$edge[i,2]]\n      if(nodeCol[tree$edge[i,1]] != nodeCol[tree$edge[i,2]]) edgeCol[i] <- \"grey\"\n    }\n    edgeLabCol <- edgeCol\n\n    ###############\n    ## plot TREE ##\n    ###############\n    if(plot==TRUE){\n      if(n.ind <= 20){\n        plot(tree, show.tip=FALSE, edge.width=2, edge.color=edgeCol, ...) # edgeCol\n        ## Add title?\n        if(main.title == TRUE){\n          title(\"Coalescent tree w/ phenotypic changes\")\n        }else{\n          if(!is.null(main.title)) title(main.title)\n        }\n        axisPhylo()\n        edgelabels(text=paste(\"e\", c(1:nrow(tree$edge)), sep=\".\"),\n                   cex=0.5, font=2, bg=transp(edgeLabCol, 0.3), adj=c(1,1))\n        tiplabels(text=tree$tip.label, cex=0.6, adj=c(-0.5, 0), bg=transp(leafCol, 0.3))\n        nodelabels(text=rev(unique(tree$edge[,1])), cex=0.5, bg=transp(internalNodeCol, 0.3))\n\n      }else{\n\n        if(RTL == FALSE){\n          plot(tree, show.tip=FALSE, edge.width=2, edge.color=edgeCol, ...) # edgeCol\n        }else{\n          plot(tree, show.tip=FALSE, edge.width=2, edge.color=edgeCol, direction = \"leftwards\", ...) # edgeCol\n        }\n        ## Add title?\n        if(main.title == TRUE){\n          title(\"Coalescent tree w/ phenotypic changes\")\n        }else{\n          if(!is.null(main.title)) title(main.title)\n        }\n        axisPhylo()\n        # edgelabels(text=paste(\"e\", c(1:nrow(tree$edge)), sep=\".\"),\n                  # cex=0.5, font=2, bg=transp(edgeLabCol, 0.3), adj=c(1,1))\n        if(RTL == FALSE){\n          tiplabels(text=tree$tip.label, cex=0.6, adj=c(-0.5, 0), col=leafCol, frame=\"none\")\n        }else{\n          ## if direction=\"leftwards\"\n          tiplabels(text=tree$tip.label, cex=0.6, adj=c(1.5,0), col=leafCol, frame=\"none\")\n        }\n        ## make sure this isn't backward...:\n        #nodelabels(text=rev(unique(tree$edge[,1])), cex=0.5, bg=transp(internalNodeCol, 0.3))\n        ## should be numbered s.t. the root node is n.term+1\n        ## RECALL: terminal nodes are numbered 1:n.ind from bottom to top of plot of tree;\n        ## edges are numbered 1:nrow(edges) by following the lowest trace on the plot\n        ## (starting from the root down to the lowermost tips);\n        ## thus, internal nodes are numbered (n.ind+1):(n.ind+(n.ind-1)),\n        ## from root to the top-most internal node to be connected (ie. the highest in the plot)\n      }\n    } # end plot = TRUE\n\n    if(!is.null(snp.nodes)){\n\n      phen.nodes <- snp.nodes # for convenience\n\n      ## check if phen provided is for all nodes or only terminal nodes:\n      if(length(phen.nodes) == (n.ind + tree$Nnode)){\n\n        ## get COLOR for NODES\n        nodeCol <- as.vector(phen.nodes)\n        nodeCol <- as.character(nodeCol)\n        # nodeCol <- replace(nodeCol, which(nodeCol == \"B\"), \"red\")\n        # nodeCol <- replace(nodeCol, which(nodeCol == \"A\"), \"blue\")\n        nodeCol <- replace(nodeCol, which(nodeCol %in% c(\"B\", \"1\")), \"red\")\n        nodeCol <- replace(nodeCol, which(nodeCol %in% c(\"A\", \"0\")), \"blue\")\n        nodeCol <- as.vector(unlist(nodeCol))\n        ## get COLOR for LEAVES ONLY\n        leafCol <- nodeCol[1:n.ind]\n        ## get COLOR of INTERNAL nodes ONLY\n        internalNodeCol <- nodeCol[(n.ind+1):length(nodeCol)]\n\n        ## get COLOR for EDGES\n        edgeCol <- rep(\"black\", nrow(tree$edge))\n        for(i in 1:nrow(tree$edge)){\n          edgeCol[i] <- nodeCol[tree$edge[i,2]]\n          if(nodeCol[tree$edge[i,1]] != nodeCol[tree$edge[i,2]]) edgeCol[i] <- \"grey\"\n        }\n        edgeLabCol <- edgeCol\n\n\n        ###############\n        ## plot TREE ##\n        ###############\n        if(plot==TRUE){\n          if(n.ind <= 20){\n            plot(tree, show.tip=FALSE, edge.width=2, edge.color=edgeCol, direction=\"leftwards\") # edgeCol\n            ## Add title?\n            if(main.title == TRUE){\n              title(\"Coalescent tree w/ phenotypic changes\")\n            }else{\n              if(!is.null(main.title)) title(main.title)\n            }\n            axisPhylo()\n            edgelabels(text=paste(\"e\", c(1:nrow(tree$edge)), sep=\".\"),\n                       cex=0.5, font=2, bg=transp(edgeLabCol, 0.3), adj=c(1,1))\n            tiplabels(text=tree$tip.label, cex=0.6, adj=c(-0.5, 0), bg=transp(leafCol, 0.3))\n            nodelabels(text=rev(unique(tree$edge[,1])), cex=0.5, bg=transp(internalNodeCol, 0.3))\n\n          }else{\n\n            plot(tree, show.tip=FALSE, edge.width=2, edge.color=edgeCol, direction=\"leftwards\") # edgeCol\n            ## Add title?\n            if(main.title == TRUE){\n              title(\"Coalescent tree w/ phenotypic changes\")\n            }else{\n              if(!is.null(main.title)) title(main.title)\n            }\n            axisPhylo()\n            # edgelabels(text=paste(\"e\", c(1:nrow(tree$edge)), sep=\".\"),\n            # cex=0.5, font=2, bg=transp(edgeLabCol, 0.3), adj=c(1,1))\n\n            tiplabels(text=tree$tip.label, cex=0.6, adj=c(1.5, 0), col=leafCol, frame=\"none\") # adj=c(1.5,0) # if direction=\"leftwards\"\n\n            ## make sure this isn't backward...:\n            #nodelabels(text=rev(unique(tree$edge[,1])), cex=0.5, bg=transp(internalNodeCol, 0.3))\n            ## should be numbered s.t. the root node is n.term+1\n            ## RECALL: terminal nodes are numbered 1:n.ind from bottom to top of plot of tree;\n            ## edges are numbered 1:nrow(edges) by following the lowest trace on the plot\n            ## (starting from the root down to the lowermost tips);\n            ## thus, internal nodes are numbered (n.ind+1):(n.ind+(n.ind-1)),\n            ## from root to the top-most internal node to be connected (ie. the highest in the plot)\n          }\n        } # end plot = TRUE\n      } # end check for length snp.nodes\n    } # end snp.nodes\n\n    ## return plot par settings to 1 plot per window..\n    if(!is.null(phen.nodes) & !is.null(snp.nodes)) par(mfrow=c(1,1))\n\n  }else{ # end phen for all nodes\n\n    #######################################################################\n\n    ####################################################################\n    ## If the user has PROVIDED a phenotype (for terminal nodes only) ##\n    ####################################################################\n\n    phen <- phen.nodes\n\n    if(!is.null(phen)){\n      # phen <- as.factor(sample(c(\"A\", \"B\", \"C\", \"D\"), 100, replace=TRUE))\n\n      ## get COLOR for LEAVES\n      n.levels <- length(levels(as.factor(phen)))\n      ## if we have only 2 levels, use standard red and blue\n      if(n.levels==2){\n        leafCol <- c(\"red\", \"blue\")\n      }else{\n        ## but if we have n levels (n != 2), use funky palette\n        leafCol <- get(\"funky\")(n.levels)\n      }\n\n      scheme <- as.numeric(phen)\n      leafCol <- leafCol[scheme]\n\n      ## get COLOR for EDGES\n      edgeCol <- edgeLabCol <- \"black\" ## for NOW...\n      ########\n      ## TO DO-- color ~ terminal edges red/blue same as phen of terminal node...\n      #### ... UNTIL two edge colors meet at any internal node (then just black edges to root)\n\n      ###############\n      ## plot TREE ##\n      ###############\n      if(plot==TRUE){\n        plot(tree, show.tip=FALSE, edge.width=2, edge.color=edgeCol, ...)\n        title(\"Coalescent tree w/ phenotypes of leaves\")\n        axisPhylo()\n        tiplabels(text=tree$tip.label, cex=0.6, adj=c(-0.5, 0), bg=transp(leafCol, 0.3))\n      } # end plot = TRUE\n    } # end if(!is.null(phen)) ## ie. PROVIDED phenotype & plotting\n  } # end if phen for terminal nodes only\n\n  ## get all info relevant to plotting phenotype with colored phylo:\n  phen.plot.colors <- list(edgeLabCol, edgeCol, nodeCol, internalNodeCol, leafCol)\n  names(phen.plot.colors) <- c(\"edge.labels\", \"edges\", \"all.nodes\", \"internal.nodes\", \"tip.labels\")\n\n  return(phen.plot.colors)\n\n} # end plot.phen\n\n\n\n# i <- 7\n# plot.phen(tree, phen.nodes=phen.nodes, snp.nodes=snps.assoc.nodes[,i])\n# length(which(phen.nodes[1:100] == snps.assoc.nodes[,i][1:100]))\n\n# i <- 6\n# plot.phen(tree, phen.nodes=phen.rec, snp.nodes=snps.rec[,snps.assoc[i]])\n# length(which(phen.rec[1:100] == snps.rec[,snps.assoc[i]][1:100]))\n\n###############################\n## plotting reconstructions: ##\n###############################\n\n# ## PLUS -- enable plotting of boxes of extra variables along tips..\n#\n# ## get rec (from simTest):\n#\n# tree <- out$tree[[1]]\n#\n# rec <- out$res[[1]]$dat$snps.rec\n#\n# snps.assoc <- out$performance[[1]]$snps.assoc\n#\n# var.rec <- rec[,snps.assoc[6]]\n# var.rec <- round(var.rec)\n#\n# var.rec <- replace(var.rec, which(var.rec == 0), \"A\")\n# var.rec <- replace(var.rec, which(var.rec == 1), \"B\")\n#\n# plot.phen(tree, phen.nodes = var.rec)\n#\n# ## compare to phen:\n# phen.rec <- as.character(out$res[[1]]$dat$phen.rec)\n# phen.rec <- replace(phen.rec, which(phen.rec == 0), \"A\")\n# phen.rec <- replace(phen.rec, which(phen.rec == 1), \"B\")\n#\n# plot.phen(tree, phen.nodes=phen.rec)\n#\n# ## side-by-side?\n# par(mfrow=c(1,2))\n# ## phen:\n# plot.phen(tree, phen.nodes=phen.rec)\n# title(\"set1_31: phen.rec (left) vs.\", line=-0.5)\n# ## snp:\n# plot.phen(tree, phen.nodes = var.rec, direction=\"leftwards\") # tip adj=c(1.5,0)\n# title(\"snps.rec 304 (right)\", line=-0.5)\n\n\n\n\n\n\n\n\n#\n\n",
    "created" : 1470024400051.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2238591951",
    "id" : "EBC95603",
    "lastKnownWriteTime" : 1473350968,
    "last_content_update" : 1473350968038,
    "path" : "~/treeWAS/pkg/R/plot.phen.R",
    "project_path" : "R/plot.phen.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : true,
    "source_window" : "",
    "type" : "r_source"
}