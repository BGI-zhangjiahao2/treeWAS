{
    "contents" : "\n\n#############\n## EXAMPLE ##\n#############\n\n#######################\n## Clear environment ##\n#######################\n## NOTE TO USER: his step will delete all variables from your environment.\n## You may want to save unsaved variables or skip this step.\nrm(list=ls())\n\n##############################\n## Load sample distribution ##\n##############################\n## (currently using the ClonalFrame Saureus output\n## just so we can see what happens when we\n## simulate data based on this distribution\n## AND then use it to inform treeWAS\n## (as compared to treeWAS's performance with dist=NULL))\ndata(dist)\n\n################################\n## Simulate a coalescent tree ##\n################################\ntree <- coalescent.tree.sim(n.ind = 100, seed = 1)\n\n#######################################################\n## Simulate a phenotype for individuals in this tree ##\n#######################################################\n## get list of phenotype simulation output\nphen.output <- phen.sim(tree, n.subs = 15)\n\n## get phenotype for terminal nodes only\nphen <- phen.output$phen\n\n## get phenotype for all nodes,\n## terminal and internal\nphen.nodes <- phen.output$phen.nodes\n\n## get the indices of phen.subs (ie. branches)\nphen.loci <- phen.output$phen.loci\n\n#################################\n## Plot Tree showing Phenotype ##\n#################################\nphen.plot.colours <- plot.phen(tree = tree,\n                               phen.nodes = phen.nodes,\n                               plot = TRUE)\n\n###################################################################\n## Simulate genetic data (SNPs) that fit this tree and phenotype ##\n###################################################################\nsnps.output <- snp.sim(n.snps = 10000, n.subs=dist,\n                       n.snps.assoc = 10, assoc.prob = 90,\n                       tree = tree,\n                       phen.loci = phen.loci,\n                       heatmap = FALSE, reconstruct = FALSE,\n                       dist.dna.model=\"JC69\",\n                       seed = 1)\nsnps <- snps.output$snps\nsnps.assoc <- snps.output$snps.assoc\nsnps.names <- colnames(snps)\nsnps.indices <- c(1:ncol(snps))\n\n################################################################################\n## Note that all previous steps can be performed with this combined function: ##\n################################################################################\n# sim.output <- coalescent.sim(n.ind=100,\n#                       n.snps=10000, n.subs=1,\n#                       n.snps.assoc=10, assoc.prob=90,\n#                       n.phen.subs=15, phen=NULL,\n#                       plot=TRUE,\n#                       heatmap=FALSE, reconstruct=FALSE,\n#                       seed=1)\n# snps <- sim.output$snps\n# tree <- sim.output$tree\n# phen <- sim.output$phen\n# snps.assoc <- sim.output$snps.assoc\n\n\n#################\n## Run treeWAS ##\n#################\n\n## First, we'll try treeWAS with dist=NULL\n## (so it will use the default Poisson with parameter 1 to\n## get the number of substitutions per site to simulate)\n\ntreeWAS.output <- treeWAS(snps, phen, n.subs = 1,\n                          tree = tree,\n                          dist.dna.model = NULL, plot.tree = FALSE,\n                          test = \"score\",\n                          p.value = 0.001, p.value.correct = \"bonf\", p.value.by = \"count\",\n                          sim.n.snps = 10000, n.reps = 1,\n                          plot.null.dist = TRUE, plot.dist = FALSE)\n\nstr(treeWAS.output)\n\n# out <- treeWAS.output\n# corr.dat <- out$corr.dat\n# corr.sim <- out$corr.sim\n\n\n##############\n## EVALUATE ##\n##############\ntest.positive <- treeWAS.output$sig.snps$SNP.locus\ntest.negative <- snps.indices[-which(snps.indices %in% test.positive)]\n## get true positives\nsnps.not <- snps.names[-which(snps.indices %in% snps.assoc)]\ntrue.positive <- test.positive[which(test.positive %in% snps.assoc)]\nTP <- length(true.positive)\n## get true negatives\ntrue.negative <- test.negative[which(test.negative %in% snps.not)]\nTN <- length(true.negative)\n## get false positives\nfalse.positive <- test.positive[which(test.positive %in% snps.not)]\nFP <- length(false.positive)\n## get false negatives\nfalse.negative <- test.negative[which(test.negative %in% snps.assoc)]\nFN <- length(false.negative)\n\n\n#################\n## sensitivity ##\n#################\n## ie. How many truly ASSOCIATED SNPs did you manage to catch\n## ~ Pr(Positive Test | SNP ASSOCIATED)\n## --> Set 1: will be 0/0 = NaN\nsensitivity <- (TP / (TP + FN))\nsensitivity\n#################\n## specificity ##\n#################\n## ie. Of all the truly NOT associated SNPs, how many did you manage to rule out?\n## ~ Pr(Negative Test | SNP NOT associated)\nspecificity <- (TN / (TN + FP)) ## = (1 - FPR)\nspecificity\n#########\n## PPV ##\n#########\n## ie. Of all the POSITIVE calls you made, how many were CORRECT/ identified truly ASSOCIATED SNPs\n## ~ Pr(SNP ASSOCIATED | Positive Test)\n## --> Set 1: will be 0 (UNLESS you made NO positive calls, then 0/0 = NaN)\nPPV <- (TP / (TP + FP)) ## = (1 - FDR)\nPPV\n\n\n#################    #################    #################    #################\n\n## COMPARE TO: ##\n\n#################\n## Run treeWAS ##\n#################\n\n## Second, we can try treeWAS with dist=dist\n## (where dist comes from the .Rdata file loaded just before we ran coalescent.sim)\n## (so it will use the true distribution to\n## identify the number of substitutions per site to simulate)\n\ntreeWAS.output2 <- treeWAS(snps, phen, n.subs = dist,\n                           tree = tree,\n                           dist.dna.model = NULL, plot.tree = FALSE,\n                           test = \"score\",\n                           p.value = 0.001, p.value.correct = \"bonf\", p.value.by = \"count\",\n                           sim.n.snps = 10000, n.reps = 1,\n                           plot.null.dist = TRUE, plot.dist = FALSE)\n\nstr(treeWAS.output2)\n\n##############\n## EVALUATE ##\n##############\ntest.positive <- treeWAS.output2$sig.snps$SNP.locus\ntest.negative <- snps.indices[-which(snps.indices %in% test.positive)]\n## get true positives\nsnps.not <- snps.names[-which(snps.indices %in% snps.assoc)]\ntrue.positive <- test.positive[which(test.positive %in% snps.assoc)]\nTP <- length(true.positive)\n## get true negatives\ntrue.negative <- test.negative[which(test.negative %in% snps.not)]\nTN <- length(true.negative)\n## get false positives\nfalse.positive <- test.positive[which(test.positive %in% snps.not)]\nFP <- length(false.positive)\n## get false negatives\nfalse.negative <- test.negative[which(test.negative %in% snps.assoc)]\nFN <- length(false.negative)\n\n#################\n## sensitivity ##\n#################\n## ie. How many truly ASSOCIATED SNPs did you manage to catch\n## ~ Pr(Positive Test | SNP ASSOCIATED)\n## --> Set 1: will be 0/0 = NaN\nsensitivity <- (TP / (TP + FN))\nsensitivity\n#################\n## specificity ##\n#################\n## ie. Of all the truly NOT associated SNPs, how many did you manage to rule out?\n## ~ Pr(Negative Test | SNP NOT associated)\nspecificity <- (TN / (TN + FP)) ## = (1 - FPR)\nspecificity\n#########\n## PPV ##\n#########\n## ie. Of all the POSITIVE calls you made, how many were CORRECT/ identified truly ASSOCIATED SNPs\n## ~ Pr(SNP ASSOCIATED | Positive Test)\n## --> Set 1: will be 0 (UNLESS you made NO positive calls, then 0/0 = NaN)\nPPV <- (TP / (TP + FP)) ## = (1 - FDR)\nPPV\n\n#################    #################    #################    #################\n\n## COMPARE TO: ##\n\n#################\n## Run treeWAS ##\n#################\n\n## Third, we can try treeWAS with dist=NULL\n## So we will use the Fitch parsimony functions from R pkg phangorn\n## (reconfigured for our purposes in treeWAS function get.fitch.n.mts)\n## to reconstruct the distribution of n.subs-per-site from the snps data and tree.\n\ntreeWAS.output3 <- treeWAS(snps, phen, n.subs = NULL,\n                           tree = tree,\n                           dist.dna.model = NULL, plot.tree = FALSE,\n                           test = \"score\",\n                           p.value = 0.001, p.value.correct = \"bonf\", p.value.by = \"count\",\n                           sim.n.snps = 10000, n.reps = 1,\n                           plot.null.dist = TRUE, plot.dist = FALSE)\n\nstr(treeWAS.output3)\n\n##############\n## EVALUATE ##\n##############\ntest.positive <- treeWAS.output3$sig.snps$SNP.locus\ntest.negative <- snps.indices[-which(snps.indices %in% test.positive)]\n## get true positives\nsnps.not <- snps.names[-which(snps.indices %in% snps.assoc)]\ntrue.positive <- test.positive[which(test.positive %in% snps.assoc)]\nTP <- length(true.positive)\n## get true negatives\ntrue.negative <- test.negative[which(test.negative %in% snps.not)]\nTN <- length(true.negative)\n## get false positives\nfalse.positive <- test.positive[which(test.positive %in% snps.not)]\nFP <- length(false.positive)\n## get false negatives\nfalse.negative <- test.negative[which(test.negative %in% snps.assoc)]\nFN <- length(false.negative)\n\n#################\n## sensitivity ##\n#################\n## ie. How many truly ASSOCIATED SNPs did you manage to catch\n## ~ Pr(Positive Test | SNP ASSOCIATED)\n## --> Set 1: will be 0/0 = NaN\nsensitivity <- (TP / (TP + FN))\nsensitivity\n#################\n## specificity ##\n#################\n## ie. Of all the truly NOT associated SNPs, how many did you manage to rule out?\n## ~ Pr(Negative Test | SNP NOT associated)\nspecificity <- (TN / (TN + FP)) ## = (1 - FPR)\nspecificity\n#########\n## PPV ##\n#########\n## ie. Of all the POSITIVE calls you made, how many were CORRECT/ identified truly ASSOCIATED SNPs\n## ~ Pr(SNP ASSOCIATED | Positive Test)\n## --> Set 1: will be 0 (UNLESS you made NO positive calls, then 0/0 = NaN)\nPPV <- (TP / (TP + FP)) ## = (1 - FDR)\nPPV\n",
    "created" : 1460133913452.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1296568619",
    "id" : "B403196D",
    "lastKnownWriteTime" : 1455295750,
    "path" : "~/treeWAS/pkg/vignettes/treeWAS_example.R",
    "project_path" : "vignettes/treeWAS_example.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}