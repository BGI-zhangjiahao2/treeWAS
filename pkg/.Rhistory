axis.text.y = element_text(size=19),
axis.title.x=element_text(size=27, margin=margin(15,10,0,0)),
axis.title.y=element_text(size=27, margin=margin(15,10,0,0)),
legend.position="none")
table(df$n.ind)
seq(50,200, length.out=10)
seq(50,200, length.out=9)
levs <- c("10-20", "20-30", "30-40", "40-50", "50-60", "60-70", "70-80", "80-90", "90-100") ## (thousands)
levels(dat$n.loci) <- levs
##########
## PLOT ##
##########
# Use the original data frame, but put factor() directly in the plot specification
## FPR:
ggplot(data=dat, aes(x=n.loci, y=FPR, group=assoc.test, colour=assoc.test)) +
geom_line(size=1.15) +
geom_point(size = 3.5) +
labs(x="Number of Loci (thousands)") +
scale_y_continuous(limits=c(-0.002, 0.152)) +
theme(axis.text.x = element_text(angle=35, hjust=1, vjust=0.95, size=19),
axis.text.y = element_text(size=19),
axis.title.x=element_text(size=27, margin=margin(15,10,0,0)),
axis.title.y=element_text(size=27, margin=margin(15,10,0,0)),
legend.position="none")
## SENSITIVITY:
ggplot(data=dat, aes(x=n.loci, y=sensitivity, group=assoc.test, colour=assoc.test)) +
geom_line(size=1.15) +
geom_point(size = 3.5) +
labs(x="Number of Loci (thousands)") +
scale_y_continuous(limits=c(-0.02, 1.02)) +
theme(axis.text.x = element_text(angle=35, hjust=1, vjust=0.95, size=19),
axis.text.y = element_text(size=19),
axis.title.x=element_text(size=27, margin=margin(15,10,0,0)),
axis.title.y=element_text(size=27, margin=margin(15,10,0,0)),
legend.position="none")
## PPV:
ggplot(data=dat, aes(x=n.loci, y=PPV, group=assoc.test, colour=assoc.test)) +
geom_line(size=1.15) +
geom_point(size = 3.5) +
labs(x="Number of Loci (thousands)") +
scale_y_continuous(limits=c(-0.02, 1.02)) +
theme(axis.text.x = element_text(angle=35, hjust=1, vjust=0.95, size=19),
axis.text.y = element_text(size=19),
axis.title.x=element_text(size=27, margin=margin(15,10,0,0)),
axis.title.y=element_text(size=27, margin=margin(15,10,0,0)),
legend.position="none")
## F1.SCORE:
ggplot(data=dat, aes(x=n.loci, y=F1.score, group=assoc.test, colour=assoc.test)) +
geom_line(size=1.15) +
geom_point(size = 3.5) +
labs(x="Number of Loci (thousands)") +
scale_y_continuous(limits=c(-0.02, 1.02)) +
theme(axis.text.x = element_text(angle=35, hjust=1, vjust=0.95, size=19),
axis.text.y = element_text(size=19),
axis.title.x=element_text(size=27, margin=margin(15,10,0,0)),
axis.title.y=element_text(size=27, margin=margin(15,10,0,0)),
legend.position="none")
levs <- c("50-70", "71-90", "91-110", "111-130", "131-150", "151-170", "171-190", "191-200")
summary(df$n.ind)
n.inds
n.inds <- rep(NA, nrow(df))
n.inds[which(df$n.ind %in% nl[nl > 49 & nl <= 70])] <- levs[1]
n.inds[which(df$n.ind %in% nl[nl > 70 & nl <= 90])] <- levs[2]
n.inds[which(df$n.ind %in% nl[nl > 90 & nl <= 110])] <- levs[3]
n.inds[which(df$n.ind %in% nl[nl > 110 & nl <= 130])] <- levs[4]
n.inds[which(df$n.ind %in% nl[nl > 130 & nl <= 150])] <- levs[5]
n.inds[which(df$n.ind %in% nl[nl > 150 & nl <= 170])] <- levs[6]
n.inds[which(df$n.ind %in% nl[nl > 170 & nl <= 190])] <- levs[7]
n.inds[which(df$n.ind %in% nl[nl > 190 & nl <= 200])] <- levs[8]
head(df)
df <- data.frame(df[,c(1:3)], n.inds, df[,c(4:ncol(df))])
df2 <- df
ncol(df)
dat <- aggregate(x = df[,c(12,14,15,17)], by = list(df$assoc.test, df$n.inds), FUN = "mean", trim=0.25, na.rm=TRUE) # trim=0.25,
names(dat)[c(1:2)] <- c("assoc.test", "n.inds")
DAT <- dat
levs <- c("50-70", "71-90", "91-110", "111-130", "131-150", "151-170", "171-190", "191-200")
levels(dat$n.inds) <- levs
ggplot(data=dat, aes(x=n.inds, y=FPR, group=assoc.test, colour=assoc.test)) +
geom_line(size=1.15) +
geom_point(size = 3.5) +
labs(x="Number of Individuals") +
scale_y_continuous(limits=c(-0.002, 0.152)) +
theme(axis.text.x = element_text(angle=35, hjust=1, vjust=0.95, size=19),
axis.text.y = element_text(size=19),
axis.title.x=element_text(size=27, margin=margin(15,10,0,0)),
axis.title.y=element_text(size=27, margin=margin(15,10,0,0)),
legend.position="none")
dat
n.inds
nl <- df$n.ind
n.inds[which(df$n.ind %in% nl[nl > 49 & nl <= 70])] <- levs[1]
n.inds[which(df$n.ind %in% nl[nl > 70 & nl <= 90])] <- levs[2]
n.inds[which(df$n.ind %in% nl[nl > 90 & nl <= 110])] <- levs[3]
n.inds[which(df$n.ind %in% nl[nl > 110 & nl <= 130])] <- levs[4]
n.inds[which(df$n.ind %in% nl[nl > 130 & nl <= 150])] <- levs[5]
n.inds[which(df$n.ind %in% nl[nl > 150 & nl <= 170])] <- levs[6]
n.inds[which(df$n.ind %in% nl[nl > 170 & nl <= 190])] <- levs[7]
n.inds[which(df$n.ind %in% nl[nl > 190 & nl <= 200])] <- levs[8]
n.inds
table(n.infd)
table(n.inds)
df <- data.frame(df[,c(1:3)], n.inds, df[,c(4:ncol(df))])
df2 <- df
head(df)
df <- data.frame(df[,c(1:4, 6:ncol(df))])
head(df)
dat <- aggregate(x = df[,c(12,14,15,17)], by = list(df$assoc.test, df$n.inds), FUN = "mean", trim=0.25, na.rm=TRUE) # trim=0.25,
names(dat)[c(1:2)] <- c("assoc.test", "n.inds")
DAT <- dat
levs <- c("50-70", "71-90", "91-110", "111-130", "131-150", "151-170", "171-190", "191-200")
levels(dat$n.inds) <- levs
##########
## PLOT ##
##########
# Use the original data frame, but put factor() directly in the plot specification
## FPR:
ggplot(data=dat, aes(x=n.inds, y=FPR, group=assoc.test, colour=assoc.test)) +
geom_line(size=1.15) +
geom_point(size = 3.5) +
labs(x="Number of Individuals") +
scale_y_continuous(limits=c(-0.002, 0.152)) +
theme(axis.text.x = element_text(angle=35, hjust=1, vjust=0.95, size=19),
axis.text.y = element_text(size=19),
axis.title.x=element_text(size=27, margin=margin(15,10,0,0)),
axis.title.y=element_text(size=27, margin=margin(15,10,0,0)),
legend.position="none")
ggplot(data=dat, aes(x=n.inds, y=sensitivity, group=assoc.test, colour=assoc.test)) +
geom_line(size=1.15) +
geom_point(size = 3.5) +
labs(x="Number of Individuals") +
scale_y_continuous(limits=c(-0.02, 1.02)) +
theme(axis.text.x = element_text(angle=35, hjust=1, vjust=0.95, size=19),
axis.text.y = element_text(size=19),
axis.title.x=element_text(size=27, margin=margin(15,10,0,0)),
axis.title.y=element_text(size=27, margin=margin(15,10,0,0)),
legend.position="none")
ggplot(data=dat, aes(x=n.inds, y=PPV, group=assoc.test, colour=assoc.test)) +
geom_line(size=1.15) +
geom_point(size = 3.5) +
labs(x="Number of Individuals") +
scale_y_continuous(limits=c(-0.02, 1.02)) +
theme(axis.text.x = element_text(angle=35, hjust=1, vjust=0.95, size=19),
axis.text.y = element_text(size=19),
axis.title.x=element_text(size=27, margin=margin(15,10,0,0)),
axis.title.y=element_text(size=27, margin=margin(15,10,0,0)),
legend.position="none")
ggplot(data=dat, aes(x=n.inds, y=F1.score, group=assoc.test, colour=assoc.test)) +
geom_line(size=1.15) +
geom_point(size = 3.5) +
labs(x="Number of Individuals") +
scale_y_continuous(limits=c(-0.02, 1.02)) +
theme(axis.text.x = element_text(angle=35, hjust=1, vjust=0.95, size=19),
axis.text.y = element_text(size=19),
axis.title.x=element_text(size=27, margin=margin(15,10,0,0)),
axis.title.y=element_text(size=27, margin=margin(15,10,0,0)),
legend.position="none")
table(n.inds)
df1 <- df
dat1 <- dat
levs <- c("50-60", "61-70", "71-80", "81-90", "91-100", "101-110", "111-120", "121-130",
"131-140", "141-150", "151-160", "161-170", "171-180", "181-190", "191-200")
summary(df$n.ind)
nl <- df$n.ind
n.inds[which(df$n.ind %in% nl[nl > 49 & nl <= 60])] <- levs[1]
n.inds[which(df$n.ind %in% nl[nl > 60 & nl <= 70])] <- levs[2]
n.inds[which(df$n.ind %in% nl[nl > 70 & nl <= 80])] <- levs[3]
n.inds[which(df$n.ind %in% nl[nl > 80 & nl <= 90])] <- levs[4]
n.inds[which(df$n.ind %in% nl[nl > 90 & nl <= 100])] <- levs[5]
n.inds[which(df$n.ind %in% nl[nl > 100 & nl <= 110])] <- levs[6]
n.inds[which(df$n.ind %in% nl[nl > 110 & nl <= 120])] <- levs[7]
n.inds[which(df$n.ind %in% nl[nl > 120 & nl <= 130])] <- levs[8]
n.inds[which(df$n.ind %in% nl[nl > 130 & nl <= 140])] <- levs[8]
n.inds[which(df$n.ind %in% nl[nl > 140 & nl <= 150])] <- levs[8]
n.inds[which(df$n.ind %in% nl[nl > 150 & nl <= 160])] <- levs[8]
n.inds[which(df$n.ind %in% nl[nl > 160 & nl <= 170])] <- levs[8]
n.inds[which(df$n.ind %in% nl[nl > 170 & nl <= 180])] <- levs[8]
n.inds[which(df$n.ind %in% nl[nl > 180 & nl <= 190])] <- levs[8]
n.inds[which(df$n.ind %in% nl[nl > 190 & nl <= 200])] <- levs[8]
table(n.inds)
n.inds[which(df$n.ind %in% nl[nl > 49 & nl <= 60])] <- levs[1]
n.inds[which(df$n.ind %in% nl[nl > 60 & nl <= 70])] <- levs[2]
n.inds[which(df$n.ind %in% nl[nl > 70 & nl <= 80])] <- levs[3]
n.inds[which(df$n.ind %in% nl[nl > 80 & nl <= 90])] <- levs[4]
n.inds[which(df$n.ind %in% nl[nl > 90 & nl <= 100])] <- levs[5]
n.inds[which(df$n.ind %in% nl[nl > 100 & nl <= 110])] <- levs[6]
n.inds[which(df$n.ind %in% nl[nl > 110 & nl <= 120])] <- levs[7]
n.inds[which(df$n.ind %in% nl[nl > 120 & nl <= 130])] <- levs[8]
n.inds[which(df$n.ind %in% nl[nl > 130 & nl <= 140])] <- levs[9]
n.inds[which(df$n.ind %in% nl[nl > 140 & nl <= 150])] <- levs[10]
n.inds[which(df$n.ind %in% nl[nl > 150 & nl <= 160])] <- levs[11]
n.inds[which(df$n.ind %in% nl[nl > 160 & nl <= 170])] <- levs[12]
n.inds[which(df$n.ind %in% nl[nl > 170 & nl <= 180])] <- levs[13]
n.inds[which(df$n.ind %in% nl[nl > 180 & nl <= 190])] <- levs[14]
n.inds[which(df$n.ind %in% nl[nl > 190 & nl <= 200])] <- levs[15]
table(n.inds)
df <- data.frame(df[,c(1:3)], n.inds, df[,c(5:ncol(df))]) # replace current n.inds
head(df)
dat <- aggregate(x = df[,c(12,14,15,17)], by = list(df$assoc.test, df$n.inds), FUN = "mean", trim=0.25, na.rm=TRUE) # trim=0.25,
names(dat)[c(1:2)] <- c("assoc.test", "n.inds")
DAT <- dat
levs <- c("50-60", "61-70", "71-80", "81-90", "91-100", "101-110", "111-120", "121-130",
"131-140", "141-150", "151-160", "161-170", "171-180", "181-190", "191-200")
levels(dat$n.inds) <- levs
##########
## PLOT ##
##########
# Use the original data frame, but put factor() directly in the plot specification
## FPR:
ggplot(data=dat, aes(x=n.inds, y=FPR, group=assoc.test, colour=assoc.test)) +
geom_line(size=1.15) +
geom_point(size = 3.5) +
labs(x="Number of Individuals") +
scale_y_continuous(limits=c(-0.002, 0.152)) +
theme(axis.text.x = element_text(angle=35, hjust=1, vjust=0.95, size=19),
axis.text.y = element_text(size=19),
axis.title.x=element_text(size=27, margin=margin(15,10,0,0)),
axis.title.y=element_text(size=27, margin=margin(15,10,0,0)),
legend.position="none")
## SENSITIVITY:
ggplot(data=dat, aes(x=n.inds, y=sensitivity, group=assoc.test, colour=assoc.test)) +
geom_line(size=1.15) +
geom_point(size = 3.5) +
labs(x="Number of Individuals") +
scale_y_continuous(limits=c(-0.02, 1.02)) +
theme(axis.text.x = element_text(angle=35, hjust=1, vjust=0.95, size=19),
axis.text.y = element_text(size=19),
axis.title.x=element_text(size=27, margin=margin(15,10,0,0)),
axis.title.y=element_text(size=27, margin=margin(15,10,0,0)),
legend.position="none")
ggplot(data=dat, aes(x=n.inds, y=PPV, group=assoc.test, colour=assoc.test)) +
geom_line(size=1.15) +
geom_point(size = 3.5) +
labs(x="Number of Individuals") +
scale_y_continuous(limits=c(-0.02, 1.02)) +
theme(axis.text.x = element_text(angle=35, hjust=1, vjust=0.95, size=19),
axis.text.y = element_text(size=19),
axis.title.x=element_text(size=27, margin=margin(15,10,0,0)),
axis.title.y=element_text(size=27, margin=margin(15,10,0,0)),
legend.position="none")
ggplot(data=dat, aes(x=n.inds, y=F1.score, group=assoc.test, colour=assoc.test)) +
geom_line(size=1.15) +
geom_point(size = 3.5) +
labs(x="Number of Individuals") +
scale_y_continuous(limits=c(-0.02, 1.02)) +
theme(axis.text.x = element_text(angle=35, hjust=1, vjust=0.95, size=19),
axis.text.y = element_text(size=19),
axis.title.x=element_text(size=27, margin=margin(15,10,0,0)),
axis.title.y=element_text(size=27, margin=margin(15,10,0,0)),
legend.position="none")
plot(unique(df$nsnps), unique(df$n.ind))
plot(unique(df$n.snps), unique(df$n.ind))
dat
head(df)
df[1:100,1:6]
load("/home/caitiecollins/.cache/.fr-BLZQmI/set3_18_performance.Rdata")
foo <- get(load("/home/caitiecollins/.cache/.fr-BLZQmI/set3_18_performance.Rdata"))
foo
df[df$run==18,]
set.seed(1)
N.IND <- sample(round(seq(50, 200, length.out = 80), 0), 80, replace = FALSE)
set.seed(2)
N.SNPS <- sample(round(seq(10000, 100000, length.out = 80), 0), 80, replace = FALSE)
FILE.N <- c(1:80)
plot(N.IND, N.SNPS)
data(treeWAS.out)
data(snps)
data(treeWAS_example_out)
print(treeWAS_example_out)
print(out)
treeWAS.example.out <- out
library(devtools)
use_data(treeWAS.example.out)
source('~/treeWAS/pkg/R/treeWAS.R')
load("/home/caitiecollins/treeWAS/pkg/data/treeWAS_example_out.rda")
library(treeWAS)
snps <- get(load("/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/treeWAS Method/treeWAS Forum Qs/Conrad/snps_reord.Rdata"))
phen <- get(load("/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/treeWAS Method/treeWAS Forum Qs/Conrad/phen.Rdata"))
tree <- get(load("/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/treeWAS Method/treeWAS Forum Qs/Conrad/tree.Rdata"))
rownames(snps)
names(phen)
identical(rownames(snps), names(phen))
i <- 100
out <- treeWAS(snps, phen, tree, seed=i, n.snps.sim=ncol(snps)*10)
pr <- asr(phen, phen)
pr <- asr(phen, tree)
pr
?plot.phen
plot.phen(tree, phen.nodes=pr)
-log10(0.05)
snps <- get(load("/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/treeWAS Method/treeWAS Forum Qs/Conrad/snps_reord.Rdata"))
phen <- get(load("/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/treeWAS Method/treeWAS Forum Qs/Conrad/phen.Rdata"))
tree <- get(load("/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/treeWAS Method/treeWAS Forum Qs/Conrad/tree.Rdata"))
pca1 <- dudi.pca(snps, scale=FALSE, scannf=TRUE)
pca1 <- dudi.pca(snps, scale=FALSE, scannf=FALSE, nf=100)
set.seed(1)
grp <- find.clusters(snps, n.pca=n.PCs, choose.n.clust=FALSE, max.n.clust=(n.PCs + 1))
grp <- find.clusters(snps, n.pca=100, choose.n.clust=FALSE, max.n.clust=(n.PCs + 1))
n.PCs <- 100
n.PCs <- 100
set.seed(1)
grp <- find.clusters(snps, n.pca=n.PCs, choose.n.clust=FALSE, max.n.clust=(n.PCs + 1))
pop <- grp$grp # gives same result as cutree(clust, k=6)
n.grp <- length(levels(pop))
n.grp
n.PCs <- 50
pca1 <- dudi.pca(snps, scale=FALSE, scannf=FALSE, nf=n.PCs)
set.seed(1)
grp <- find.clusters(snps, n.pca=n.PCs, choose.n.clust=FALSE, max.n.clust=(n.PCs + 1))
pop <- grp$grp # gives same result as cutree(clust, k=6)
n.grp <- length(levels(pop))
n.grp
grp <- find.clusters(snps, choose.n.clust=FALSE, max.n.clust=(n.PCs + 1), pca.select="percVar", perc.pca=60)
pop <- grp$grp # gives same result as cutree(clust, k=6)
n.grp <- length(levels(pop))
n.grp
n.PCs <- 31
pca1 <- dudi.pca(snps, scale=FALSE, scannf=FALSE, nf=n.PCs)
set.seed(1)
grp <- find.clusters(snps, n.pca=n.PCs, choose.n.clust=FALSE, max.n.clust=(n.PCs + 1))
pop <- grp$grp # gives same result as cutree(clust, k=6)
n.grp <- length(levels(pop))
n.grp
n.PCs <- 30
pca1 <- dudi.pca(snps, scale=FALSE, scannf=FALSE, nf=n.PCs)
set.seed(1)
grp <- find.clusters(snps, n.pca=n.PCs, choose.n.clust=FALSE, max.n.clust=(n.PCs + 1))
pop <- grp$grp # gives same result as cutree(clust, k=6)
n.grp <- length(levels(pop))
n.grp
table(pop)
xval.pop <- xvalDapc(snps, pop)
?hclust
install.packages(c("FactoMineR", "factoextra"), dep=T)
library(factoextra)
library(FactoMineR)
HCPC(pca1, nb.clust = 0, min = 3, max = NULL, graph = TRUE)
?PCA
pca2 <- PCA(snps, scale.unit=F, ncp=30)
hgrp <- HCPC(pca2, nb.clust = 0, min = 3, max = NULL, graph = TRUE)
str(hgrp)
hgrp$data.clust$clust
h.grp <- hgrp
h.pop <- h.grp$data.clust$clust
table(h.pop)
h.grp <- HCPC(pca2, nb.clust = 0, min = 3, max = NULL, graph = TRUE)
h.pop <- h.grp$data.clust$clust
table(h.pop)
h.xval.pop <- xvalDapc(snps, h.pop)
xvalDapc
set.args(list(n.pca.max = 300, n.da = NULL, training.set = 0.9,
result = c("groupMean", "overall"), center = TRUE, scale = FALSE,
n.pca = NULL, n.rep = 30, xval.plot = TRUE))
profvis::profvis({h.xval.pop <- xvalDapc(snps, h.pop)})
svd
str(snps)
foo <- La.svd(snps)
La.svd
foo <- La.svd(snps, LINPACK=T)
foo <- svd(snps, LINPACK=T)
str(foo)
foo <- La.svd(snps)
str(foo)
dapc
h.pop <- h.grp$data.clust$clust
h.grp <- HCPC(pca2, nb.clust = 0, min = 3, max = NULL, graph = TRUE)
h.pop <- h.grp$data.clust$clust
table(h.pop)
h.xval.pop <- xvalDapc(snps, h.pop)
lda
?lda
lda
pcaX <- pca2
set.args(list(n.pca=NULL, n.da=NULL,
center=TRUE, scale=FALSE, var.contrib=TRUE, var.loadings=FALSE,
pca.info=TRUE, pca.select=c("nbEig","percVar"), perc.pca=NULL))
dudi <- NULL
grp <- h.pop
x <- snps
grp <- as.factor(grp)
if(length(grp) != nrow(x)) stop("Inconsistent length for grp")
pca.select <- match.arg(pca.select)
if(!is.null(perc.pca) & is.null(n.pca)) pca.select <- "percVar"
if(is.null(perc.pca) & !is.null(n.pca)) pca.select <- "nbEig"
if(!is.null(dudi) && !inherits(dudi, "dudi")) stop("dudi provided, but not of class 'dudi'")
N <- nrow(x)
REDUCEDIM <- is.null(dudi)
if(REDUCEDIM){ # if no dudi provided
## PERFORM PCA ##
maxRank <- min(dim(x))
pcaX <- dudi.pca(x, center = center, scale = scale, scannf = FALSE, nf=maxRank)
} else { # else use the provided dudi
pcaX <- dudi
}
cumVar <- 100 * cumsum(pcaX$eig)/sum(pcaX$eig)
if(!REDUCEDIM){
myCol <- rep(c("black", "lightgrey"), c(ncol(pcaX$li),length(pcaX$eig)))
} else {
myCol <- "black"
}
## select the number of retained PC for PCA
if(is.null(n.pca) & pca.select=="nbEig"){
plot(cumVar, xlab="Number of retained PCs", ylab="Cumulative variance (%)", main="Variance explained by PCA", col=myCol)
cat("Choose the number PCs to retain (>=1): ")
n.pca <- as.integer(readLines(n = 1))
}
plot(cumVar, xlab="Number of retained PCs", ylab="Cumulative variance (%)", main="Variance explained by PCA", col=myCol)
cat("Choose the percentage of variance to retain (0-100): ")
pca.select <- "nbEig"
n.pca
## get n.pca from the % of variance to conserve
if(!is.null(perc.pca)){
n.pca <- min(which(cumVar >= perc.pca))
if(perc.pca > 99.999) n.pca <- length(pcaX$eig)
if(n.pca<1) n.pca <- 1
}
X.rank <- sum(pcaX$eig > 1e-14)
X.rank
n.pca <- min(X.rank, n.pca)
if(n.pca >= N) n.pca <- N-1
if(n.pca > N/3) warning("number of retained PCs of PCA may be too large (> N /3)\n results may be unstable ")
n.pca <- round(n.pca)
U <- pcaX$c1[, 1:n.pca, drop=FALSE] # principal axes
rownames(U) <- colnames(x) # force to restore names
XU <- pcaX$li[, 1:n.pca, drop=FALSE] # principal components
XU.lambda <- sum(pcaX$eig[1:n.pca])/sum(pcaX$eig) # sum of retained eigenvalues
names(U) <- paste("PCA-pa", 1:ncol(U), sep=".")
names(XU) <- paste("PCA-pc", 1:ncol(XU), sep=".")
ldaX <- lda(XU, grp, tol=1e-30) # tol=1e-30 is a kludge, but a safe (?) one to avoid fancy rescaling by lda.default
library(MASS)
ldaX <- lda(XU, grp, tol=1e-30) # tol=1e-30 is a kludge, but a safe (?) one to avoid fancy rescaling by lda.default
lda.dim <- sum(ldaX$svd^2 > 1e-10)
ldaX$svd <- ldaX$svd[1:lda.dim]
ldaX$scaling <- ldaX$scaling[,1:lda.dim,drop=FALSE]
if(is.null(n.da)){
barplot(ldaX$svd^2, xlab="Linear Discriminants", ylab="F-statistic", main="Discriminant analysis eigenvalues", col=heat.colors(length(levels(grp))) )
cat("Choose the number discriminant functions to retain (>=1): ")
n.da <- as.integer(readLines(n = 1))
}
lda.dim
n.da <- round(min(n.da, lda.dim)) # can't be more than K-1 disc. func., or more than n.pca
predX <- predict(ldaX, dimen=n.da)
lda
?round
round
round(10.122, digits=0)
round(10.122, digits=1)
round <- function (x, digits = 1)  .Primitive("round")
round(10.122)
ceiling
rm(round)
round(10.23)
LINPACK <- TRUE
print("LINPACK arg"); print(LINPACK)
rm(LINPACK)
svd <- function (x, nu = min(n, p), nv = min(n, p), LINPACK = TRUE)
{
print("LINPACK arg"); print(LINPACK)
x <- as.matrix(x)
if (any(!is.finite(x)))
stop("infinite or missing values in 'x'")
dx <- dim(x)
n <- dx[1L]
p <- dx[2L]
if (!n || !p)
stop("a dimension is zero")
La.res <- La.svd(x, nu, nv) ##############################################
res <- list(d = La.res$d)
if (nu)
res$u <- La.res$u
if (nv) {
if (is.complex(x))
res$v <- Conj(t(La.res$vt))
else res$v <- t(La.res$vt)
}
res
}
assignInNamespace("svd", svd, "base")
require(MASS)
?lda
?dapc
foo <- dapc(snps, h.pop)
out.100x <- get(load("./Conrad_out.100x.Rdata"))
getwd()
out.100x <- get(load("/home/caitiecollins/Conrad_out.100x.Rdata"))
out <- out.100x
str(out)
length(out)
thresh.term <- out[[1]]
thresh.sim <- out[[2]]
thresh.subsq <- out[[3]]
sig.term <- out[[4]]
sig.sim <- out[[5]]
sig.subsq <- out[[6]]
barplot(sapply(c(1:length(sig.term)), function(e) length(which(!is.na(sig.term[[e]])))), col=transp("blue"), main="n.sig (terminal) \n n.snps.sim = 100x")
barplot(sapply(c(1:length(sig.sim)), function(e) length(which(!is.na(sig.sim[[e]])))), col=transp("blue"), main="n.sig (simultaneous) \n n.snps.sim = 100x")
barplot(sapply(c(1:length(sig.subsq)), function(e) length(which(!is.na(sig.subsq[[e]])))), col=transp("blue"), main="n.sig (subsequent) \n n.snps.sim = 100x")
barplot(as.vector(unlist(thresh.term)), col=transp("red"), main="sig.thresh (terminal) \n n.snps.sim = 100x")
barplot(as.vector(unlist(thresh.sim)), col=transp("red"), main="sig.thresh (simultaneous) \n n.snps.sim = 100x")
barplot(as.vector(unlist(thresh.subsq)), col=transp("red"), main="sig.thresh (subsequent) \n n.snps.sim = 100x")
library(devtools)
install_github("caitiecollins/treeWAS/pkg", build_vignettes = TRUE)
library(treeWAS)
library(devtools)
library("httr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library(Rcurl)
install_github("caitiecollins/treeWAS/pkg", build_vignettes = F)
install_github("caitiecollins/treeWAS/pkg", build_vignettes = F, force=T)
install.packages("RCurl")
library(RCurl)
install_github("caitiecollins/treeWAS/pkg", build_vignettes = F, force=T)
install_github("caitiecollins/treeWAS/pkg", build_vignettes = F, force=T)
