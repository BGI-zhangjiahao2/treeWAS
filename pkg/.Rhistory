Score1[[i]] <- Score1[[i]][which(Score1[[i]] %in% snps.assoc)]
}else{
# Score1[[i]] <- NULL
print(c("Score 1 i =", i))
}
Score1[[i]]
paste(sort(unique(as.vector(unlist(x$SNP.locus)))), i, sep=".")
SA <- list()
Score1 <- Score2 <- Score3 <- treeWAS <-  vector("list", length=80)
###############
## FOR LOOP: ##
###############
for(i in 1:80){
filename <- paste("/media/caitiecollins/Seagate Backup Plus Drive/treeWAS_Sims/set3/coaltree/parsimony/set3_", i, "_performance.Rdata", sep = "")
perf <- get(load(filename))
snps.assoc <- SA[[i]] <- perf$snps.assoc
snps.assoc <- paste(snps.assoc, i, sep=".")
# filename <- paste("/media/caitiecollins/Seagate Backup Plus Drive/treeWAS_Sims/set3/coaltree/parsimony/set3_", i, "_fisher.results.Rdata", sep = "")
# fisher <- get(load(filename))
# Fisher[[i]] <- fisher$fisher.snps.bonf
#
# filename <- paste("/media/caitiecollins/Seagate Backup Plus Drive/treeWAS_Sims/set3/coaltree/parsimony/set3_", i, "_plink.results.Rdata", sep = "")
# plink <- get(load(filename))
# X2[[i]] <- plink[[1]]$plink.assoc.snps.bonf
# GC[[i]] <- plink[[2]]$plink.assoc.gc.snps.bonf
#
# filename <- paste("/media/caitiecollins/Seagate Backup Plus Drive/treeWAS_Sims/set3/coaltree/parsimony/set3_", i, "_pca.Rdata", sep = "")
# pca <- get(load(filename))
# PCA[[i]] <- pca$pca.snps.bonf
#
# filename <- paste("/media/caitiecollins/Seagate Backup Plus Drive/treeWAS_Sims/set3/coaltree/parsimony/set3_", i, "_dapc.Rdata", sep = "")
# dapc <- get(load(filename))
# DAPC[[i]] <- dapc$dapc.snps.bonf
#
# filename <- paste("/media/caitiecollins/Seagate Backup Plus Drive/treeWAS_Sims/set3/coaltree/parsimony/set3_", i, "_cmh.Rdata", sep = "")
# cmh <- get(load(filename))
# CMH[[i]] <- cmh$cmh.snps.bonf
## treeWAS:
filename <- paste("/media/caitiecollins/Seagate Backup Plus Drive/treeWAS_Sims/set3/coaltree/parsimony/set3_", i, "_out.Rdata", sep = "")
# filename <- paste("/media/caitiecollins/Seagate Backup Plus Drive/treeWAS_Sims/set2/coaltree/parsimony/set2_", i, "_out.Rdata", sep = "")
# filename <- paste("/media/caitiecollins/Seagate Backup Plus Drive/treeWAS_Sims/set1/coaltree/parsimony/set1_", i, "_out.Rdata", sep = "")
out <- get(load(filename))
## Score 1:
x <- out$res$terminal$pval.0.01.bonf.count.10.x.n.snps$sig.snps
if(!is.vector(x)){
# Score1[[i]] <- sort(unique(as.vector(unlist(x$SNP.locus))))
Score1[[i]] <- paste(sort(unique(as.vector(unlist(x$SNP.locus)))), i, sep=".")
Score1[[i]] <- Score1[[i]][which(Score1[[i]] %in% snps.assoc)]
}else{
# Score1[[i]] <- NULL
print(c("Score 1 i =", i))
}
## Score 2:
x <- out$res$simultaneous$pval.0.01.bonf.count.10.x.n.snps$sig.snps
if(!is.vector(x)){
# Score2[[i]] <- sort(unique(as.vector(unlist(x$SNP.locus))))
Score2[[i]] <- paste(sort(unique(as.vector(unlist(x$SNP.locus)))), i, sep=".")
Score2[[i]] <- Score2[[i]][which(Score2[[i]] %in% snps.assoc)]
}else{
# Score2[[i]] <- NULL
print(c("Score 2 i =", i))
}
## Score 3:
x <- out$res$subsequent$pval.0.01.bonf.count.10.x.n.snps$sig.snps
if(!is.vector(x)){
# Score3[[i]] <- sort(unique(as.vector(unlist(x$SNP.locus))))
Score3[[i]] <- paste(sort(unique(as.vector(unlist(x$SNP.locus)))), i, sep=".")
Score3[[i]] <- Score3[[i]][which(Score3[[i]] %in% snps.assoc)]
}else{
# Score3[[i]] <- NULL
print(c("Score 3 i =", i))
}
## treeWAS combined:
if(length(c(Score1[[i]], Score2[[i]], Score3[[i]])) > 0){
treeWAS[[i]] <- sort(unique(c(Score1[[i]], Score2[[i]], Score3[[i]])), decreasing=FALSE)
}else{
# treeWAS[[i]] <- NULL
print(c("treeWAS i =", i))
}
} # end for (i) loop
s1 <- as.vector(unlist(Score1))
s2 <- as.vector(unlist(Score2))
s3 <- as.vector(unlist(Score3))
grid.newpage()
draw.triple.venn(area1 = length(s1),
area2 = length(s2),
area3 = length(s3),
n12 = length(intersect(s1, s2)),
n23 = length(intersect(s2, s3)),
n13 = length(intersect(s1, s3)),
n123 = length(intersect(intersect(s1, s2), s3)),
category = c("Score 1", "Score 2", "Score 3"), lty = "blank",
cex=1.2,
cat.cex = 1.5,
fill = c("skyblue", "orange", funky(8)[4]))
235+144+16+8+36+37+64
540/800
s1
SCORE1 <- SCORE2 <- SCORE3 <- TREEWAS <- rep(NA, 800)
SCORE1[1:length(s1)] <- s1
SCORE1 <- SCORE2 <- SCORE3 <- TREEWAS <- rep(NA, 800)
SCORE1[1:length(s1)] <- s1
SCORE2[1:length(s2)] <- s2
SCORE3[1:length(s3)] <- s3
TREEWAS[1:length(TREEWAS)] <- as.vector(unlist(treeWAS))
length(treeWAS)
SCORE1 <- SCORE2 <- SCORE3 <- TREEWAS <- rep(NA, 800)
SCORE1[1:length(s1)] <- s1
SCORE2[1:length(s2)] <- s2
SCORE3[1:length(s3)] <- s3
TREEWAS[1:length(treeWAS)] <- as.vector(unlist(treeWAS))
length(as.vector(unlist(treeWAS)))
treeWAS <- as.vector(unlist(treeWAS))
TREEWAS[1:length(treeWAS)] <- treeWAS
df <- data.frame(SCORE1, SCORE2, SCORE3, TREEWAS)
write.csv(df, file="home/caitiecollins/Thesis/figs/VD_set3.csv")
write.csv(df, file="/home/caitiecollins/Thesis/figs/VD_set3.csv")
grid.newpage()
draw.triple.venn(area1 = length(s1),
area2 = length(s2),
area3 = length(s3),
n12 = length(intersect(s1, s2)),
n23 = length(intersect(s2, s3)),
n13 = length(intersect(s1, s3)),
n123 = length(intersect(intersect(s1, s2), s3)),
category = c("Score 1", "Score 2", "Score 3"), lty = "blank",
cex=1.2,
cat.cex = 1.5,
euler.d = TRUE,
scaled = TRUE,
fill = c("skyblue", "orange", funky(8)[4]))
grid.newpage()
draw.triple.venn(area1 = length(s1),
area2 = length(s2),
area3 = length(s3),
n12 = length(intersect(s1, s2)),
n23 = length(intersect(s2, s3)),
n13 = length(intersect(s1, s3)),
n123 = length(intersect(intersect(s1, s2), s3)),
category = c("Score 1", "Score 2", "Score 3"), lty = "blank",
cex=1.2,
cat.cex = 1.5,
euler.d = TRUE,
scaled = TRUE,
overrideTriple = TRUE,
fill = c("skyblue", "orange", funky(8)[4]))
grid.newpage()
draw.triple.venn(area1 = length(s1),
area2 = length(s2),
area3 = length(s3),
n12 = length(intersect(s1, s2)),
n23 = length(intersect(s2, s3)),
n13 = length(intersect(s1, s3)),
n123 = length(intersect(intersect(s1, s2), s3)),
category = c("Score 1", "Score 2", "Score 3"), lty = "blank",
cex=1.2,
cat.cex = 1.5,
euler.d = TRUE,
scaled = TRUE,
overrideTriple = TRUE,
direct.area = TRUE,
area.vector = c(length(s1),
length(s2),
length(s3),
length(intersect(s1, s2)),
length(intersect(s2, s3)),
length(intersect(s1, s3)),
length(intersect(intersect(s1, s2), s3))),
fill = c("skyblue", "orange", funky(8)[4]))
540/800
length(treeWAS)
235+144+16+8+36+37+64
235+181+16+12+39+41+64
540/588
SA <- list()
Score1 <- Score2 <- Score3 <- treeWAS <-  vector("list", length=80)
###############
## FOR LOOP: ##
###############
for(i in 1:80){
# filename <- paste("/media/caitiecollins/Seagate Backup Plus Drive/treeWAS_Sims/set3/coaltree/parsimony/set3_", i, "_performance.Rdata", sep = "")
filename <- paste("/media/caitiecollins/Seagate Backup Plus Drive/treeWAS_Sims/set2/coaltree/parsimony/set2_", i, "_performance.Rdata", sep = "")
perf <- get(load(filename))
snps.assoc <- SA[[i]] <- perf$snps.assoc
snps.assoc <- paste(snps.assoc, i, sep=".")
# filename <- paste("/media/caitiecollins/Seagate Backup Plus Drive/treeWAS_Sims/set3/coaltree/parsimony/set3_", i, "_fisher.results.Rdata", sep = "")
# fisher <- get(load(filename))
# Fisher[[i]] <- fisher$fisher.snps.bonf
#
# filename <- paste("/media/caitiecollins/Seagate Backup Plus Drive/treeWAS_Sims/set3/coaltree/parsimony/set3_", i, "_plink.results.Rdata", sep = "")
# plink <- get(load(filename))
# X2[[i]] <- plink[[1]]$plink.assoc.snps.bonf
# GC[[i]] <- plink[[2]]$plink.assoc.gc.snps.bonf
#
# filename <- paste("/media/caitiecollins/Seagate Backup Plus Drive/treeWAS_Sims/set3/coaltree/parsimony/set3_", i, "_pca.Rdata", sep = "")
# pca <- get(load(filename))
# PCA[[i]] <- pca$pca.snps.bonf
#
# filename <- paste("/media/caitiecollins/Seagate Backup Plus Drive/treeWAS_Sims/set3/coaltree/parsimony/set3_", i, "_dapc.Rdata", sep = "")
# dapc <- get(load(filename))
# DAPC[[i]] <- dapc$dapc.snps.bonf
#
# filename <- paste("/media/caitiecollins/Seagate Backup Plus Drive/treeWAS_Sims/set3/coaltree/parsimony/set3_", i, "_cmh.Rdata", sep = "")
# cmh <- get(load(filename))
# CMH[[i]] <- cmh$cmh.snps.bonf
## treeWAS:
# filename <- paste("/media/caitiecollins/Seagate Backup Plus Drive/treeWAS_Sims/set3/coaltree/parsimony/set3_", i, "_out.Rdata", sep = "")
filename <- paste("/media/caitiecollins/Seagate Backup Plus Drive/treeWAS_Sims/set2/coaltree/parsimony/set2_", i, "_out.Rdata", sep = "")
# filename <- paste("/media/caitiecollins/Seagate Backup Plus Drive/treeWAS_Sims/set1/coaltree/parsimony/set1_", i, "_out.Rdata", sep = "")
out <- get(load(filename))
## Score 1:
x <- out$res$terminal$pval.0.01.bonf.count.10.x.n.snps$sig.snps
if(!is.vector(x)){
# Score1[[i]] <- sort(unique(as.vector(unlist(x$SNP.locus))))
Score1[[i]] <- paste(sort(unique(as.vector(unlist(x$SNP.locus)))), i, sep=".")
Score1[[i]] <- Score1[[i]][which(Score1[[i]] %in% snps.assoc)]
}else{
# Score1[[i]] <- NULL
print(c("Score 1 i =", i))
}
## Score 2:
x <- out$res$simultaneous$pval.0.01.bonf.count.10.x.n.snps$sig.snps
if(!is.vector(x)){
# Score2[[i]] <- sort(unique(as.vector(unlist(x$SNP.locus))))
Score2[[i]] <- paste(sort(unique(as.vector(unlist(x$SNP.locus)))), i, sep=".")
Score2[[i]] <- Score2[[i]][which(Score2[[i]] %in% snps.assoc)]
}else{
# Score2[[i]] <- NULL
print(c("Score 2 i =", i))
}
## Score 3:
x <- out$res$subsequent$pval.0.01.bonf.count.10.x.n.snps$sig.snps
if(!is.vector(x)){
# Score3[[i]] <- sort(unique(as.vector(unlist(x$SNP.locus))))
Score3[[i]] <- paste(sort(unique(as.vector(unlist(x$SNP.locus)))), i, sep=".")
Score3[[i]] <- Score3[[i]][which(Score3[[i]] %in% snps.assoc)]
}else{
# Score3[[i]] <- NULL
print(c("Score 3 i =", i))
}
## treeWAS combined:
if(length(c(Score1[[i]], Score2[[i]], Score3[[i]])) > 0){
treeWAS[[i]] <- sort(unique(c(Score1[[i]], Score2[[i]], Score3[[i]])), decreasing=FALSE)
}else{
# treeWAS[[i]] <- NULL
print(c("treeWAS i =", i))
}
} # end for (i) loop
# ## PLOT VENN DIAGRAM (ellipses):
# require(gplots)
# vd <- venn(list(Score1=Score1[[i]], Score2=Score2[[i]], Score3=Score3[[i]]))
#
# ## add colours?
# require(VennDiagram)
# grid.newpage()
# draw.triple.venn(area1 = length(Score1[[i]]),
#                  area2 = length(Score2[[i]]),
#                  area3 = length(Score3[[i]]),
#                  n12 = length(intersect(Score1[[i]], Score2[[i]])),
#                  n23 = length(intersect(Score2[[i]], Score3[[i]])),
#                  n13 = length(intersect(Score1[[i]], Score3[[i]])),
#                  n123 = length(intersect(intersect(Score1[[i]], Score2[[i]]), Score3[[i]])),
#                  category = c("Score 1", "Score 2", "Score 3"), lty = "blank",
#                  # fill = funky(3))
#                  fill = c("skyblue", "pink1", "mediumorchid"))
## COMBINE ALL REPS?:
# make snps.assoc unique, eg. by adding .i suffix, then combine...
s1 <- as.vector(unlist(Score1))
s2 <- as.vector(unlist(Score2))
s3 <- as.vector(unlist(Score3))
grid.newpage()
draw.triple.venn(area1 = length(s1),
area2 = length(s2),
area3 = length(s3),
n12 = length(intersect(s1, s2)),
n23 = length(intersect(s2, s3)),
n13 = length(intersect(s1, s3)),
n123 = length(intersect(intersect(s1, s2), s3)),
category = c("Score 1", "Score 2", "Score 3"), lty = "blank",
cex=1.2,
cat.cex = 1.5,
fill = c("skyblue", "orange", funky(8)[4]))
## SAVE PLOTS:
SA <- list()
Score1 <- Score2 <- Score3 <- treeWAS <-  vector("list", length=80)
###############
## FOR LOOP: ##
###############
for(i in 1:80){
# filename <- paste("/media/caitiecollins/Seagate Backup Plus Drive/treeWAS_Sims/set3/coaltree/parsimony/set3_", i, "_performance.Rdata", sep = "")
# filename <- paste("/media/caitiecollins/Seagate Backup Plus Drive/treeWAS_Sims/set2/coaltree/parsimony/set2_", i, "_performance.Rdata", sep = "")
filename <- paste("/media/caitiecollins/Seagate Backup Plus Drive/treeWAS_Sims/set1/coaltree/parsimony/set1_", i, "_performance.Rdata", sep = "")
perf <- get(load(filename))
snps.assoc <- SA[[i]] <- perf$snps.assoc
snps.assoc <- paste(snps.assoc, i, sep=".")
# filename <- paste("/media/caitiecollins/Seagate Backup Plus Drive/treeWAS_Sims/set3/coaltree/parsimony/set3_", i, "_fisher.results.Rdata", sep = "")
# fisher <- get(load(filename))
# Fisher[[i]] <- fisher$fisher.snps.bonf
#
# filename <- paste("/media/caitiecollins/Seagate Backup Plus Drive/treeWAS_Sims/set3/coaltree/parsimony/set3_", i, "_plink.results.Rdata", sep = "")
# plink <- get(load(filename))
# X2[[i]] <- plink[[1]]$plink.assoc.snps.bonf
# GC[[i]] <- plink[[2]]$plink.assoc.gc.snps.bonf
#
# filename <- paste("/media/caitiecollins/Seagate Backup Plus Drive/treeWAS_Sims/set3/coaltree/parsimony/set3_", i, "_pca.Rdata", sep = "")
# pca <- get(load(filename))
# PCA[[i]] <- pca$pca.snps.bonf
#
# filename <- paste("/media/caitiecollins/Seagate Backup Plus Drive/treeWAS_Sims/set3/coaltree/parsimony/set3_", i, "_dapc.Rdata", sep = "")
# dapc <- get(load(filename))
# DAPC[[i]] <- dapc$dapc.snps.bonf
#
# filename <- paste("/media/caitiecollins/Seagate Backup Plus Drive/treeWAS_Sims/set3/coaltree/parsimony/set3_", i, "_cmh.Rdata", sep = "")
# cmh <- get(load(filename))
# CMH[[i]] <- cmh$cmh.snps.bonf
## treeWAS:
# filename <- paste("/media/caitiecollins/Seagate Backup Plus Drive/treeWAS_Sims/set3/coaltree/parsimony/set3_", i, "_out.Rdata", sep = "")
# filename <- paste("/media/caitiecollins/Seagate Backup Plus Drive/treeWAS_Sims/set2/coaltree/parsimony/set2_", i, "_out.Rdata", sep = "")
filename <- paste("/media/caitiecollins/Seagate Backup Plus Drive/treeWAS_Sims/set1/coaltree/parsimony/set1_", i, "_out.Rdata", sep = "")
out <- get(load(filename))
## Score 1:
x <- out$res$terminal$pval.0.01.bonf.count.10.x.n.snps$sig.snps
if(!is.vector(x)){
# Score1[[i]] <- sort(unique(as.vector(unlist(x$SNP.locus))))
Score1[[i]] <- paste(sort(unique(as.vector(unlist(x$SNP.locus)))), i, sep=".")
Score1[[i]] <- Score1[[i]][which(Score1[[i]] %in% snps.assoc)]
}else{
# Score1[[i]] <- NULL
print(c("Score 1 i =", i))
}
## Score 2:
x <- out$res$simultaneous$pval.0.01.bonf.count.10.x.n.snps$sig.snps
if(!is.vector(x)){
# Score2[[i]] <- sort(unique(as.vector(unlist(x$SNP.locus))))
Score2[[i]] <- paste(sort(unique(as.vector(unlist(x$SNP.locus)))), i, sep=".")
Score2[[i]] <- Score2[[i]][which(Score2[[i]] %in% snps.assoc)]
}else{
# Score2[[i]] <- NULL
print(c("Score 2 i =", i))
}
## Score 3:
x <- out$res$subsequent$pval.0.01.bonf.count.10.x.n.snps$sig.snps
if(!is.vector(x)){
# Score3[[i]] <- sort(unique(as.vector(unlist(x$SNP.locus))))
Score3[[i]] <- paste(sort(unique(as.vector(unlist(x$SNP.locus)))), i, sep=".")
Score3[[i]] <- Score3[[i]][which(Score3[[i]] %in% snps.assoc)]
}else{
# Score3[[i]] <- NULL
print(c("Score 3 i =", i))
}
## treeWAS combined:
if(length(c(Score1[[i]], Score2[[i]], Score3[[i]])) > 0){
treeWAS[[i]] <- sort(unique(c(Score1[[i]], Score2[[i]], Score3[[i]])), decreasing=FALSE)
}else{
# treeWAS[[i]] <- NULL
print(c("treeWAS i =", i))
}
} # end for (i) loop
# ## PLOT VENN DIAGRAM (ellipses):
# require(gplots)
# vd <- venn(list(Score1=Score1[[i]], Score2=Score2[[i]], Score3=Score3[[i]]))
#
# ## add colours?
# require(VennDiagram)
# grid.newpage()
# draw.triple.venn(area1 = length(Score1[[i]]),
#                  area2 = length(Score2[[i]]),
#                  area3 = length(Score3[[i]]),
#                  n12 = length(intersect(Score1[[i]], Score2[[i]])),
#                  n23 = length(intersect(Score2[[i]], Score3[[i]])),
#                  n13 = length(intersect(Score1[[i]], Score3[[i]])),
#                  n123 = length(intersect(intersect(Score1[[i]], Score2[[i]]), Score3[[i]])),
#                  category = c("Score 1", "Score 2", "Score 3"), lty = "blank",
#                  # fill = funky(3))
#                  fill = c("skyblue", "pink1", "mediumorchid"))
## COMBINE ALL REPS?:
# make snps.assoc unique, eg. by adding .i suffix, then combine...
s1 <- as.vector(unlist(Score1))
s2 <- as.vector(unlist(Score2))
s3 <- as.vector(unlist(Score3))
grid.newpage()
draw.triple.venn(area1 = length(s1),
area2 = length(s2),
area3 = length(s3),
n12 = length(intersect(s1, s2)),
n23 = length(intersect(s2, s3)),
n13 = length(intersect(s1, s3)),
n123 = length(intersect(intersect(s1, s2), s3)),
category = c("Score 1", "Score 2", "Score 3"), lty = "blank",
cex=1.2,
cat.cex = 1.5,
fill = c("skyblue", "orange", funky(8)[4]))
235+181+16+12+39+41+64
235+144+16+8+36+37+64
235/540
length(s2)
681/800
235+144+16+64
459/540
340+45+50
435/445
321+78+222+60+1+7+24
(321+78+222+60)/(321+78+222+60+1+7+24)
64+235+144+16+8+36+37
235+16+8+36
295/540
235+36+37+64
372/540
235+16+8+36+37+64
396/540
235+64+144+16
459/540
181/540
144/540
37+144+8
64+16+36
235
barplot(116, 189, 235)
barplot(c(116, 189, 235))
116/189
189/235
116/540
189/540
144+8+37
189/540
64+16+36
116/540
235/540
(235/540) + (116/540)
(235/540) + (116/540) + 0.35
?try
class(try(memfree(), silent=TRUE)) != "try-error"
class(try(memfree(), silent=TRUE)) != "try-error"
class(try(memfree(), silent=TRUE)) == "try-error"
class(try(memfree(), silent=TRUE))
memfree()
library(treeWAS)
memfree()
class(try(memfree(), silent=TRUE))
mem.lim <- NULL
mem.lim > 1
if(mem.lim > 1) mem.lim <- floor(mem.lim)
data(snps)
data(phen)
data(tree)
data(snps.reconstruction)
## Examine data:
## genetic data
str(snps)
## phenotype
str(phen)
noms <- names(phen)
PHEN <- phen
phen <- sample(seq(1, 10, 0.01), 100)
phen
phen <- as.character(phen)
names(phen) <- noms
PHEN.NEW <- phen
as.factor(phen)
PHEN
as.character(PHEN)
phen <- as.character(PHEN)
names(phen) noms
names(phen) <- noms
phen
as.factor(phen)
?treeWAS
library(devtools)
document()
?treeWAS
document()
?treeWAS
vignette(treeWAS)
document()
vignette(treeWAS)
library(treeWAS)
vignette(treeWAS)
library(treeWAS)
vignette(treeWAS)
data(snps)
str(snps)
data("phen.cont.rank")
data(phen)
data("tree")
str(phen)
?treeWAS
?dapc
library(devtools)
document()
?treeWAS
document()
?treeWAS
vignette("treeWAS")
vignette(package="treeWAS")
vignette(package = "treeWAS")
vignette(treeWAS)
browseVignettes(treeWAS)
browseVignettes("treeWAS")
?vignette
vignette("treeWAS")
vignette("*treeWAS* Vignette")
vignette("treeWAS Vignette")
document()
?treeWAS
document()
?treeWAS
install_github("caitiecollins/treeWAS/pkg", build_vignettes = TRUE)
install.packages("adegenet")
library(treeWAS)
library(adegenet)
install.packages("adegenet", dep=TRUE)
library(adegenet)
