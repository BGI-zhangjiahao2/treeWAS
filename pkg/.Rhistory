## Add axis?
# cex=0.5, font=2, bg=transp(edgeLabCol, 0.3), adj=c(1,1))
if(RTL == FALSE){
tiplabels(text=tree$tip.label, cex=0.55, adj=c(-0.5, 0), col=leafCol, frame="none")
## TEMP
# tiplabels(text=tree$tip.label, cex=0.75, adj=c(-0.42, 0), col=leafCol, frame="none")
}else{
## if RTL == TRUE (i.e., direction="leftwards"):
tiplabels(text=tree$tip.label, cex=0.55, adj=c(1.5,0), col=leafCol, frame="none")
## TEMP
# tiplabels(text=tree$tip.label, cex=0.75, adj=c(1.42,0), col=leafCol, frame="none")
}
is.null(snp.nodes)
if(!is.null(phen.nodes) & !is.null(snp.nodes)) par(mfrow=c(1,1))
phen.plot.colors <- list(edgeLabCol, edgeCol, nodeCol, internalNodeCol, leafCol)
names(phen.plot.colors) <- c("edge.labels", "edges", "all.nodes", "internal.nodes", "tip.labels")
return(phen.plot.colors)
str(phen.plot.col)
plot(1)
p <- plot.phen(tree, phen.nodes=phen.plot.col$all.nodes)
suffixes <- keepLastN(colnames(snps), n = 2)
suffixes <- unique(suffixes)
if(all(suffixes %in% c(".a", ".c", ".g", ".t"))){
## SNPs:
snps <- get.binary.snps(snps)
## ... Optional step (for snps.reconstruction, if present)
## (Example only, if needed for user data)
if(is.matrix(snps.reconstruction)){
snps.reconstruction <- snps.reconstruction[, which(colnames(snps.reconstruction) %in% colnames(snps))]
}
NA.tab <- sapply(c(1:nrow(snps)), function(e) length(which(is.na(snps[e,]))))
ix <- which(NA.tab == ncol(snps))
if(length(ix) > 0){
toRemove <- rownames(snps)[ix]
## Remove individuals from all elements...
snps <- snps[-which(rownames(snps) %in% toRemove), ]
phen <- phen[-which(names(phen) %in% toRemove)]
## ... Including optional elements (if present):
## drop tips from tree:
tree <- drop.tip(tree, tip = toRemove)
## drop rows from snps.rec:
## (Example only, if needed for user data)
if(is.matrix(snps.reconstruction)){
nodes <- sort(unique(as.vector(unlist(tree$edge))), decreasing=FALSE)
nodes <- nodes[(nrow(snps)+1):length(nodes)]
toKeep <- which(rownames(snps.reconstruction) %in% rownames(snps))
toKeep <- c(toKeep, nodes)
snps.reconstruction <- snps.reconstruction[toKeep, ]
}
}
out <- treeWAS(snps = snps,
phen = phen,
tree = tree,
n.subs = NULL,
n.snps.sim = ncol(snps)*10,
chunk.size = ncol(snps),
test = c("terminal", "simultaneous", "subsequent"),
snps.reconstruction = "parsimony",
snps.sim.reconstruction = "parsimony",
phen.reconstruction = "parsimony",
na.rm = TRUE,
p.value = 0.01,
p.value.correct = "bonf",
p.value.by = "count",
dist.dna.model = "JC69",
plot.tree = FALSE,
plot.manhattan = TRUE,
plot.null.dist = TRUE,
plot.dist = FALSE,
snps.assoc = NULL,
filename.plot = NULL,
seed = 1)
}
print(out)
library(devtools)
document()
library(devtools)
devtools::install_github("hadley/pkgdown")
?quantile
a <- c(1, 1, 2, 2, 3, 3, 3)
is.vector(a)
fctor(a)
factor(a)
b <- factor(a)
is.vetor(b)
is.vector(b)
is.factor(b)
library(treeWAS)
data(snps)
data(phen)
data(tree)
data(snps.reconstruction)
## Examine data:
## genetic data
str(snps)
## phenotype
str(phen)
table(phen)
## tree
str(tree)
## genetic data reconstruction:
str(snps.reconstruction)
data(phen.plot.col)
## Plot tree showing phenotype:
p <- plot.phen(tree, phen.nodes=phen.plot.col$all.nodes)
foo <- rnorm(20, 7, 3)
hist(foo, xlim=c(0,max(foo)+1), breaks=20, col=transp("blue"))
toto <- rnorm(30, 6, 2)
hist(foo, xlim=c(0,max(foo)+1), breaks=20, col=transp("blue"))
hist(toto, xlim=c(0,max(foo)+1), breaks=20, col=transp("blue"))
bar <- c(foo,toto)
hist(bar, xlim=c(0,10), breaks=20, col=transp("blue"))
bar1 <- c(foo,toto)
hist(bar1, xlim=c(0,10), breaks=20, col=transp("blue"))
foo <- rnorm(20, 8, 1)
hist(foo, xlim=c(0,max(foo)+1), breaks=20, col=transp("blue"))
toto <- rnorm(30, 6, 1)
hist(toto, xlim=c(0,max(foo)+1), breaks=20, col=transp("blue"))
bar2 <- c(foo,toto, bar1)
hist(bar2, xlim=c(0,10), breaks=20, col=transp("blue"))
bar3 <- bar2-2
bar3 <- c(foo,toto, bar1)
hist(bar3, xlim=c(0,10), breaks=20, col=transp("blue"))
bar3 <- bar2-2
hist(bar3, xlim=c(0,10), breaks=20, col=transp("blue"))
bar3 <- (bar2-2)/2
hist(bar3, xlim=c(0,10), breaks=20, col=transp("blue"))
bar3 <- (bar2-2)/2.2
hist(bar3, xlim=c(0,10), breaks=20, col=transp("blue"))
bar3 <- (bar2-2)/2
hist(bar3, xlim=c(0,10), breaks=20, col=transp("blue"))
foo <- rnorm(20, 7, 4)
hist(foo, xlim=c(0,max(foo)+1), breaks=20, col=transp("blue"))
foo <- rnorm(20, 7, 3)
hist(foo, xlim=c(0,max(foo)+1), breaks=20, col=transp("blue"))
foo <- rnorm(10, 7, 3)
hist(foo, xlim=c(0,max(foo)+1), breaks=20, col=transp("blue"))
foo <- rnorm(10, 7, 3)
hist(foo, xlim=c(0,max(foo)+1), breaks=20, col=transp("blue"))
foo <- rnorm(10, 7, 3)
hist(foo, xlim=c(0,max(foo)+1), breaks=20, col=transp("blue"))
foo <- rnorm(10, 7, 3)
hist(foo, xlim=c(0,max(foo)+1), breaks=20, col=transp("blue"))
foo <- rnorm(10, 7, 3)
hist(foo, xlim=c(0,max(foo)+1), breaks=20, col=transp("blue"))
foo <- rnorm(10, 7, 2)
hist(foo, xlim=c(0,max(foo)+1), breaks=20, col=transp("blue"))
toto <- rnorm(20, 5, 4)
hist(toto, xlim=c(0,max(foo)+1), breaks=20, col=transp("blue"))
toto <- rnorm(20, 5, 3)
hist(toto, xlim=c(0,max(foo)+1), breaks=20, col=transp("blue"))
t1 <- toto
toto <- rnorm(20, 5, 3)
hist(toto, xlim=c(0,max(foo)+1), breaks=20, col=transp("blue"))
t2 <- toto
toto <- rnorm(20, 5, 3)
hist(toto, xlim=c(0,max(foo)+1), breaks=20, col=transp("blue"))
toto <- toto-1
toto <- toto[toto > 0]
hist(toto, xlim=c(0,max(foo)+1), breaks=20, col=transp("blue"))
toto <- toto[toto > 0 & toto < 9]
hist(toto, xlim=c(0,max(foo)+1), breaks=20, col=transp("blue"))
bar4 <- c(foo,toto, bar3)
hist(bar4, xlim=c(0,10), breaks=20, col=transp("blue"))
which.max(toto)
toMod <- which.max(toto)
toto[toMod] <- toto[toMod]+1
toMod <- which.max(bar4)
toMod
bar4[toMod]
bar4[toMod] <- bar4[toMod]+0.7
PHEN <- bar4
toMod <- which(bar4 > 4.25 & bar4 < 6)
toMod
table(bar4[toMod])
bar4[toMod]
toMod <- toMod[c(1,2,7)]
bar4 <- bar4[-toMod]
hist(bar4, xlim=c(0,10), breaks=20, col=transp("blue"))
toMod <- which(bar4 > 4.25 & bar4 < 6)
bar4[toMod]
toMod <- toMod[4]
bar4 <- bar4[-toMod]
hist(bar4, xlim=c(0,10), breaks=20, col=transp("blue"))
length(bar4)
PHEN <- bar4
toMod <- which(bar4 > 1 & bar4 < 4)
toRep <- sample(toMod, 28)
bar4 <- c(bar4, bar4[toMod], bar4[toMod])
phen <- bar4
hist(phen, xlim=c(0,10), breaks=20, col=transp("blue"))
bar4 <- PHEN
toMod <- which(bar4 > 1 & bar4 < 4)
toRep <- sample(toMod, 9)
bar4 <- c(bar4, bar4[toMod], bar4[toMod])
phen <- bar4
hist(phen, xlim=c(0,10), breaks=20, col=transp("blue"))
hist(PHEN, xlim=c(0,10), breaks=20, col=transp("blue"))
bar4 <- PHEN
toMod <- which(bar4 > 1 & bar4 < 4)
toRep <- sample(toMod, 3)
bar4 <- c(bar4, bar4[toMod], bar4[toMod])
phen <- bar4
hist(phen, xlim=c(0,10), breaks=20, col=transp("blue"))
bar4 <- PHEN
toMod <- which(bar4 > 1 & bar4 < 4)
toRep <- sample(toMod, 7)
bar4 <- c(bar4, bar4[toMod]) # , bar4[toMod]
phen <- bar4
hist(phen, xlim=c(0,10), breaks=20, col=transp("blue"))
toMod <- which(bar4 > 1 & bar4 < 4)
toRep <- sample(toMod, 7)
toMod <- which(bar4 > 0 & bar4 < 5)
toRep <- sample(toMod, 7)
bar4 <- c(bar4, bar4[toMod]) # , bar4[toMod]
phen <- bar4
hist(phen, xlim=c(0,10), breaks=20, col=transp("blue"))
toMod <- c(which(bar4 > 0 & bar4 < 1), which(bar4 > 3.5 & bar4 < 9))
toRep <- sample(toMod, 7)
bar4 <- c(bar4, bar4[toMod]) # , bar4[toMod]
phen <- bar4
hist(phen, xlim=c(0,10), breaks=20, col=transp("blue"))
toMod <- which(bar4 > 4.5 & bar4 < 7)
toMod
bar4[toMod]
toRep <- sample(toMod, 4)
bar4 <- c(bar4, bar4[toMod]) # , bar4[toMod]
phen <- bar4
hist(phen, xlim=c(0,10), breaks=20, col=transp("blue"))
toMod <- which(bar4 > 4.5 & bar4 < 7)
PHEN <- bar4
toRep <- sample(toMod, 2)
bar4 <- c(bar4, bar4[toMod]) # , bar4[toMod]
phen <- bar4
hist(phen, xlim=c(0,10), breaks=20, col=transp("blue"))
toMod <- which(bar4 > 6 & bar4 < 7)
toMod
toMod <- which(bar4 > 6 & bar4 < 6.5)
bar4[toMod]
toRep <- sample(toMod, 4)
bar4 <- bar4[-toMod]
phen <- bar4
hist(phen, xlim=c(0,10), breaks=20, col=transp("blue"))
hist(PHEN, xlim=c(0,10), breaks=20, col=transp("blue"))
bar4 <- PHEN
toMod <- which(bar4 > 4.5 & bar4 < 7)
toRep <- sample(toMod, 2)
bar4 <- c(bar4, bar4[toMod]) # , bar4[toMod]
phen <- bar4
hist(phen, xlim=c(0,10), breaks=20, col=transp("blue"))
bar4 <- PHEN
toMod <- which(bar4 > 4.5 & bar4 < 7)
toRep <- sample(toMod, 2)
bar4 <- c(bar4, bar4[toMod]) # , bar4[toMod]
phen <- bar4
hist(phen, xlim=c(0,10), breaks=20, col=transp("blue"))
bar4 <- PHEN
toMod <- which(bar4 > 4.5 & bar4 < 7)
toMod
toRep <- sample(toMod, 2)
bar4 <- c(bar4, bar4[toRep]) # , bar4[toMod]
phen <- bar4
hist(phen, xlim=c(0,10), breaks=20, col=transp("blue"))
toMod <- which(bar4 > 4.5 & bar4 < 7)
toRep <- sample(toMod, 2)
bar4 <- c(bar4, bar4[toRep]) # , bar4[toMod]
phen <- bar4
hist(phen, xlim=c(0,10), breaks=20, col=transp("blue"))
toMod <- which(bar4 > 4.5 & bar4 < 7)
toRep <- sample(toMod, 2)
bar4 <- c(bar4, bar4[toRep]) # , bar4[toMod]
phen <- bar4
hist(phen, xlim=c(0,10), breaks=20, col=transp("blue"))
PHEN.ORI <- PHEN
PHEN <- bar4
phen <- bar4
phen.rank <- rank(phen, ties.method = "average")
hist(phen.rank, breaks=30, col=transp("blue"))
hist(phen, xlim=c(0,10), breaks=20, col=transp("blue"))
toMod <- which(bar4 > 0 & bar4 < 7)
toRep <- sample(toMod, 11)
bar4 <- c(bar4, bar4[toRep]) # , bar4[toMod]
phen <- bar4
hist(phen, xlim=c(0,10), breaks=20, col=transp("blue"))
phen.rank <- rank(phen, ties.method = "average")
hist(phen.rank, breaks=30, col=transp("blue"))
toMod <- which(bar4 > 1 & bar4 < 3)
toRep <- sample(toMod, 4)
toRep
bar4 <- c(bar4, bar4[toRep]) # , bar4[toMod]
phen <- bar4
hist(phen, xlim=c(0,10), breaks=20, col=transp("blue"))
phen.rank <- rank(phen, ties.method = "average")
hist(phen.rank, breaks=30, col=transp("blue"))
length(phen)
hist(phen, xlim=c(0,10), breaks=20, col=transp("blue"))
phen.rank <- rank(phen, ties.method = "average")
hist(phen.rank, breaks=30, col=transp("blue"))
getwd()
save(phen, file="./vignettes/phen_cont_skewed.Rdata")
save(phen.rank, file="./vignettes/phen_cont_skewed_rank.Rdata")
phen.cont <- phen
phen.cont.rank <- phen.rank
use_data(phen.cont)
use_data(phen.cont.rank)
data(phen.cont)
phen.cont <- NULL
phen.cont
data(phen.cont)
phen.cont
str(snps)
snps <- get.binary.snps(snps)
str(snps)
NA.tab <- sapply(c(1:ncol(snps)), function(e) length(which(is.na(snps[,e]))))
toRemove <- which(NA.tab > floor(nrow(snps))) # Remove columns w > 50% of NAs
toRemove
str(NA.tab)
foo <- c("a", "b", "c")
bar <- cbind(foo, foo, foo)
str(bar)
is.matrix(bar)
is.character(bar)
class(bar)
library(rmarkdown)
?render
render("./vignettes/treeWAS_vignette.Rmd", output_format = "md_document")
load("/home/caitiecollins/ClonalFrameML/src/pubMLST/Gono/CRO/Grad2014_phen_ori_CRO.Rdata")
hist(phen, breaks=20)
hist(phen, breaks=20, col=transp("blue"))
phen.rank <- rank(phen, ties.method = "average")
hist(phen.rank, breaks=20, col=transp("blue"))
browseVignettes("treeWAS")
library(treeWAS)
browseVignettes("treeWAS")
library(devtools)
document()
install_github("caitiecollins/treeWAS/pkg", build_vignettes = TRUE)
install.packages("Hmisc")
install.packages("rms")
install.packages("SparseM")
install.packages("SparseM")
install.packages("Hmisc")
library(devtools)
install_github("caitiecollins/treeWAS/pkg", build_vignettes = TRUE)
install.packages("phangorn")
library("phangorn", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
install_github("caitiecollins/treeWAS/pkg", build_vignettes = TRUE)
detach("package:phangorn", unload=TRUE)
detach("package:ape", unload=TRUE)
install_github("caitiecollins/treeWAS/pkg", build_vignettes = TRUE)
library(devtools)
plot(1)
install.packages("devtools")
library(treeWAS)
data(snps)
data(phen)
data(tree)
data(snps.reconstruction)
suffixes <- keepLastN(colnames(snps), n = 2)
suffixes <- unique(suffixes)
if(all(suffixes %in% c(".a", ".c", ".g", ".t"))){
## SNPs:
snps <- get.binary.snps(snps)
## ... Optional step (for snps.reconstruction, if present)
## (Example only, if needed for user data)
if(is.matrix(snps.reconstruction)){
snps.reconstruction <- snps.reconstruction[, which(colnames(snps.reconstruction) %in% colnames(snps))]
}
}
prefix <- "/home/caitiecollins/ClonalFrameML/src/pubMLST/TEMP"
profvis::profvis({out <- treeWAS(snps = snps,
phen = phen,
tree =  tree,
n.snps.sim = 10*ncol(snps),
snps.reconstruction = "parsimony",
snps.sim.reconstruction = "parsimony",
phen.reconstruction = "parsimony",
plot.tree = TRUE,
filename.plot = sprintf('%s.treeWAS_eg_plots.pdf', prefix),
seed = 1,
na.rm = TRUE)})
source('~/treeWAS/pkg/R/snp.sim.R')
source('~/treeWAS/pkg/R/reconstruct.R')
length(unique(as.vector(unlist(snps[!is.na(snps)])))) != 2
length(unique(as.vector(unlist(snps[!is.na(snps)]))))
NA.tab <- sapply(c(1:ncol(snps)), function(e) length(which(is.na(snps[,e]))))
toRemove <- colnames(snps)[which(NA.tab == nrow(snps))]
length(toRemove)
toRemove <- colnames(snps)[which(NA.tab > floor(nrow(snps)*(3/4)))] # Remove columns w > 75% of NAs
length(toRemove)
foobar <- snps
rm(foobar)
gc()
41/64.8
36/64.8
dir(system.file("libs", package = "treeWAS"))
?system.file
.libPaths()
dir(system.file(.libPaths(), package = "treeWAS"))
dir(system.file("libs", package = "phangorn"))
?useDynLib
R.version.string
library(treeWAS)
data(snps)
data(phen)
data(tree)
data(snps.reconstruction)
out <- treeWAS(snps = snps,
phen = phen,
tree = tree,
n.subs = NULL,
n.snps.sim = ncol(snps)*10,
chunk.size = ncol(snps),
test = c("terminal", "simultaneous", "subsequent"),
snps.reconstruction = "parsimony",
snps.sim.reconstruction = "parsimony",
phen.reconstruction = "parsimony",
na.rm = TRUE,
p.value = 0.01,
p.value.correct = "bonf",
p.value.by = "count",
dist.dna.model = "JC69",
plot.tree = FALSE,
plot.manhattan = TRUE,
plot.null.dist = TRUE,
plot.dist = FALSE,
snps.assoc = NULL,
filename.plot = NULL,
seed = 1)
suffixes <- keepLastN(colnames(snps), n = 2)
suffixes <- unique(suffixes)
if(all(suffixes %in% c(".a", ".c", ".g", ".t"))){
## SNPs:
snps <- get.binary.snps(snps)
## ... Optional step (for snps.reconstruction, if present)
## (Example only, if needed for user data)
if(is.matrix(snps.reconstruction)){
snps.reconstruction <- snps.reconstruction[, which(colnames(snps.reconstruction) %in% colnames(snps))]
}
}
out <- treeWAS(snps = snps,
phen = phen,
tree = tree,
n.subs = NULL,
n.snps.sim = ncol(snps)*10,
chunk.size = ncol(snps),
test = c("terminal", "simultaneous", "subsequent"),
snps.reconstruction = "parsimony",
snps.sim.reconstruction = "parsimony",
phen.reconstruction = "parsimony",
na.rm = TRUE,
p.value = 0.01,
p.value.correct = "bonf",
p.value.by = "count",
dist.dna.model = "JC69",
plot.tree = FALSE,
plot.manhattan = TRUE,
plot.null.dist = TRUE,
plot.dist = FALSE,
snps.assoc = NULL,
filename.plot = NULL,
seed = 1)
foo <- get.fitch.n.mts(snps, tree)
str(foo)
source('~/treeWAS/pkg/R/snp.sim.R')
source('~/treeWAS/pkg/R/snp.sim.R')
?bionjs
?pml
?plot.phylo
?as.phylo
?is.phylo
?phylo
?reorder.phylo
?axisPhylo
?nj
?bionj
?upgma
?hclust
?as.phylo
?rexp
?dist.dna
?heat.colors
i <- installed.packages()
i[ i[,"Priority"] %in% c("base","recommended"), c("Package", "Priority")]
?tiplabels
?as.DNAbin
?midpoint
library(devtools)
document()
source('~/treeWAS/pkg/R/treeWAS.R')
source('~/treeWAS/pkg/R/snp.sim.R')
library(devtools)
document()
document()
install.packages("phangorn")
source('~/treeWAS/pkg/R/treeWAS.R')
source('~/treeWAS/pkg/R/snp.sim.R')
?ace
??ace
??pace
source('~/treeWAS/pkg/R/snp.sim.R')
document()
library(devtools)
document()
library(adegenet)
library(treeWAS)
detach("package:ade4", unload=TRUE)
detach("package:adegenet", unload=TRUE)
detach("package:ape", unload=TRUE)
detach("package:treeWAS", unload=TRUE)
library(ape)
library(adegenet)
