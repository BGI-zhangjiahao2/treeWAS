rec <- rec.ml <- ancestral.pml(fit, type = "ml", return = "prob")
## If NAs are present, replace column 1 0s with NA values
## whenever column 3 (NA) has a 1 in it:
if(any(is.na(snps.levels))){
na.col <- which(is.na(snps.levels))
for(i in 1:length(rec)){
foo <- rec[[i]]
toReplace <- which(foo[,na.col] == 1)
if(length(toReplace) > 0){
foo[toReplace,1] <- NA
foo[toReplace,2] <- NA
}
rec[[i]] <- foo
} # end for loop
}
## Bind list into matrix:
snps.rec <- do.call(cbind, rec[ord])
snps.rec <- t(snps.rec[, seq(2, ncol(snps.rec), length(snps.levels))])
str(snps.rec)
str(rec)
names(rec)
tree$node.label
SNPS.ORI <- snps
SNPS.RECON.ORI <- snps.rec
tree$tip.label
rownames(snps)
tree$node.label
source('~/treeWAS/pkg/R/reconstruct.R')
nrow(snps.reconstruction)
max(tree$edge[,2])
phen.reconstruction
is.vector(phen.reconstruction)
phen.reconstruction <- asr(phen, tree)
phen
phen <- as.numeric(as.character(phen))
phen <- as.numeric(phen)
phen <- PHEN.ORI
phen <- as.numeric(phen)
names(phen) <- names(PHEN.ORI)
phen
phen.reconstruction <- asr(phen, tree)
phen.reconstruction
identical(names(phen.reconstruction)[ixi], tree$node.label)
length(phen.reconstruction) == max(tree$edge[,2])
ord <- match(names(phen.reconstruction)[ixi], tree$node.label)
length(which(is.na(ord)))
phen.reconstruction[ixi]
phen.rec <- phen.reconstruction
phen.rec
phen.reconstruction[ixi][ord]
ord
ord <- rev(ord)
phen.reconstruction[ixi][ord]
phen.reconstruction[ixi] <- phen.reconstruction[ixi][ord]
phen.reconstruction
names(phen.reconstruction)[ixi]
names(phen.reconstruction[ixi])
names(phen.reconstruction)[ixi] <- names(phen.reconstruction[ixi])[ord]
phen.reconstruction
rownames(snps.reconstruction)[ixi]
tree$node.label
identical(rownames(snps.reconstruction)[ixi], tree$node.label)
str(snps.reconstruction[ixi,][ord])
ixi
ixi[ord]
str( snps.reconstruction[ixi[ord],])
rownames(snps.reconstruction)
snps.reconstruction[ixi,] <- snps.reconstruction[ixi[ord],]
rownames(snps.reconstruction)
ord
rownames(snps.reconstruction)[ixi][ord]
rownames(snps.reconstruction)[ixi] <- rownames(snps.reconstruction)[ixi][ord]
rownames(snps.reconstruction)
rownames(snps.reconstruction)[ixt]
identical(rownames(snps.reconstruction)[ixt], tree$tip.label)
rownames(snps.reconstruction)[ixi]
tree$node.label
max(tree$edge[,2])
(length(phen)+(tree$Nnode)
)
(nrow(snps)+tree$Nnode)
## Load example data:
data(snps)
data(phen)
data(tree)
data(snps.reconstruction)
## Examine data:
## genetic data
str(snps)
## phenotype
str(phen)
table(phen)
## tree
str(tree)
## genetic data reconstruction:
str(snps.reconstruction)
tree$tip.label
source('~/treeWAS/pkg/R/treeWAS.R')
data(phen.reconstruction)
data(phen.rec)
suffixes <- keepLastN(colnames(snps), n = 2)
suffixes <- unique(suffixes)
if(all(suffixes %in% c(".a", ".c", ".g", ".t"))){
## SNPs:
snps <- get.binary.snps(snps)
## ... Optional step (for snps.reconstruction, if present)
## (Example only, if needed for user data)
if(is.matrix(snps.reconstruction)){
snps.reconstruction <- snps.reconstruction[, which(colnames(snps.reconstruction) %in% colnames(snps))]
}
}
out <- treeWAS(snps = snps,
phen = phen,
tree = tree,
n.subs = NULL,
n.snps.sim = ncol(snps)*10,
chunk.size = ncol(snps),
test = c("terminal", "simultaneous", "subsequent"),
snps.reconstruction = "parsimony",
snps.sim.reconstruction = "parsimony",
phen.reconstruction = "parsimony",
phen.type = NULL,
na.rm = TRUE,
p.value = 0.01,
p.value.correct = "bonf",
p.value.by = "count",
dist.dna.model = "JC69",
plot.tree = TRUE,
plot.manhattan = TRUE,
plot.null.dist = TRUE,
plot.dist = FALSE,
snps.assoc = NULL,
filename.plot = NULL,
seed = 1)
library(devtools)
document()
## Load example data:
data(snps)
data(phen)
data(tree)
data(snps.reconstruction)
## Examine data:
## genetic data
str(snps)
library(treeWAS)
## Load example data:
data(snps)
data(phen)
data(tree)
data(snps.reconstruction)
## Examine data:
## genetic data
str(snps)
## phenotype
str(phen)
table(phen)
## tree
str(tree)
## genetic data reconstruction:
str(snps.reconstruction)
suffixes <- keepLastN(colnames(snps), n = 2)
suffixes <- unique(suffixes)
if(all(suffixes %in% c(".a", ".c", ".g", ".t"))){
## SNPs:
snps <- get.binary.snps(snps)
## ... Optional step (for snps.reconstruction, if present)
## (Example only, if needed for user data)
if(is.matrix(snps.reconstruction)){
snps.reconstruction <- snps.reconstruction[, which(colnames(snps.reconstruction) %in% colnames(snps))]
}
}
out <- treeWAS(snps = snps,
phen = phen,
tree = tree,
n.subs = NULL,
n.snps.sim = ncol(snps)*10,
chunk.size = ncol(snps),
test = c("terminal", "simultaneous", "subsequent"),
snps.reconstruction = snps.reconstruction,
snps.sim.reconstruction = "parsimony",
phen.reconstruction = "parsimony",
phen.type = NULL,
na.rm = TRUE,
p.value = 0.01,
p.value.correct = "bonf",
p.value.by = "count",
dist.dna.model = "JC69",
plot.tree = TRUE,
plot.manhattan = TRUE,
plot.null.dist = TRUE,
plot.dist = FALSE,
snps.assoc = NULL,
filename.plot = NULL,
seed = 1)
snps.rec <- asr(snps, tree)
tree$node.label
tree$node.label <- paste("NODE_", c(length(tree$tip.label)+1:max(tree$edge[,2])), sep="")
tree$node.label
max(tree$edge[,2])
paste("NODE_", c(length(tree$tip.label)+1:max(tree$edge[,2])), sep="")
paste("NODE_", c((length(tree$tip.label)+1):max(tree$edge[,2])), sep="")
tree$node.label <- paste("NODE_", c((length(tree$tip.label)+1):max(tree$edge[,2])), sep="")
tree$node.label
?use_data
library(devtools)
?use_data
use_data(tree, overwrite=TRUE)
snps.rec <- asr(snps, tree)
str(snps.rec)
str(snps)
tree$tip.label
library(phangorn)
rownames(snps)
tree$tip.label
snps.rec <- get.ancestral.pars(var=snps, tree=tree, unique.cols = TRUE)
str(snps.rec)
str(snps)
SNPS.INI <- snps
snps <- snps[,1:100]
snps <- SNPS.INI[,1:222]
var <- snps
snps.rec <- snps.ML <- list()
for(i in 1:ncol(snps)){
## get variable i
var <- snps[,i]
## get terminal values
var.terminal <- var
## With MISSING DATA in any columns: ##
## Continuous ML rec: ##
## get internal values (when (any) var contains NAs):
var <- var[!is.na(var)]
snps.ML[[i]] <- anc.ML(tree, var) ## require(phytools)
var.internal <- snps.ML[[i]]$ace
## get reconstruction from terminal & internal values
snps.rec[[i]] <- c(var.terminal, var.internal)
} # end for loop
## bind columns of snps.rec together
snps.rec <- do.call("cbind", snps.rec)
colnames(snps.rec) <- colnames(snps)
librry(phytools)
library(phytools)
snps.rec <- snps.ML <- list()
for(i in 1:ncol(snps)){
## get variable i
var <- snps[,i]
## get terminal values
var.terminal <- var
## With MISSING DATA in any columns: ##
## Continuous ML rec: ##
## get internal values (when (any) var contains NAs):
var <- var[!is.na(var)]
snps.ML[[i]] <- anc.ML(tree, var) ## require(phytools)
var.internal <- snps.ML[[i]]$ace
## get reconstruction from terminal & internal values
snps.rec[[i]] <- c(var.terminal, var.internal)
} # end for loop
i <- 1
var <- snps[,i]
var.terminal <- var
var <- var[!is.na(var)]
snps.ML[[i]] <- anc.ML(tree, var) ## require(phytools)
str(snps.ML[[i]])
all.nodes <- c(phen, round(snps.ML[[i]],0))
phen
as.numeric(phen)
foo <- as.numeric(phen)-1
names(foo) <- names(phen)
round(snps.ML[[i]]$ace,0)
foo <- c(foo, round(snps.ML[[i]]$ace,0))
foo
plot.phen(tree = tree, phen.nodes = foo)
foo[1:100] <- snps[,i]
foo
plot.phen(tree = tree, phen.nodes = foo)
snps[,i]
i <- 2
var <- snps[,i]
var.terminal <- var
var <- var[!is.na(var)]
snps.ML[[i]] <- anc.ML(tree, var) ## require(phytools)
var.internal <- snps.ML[[i]]$ace
snps.rec[[i]] <- c(var.terminal, var.internal)
names(snps.rec[[i]])
plot.phen(tree = tree, phen.nodes = snps.rec[[i]])
snps.rec[[i]]
sr <- round(snps.rec[[i]],0)
plot.phen(tree = tree, phen.nodes = round(snps.rec[[i]],0))
sr
source('~/treeWAS/pkg/R/plot.phen.R')
plot.phen(tree = tree, phen.nodes = round(snps.rec[[i]],0))
sr
identical(round(snps.rec[[i]],0),sr)
sr
length(phen.nodes) == (n.ind + tree$Nnode)
phen.nodes <- sr
length(phen.nodes) == (n.ind + tree$Nnode)
n.ind <- length(tree$tip.label)
length(phen.nodes) == (n.ind + tree$Nnode)
nodeCol <- as.vector(phen.nodes)
source('~/treeWAS/pkg/R/plot.phen.R')
source('~/treeWAS/pkg/R/plot.phen.R')
plot.phen(tree = tree, phen.nodes = round(snps.rec[[i]],0))
levs <- unique(var)
levs
var
var <- sr
levs
levs <- unique(var)
levs
which(names(var) == "B_1135")
var[60]
nodeCol <- "grey"
if(all.is.numeric(phen.nodes)){
var <- as.numeric(as.character(phen.nodes))
}else{
var <- as.character(phen.nodes)
}
levs <- unique(var[!is.na(var)])
if(length(levs) == 2){
## binary:
myCol <- c("red", "blue")
nodeCol <- var
## for loop
for(i in 1:length(levs)){
nodeCol <- replace(nodeCol, which(nodeCol == levs[i]), myCol[i])
} # end for loop
}else{
if(is.numeric(var)){
## numeric:
myCol <- num2col(var, col.pal = seasun)
nodeCol <- myCol
}else{
## categorical...
myCol <- funky(length(levs))
nodeCol <- var
## for loop
for(i in 1:length(levs)){
nodeCol <- replace(nodeCol, which(nodeCol == levs[i]), myCol[i])
} # end for loop
}
}
nodeCol
nodeCol <- as.vector(unlist(nodeCol))
## get COLOR for LEAVES ONLY
leafCol <- nodeCol[1:n.ind]
## get COLOR of INTERNAL nodes ONLY
internalNodeCol <- nodeCol[(n.ind+1):length(nodeCol)]
## get COLOR for EDGES
edgeCol <- rep("black", nrow(tree$edge))
for(i in 1:nrow(tree$edge)){
edgeCol[i] <- nodeCol[tree$edge[i,2]]
if(is.na(nodeCol[tree$edge[i,1]]) | is.na(nodeCol[tree$edge[i,2]])){
edgeCol[i] <- "grey"
}else{
if(nodeCol[tree$edge[i,1]] != nodeCol[tree$edge[i,2]]) edgeCol[i] <- "grey"
}
}
edgeLabCol <- edgeCol
plot(tree, show.tip=T, tip.col="white", edge.width=3, edge.color=edgeCol,...) # edge.width=3  #  no.margin=T
plot(tree, show.tip=T, tip.col="white", edge.width=3, edge.color=edgeCo)
plot(tree, show.tip=T, tip.col="white", edge.width=3, edge.color=edgeCol)
tiplabels(text=tree$tip.label, cex=0.55, adj=c(-0.5, 0), col=leafCol, frame="none")
leafCol
which(is.na(sr[1:100]))
source('~/treeWAS/pkg/R/plot.phen.R')
sr
var <- snps[,2]
ord <- match(rownames(snps), tree$tip.label)
rownames(snps)[ord]
ord <- match(tree$tip.label,rownames(snps))
rownames(snps)[ord]
snps <- snps[ord,]
str(snps)
var <- snps[,2]
snps.ML[[i]] <- anc.ML(tree, var) ## require(phytools)
var.terminal <- var
var <- var[!is.na(var)]
snps.ML[[i]] <- anc.ML(tree, var) ## require(phytools)
var.internal <- snps.ML[[i]]$ace
SR <-  c(var.terminal, var.internal)
SR <- round(SR, 0)
SR
plot.phen(tree, phen.nodes=SR)
SNPS[2,]
SNPS.ORI[2,]
data(snps)
# Load example data:
data(snps)
data(phen)
data(tree)
data(snps.reconstruction)
## Examine data:
## genetic data
str(snps)
## phenotype
str(phen)
table(phen)
## tree
str(tree)
## genetic data reconstruction:
str(snps.reconstruction)
suffixes <- keepLastN(colnames(snps), n = 2)
suffixes <- unique(suffixes)
if(all(suffixes %in% c(".a", ".c", ".g", ".t"))){
## SNPs:
snps <- get.binary.snps(snps)
## ... Optional step (for snps.reconstruction, if present)
## (Example only, if needed for user data)
if(is.matrix(snps.reconstruction)){
snps.reconstruction <- snps.reconstruction[, which(colnames(snps.reconstruction) %in% colnames(snps))]
}
}
i <- 1
var <- snps[,i]
var.terminal <- var
var <- var[!is.na(var)]
snps.ML[[i]] <- anc.ML(tree, var) ## require(phytools)
var.internal <- snps.ML[[i]]$ace
snps.rec[[i]] <- c(var.terminal, var.internal)
sr <- round(snps.rec[[i]],0)
plot.phen(tree, sr)
sr
sr[ord]
sr[c(ord,101:199)]
plot.phen(tree, sr[c(ord,101:199)])
library(phangorn)
if(is.null(colnames(snps))) colnames(snps) <- c(1:ncol(snps))
snps.levels <- sort(unique(as.vector(snps)), na.last = TRUE)
snps.phyDat <- as.phyDat(as.matrix(snps),
type="USER", levels=snps.levels)
index.phyDat <- attr(snps.phyDat, "index")
fit <- pml(tree, snps.phyDat)
l <- max(tree$edge[,2])
ord <- 1:l
length(snps.levels[!is.na(snps.levels)]) == 2
rec <- rec.ml <- ancestral.pml(fit, type = "ml", return = "prob")
if(any(is.na(snps.levels))){
na.col <- which(is.na(snps.levels))
for(i in 1:length(rec)){
foo <- rec[[i]]
toReplace <- which(foo[,na.col] == 1)
if(length(toReplace) > 0){
foo[toReplace,1] <- NA
foo[toReplace,2] <- NA
}
rec[[i]] <- foo
} # end for loop
}
snps.rec <- do.call(cbind, rec[ord])
snps.rec <- t(snps.rec[, seq(2, ncol(snps.rec), length(snps.levels))])
str(rec)
names(rec)
tree$node.label
data(tree)
tree$node.label
load("/home/caitiecollins/treeWAS/pkg/data/tree.rda")
tree$node.label
TREE <- tree
data("tree")
tree$node.label
tree <- NULL
phen
as.numeric(phen)-1
phen
PHEN
PHEN <- phen
phen <- as.numeric(phen)-1
names(phen) <- names(PHEN)
phen <- phen[100:1]
phen
phen.rec <- get.ancestral.pars(var=phen, tree=tree)
length(PHEN)
length(phen)
str(tree)
data("tree")
tree$node.label
TREE$node.label
tree$node.label <- TREE$node.label
phen.rec <- get.ancestral.pars(var=phen, tree=tree)
phen.rec
phen.levels <- sort(unique(phen))
phen.phyDat <- as.phyDat(as.matrix(phen),
type="USER", levels=phen.levels)
rec <- phen.pa.ACCTRAN <- pace(tree, phen.phyDat, type="ACCTRAN")
ord <- 1:length(rec)
names(rec)
source('~/treeWAS/pkg/R/reconstruct.R')
snps.reconstruction
str(snps.reconstruction)
data("snps)
")"
""
data("snps")
str(snps)
data("tree")
str(tree)
str(TREE)
load("/home/caitiecollins/treeWAS/pkg/data/tree.rda")
str(tree)
str(snps)
ord <- match(tree$tip.label, rownames(snps))
ord
SNPS <- snps
snps <- snps[ord,]
str(snps)
snps.rec <- asr(snps, tree)
str(snps.rec)
snps.reconstruction
snps.reconstruction <- snps.rec
use_data(snps.reconstruction, overwrite=TRUE)
rownames(snps.reconstruction)
document()
