file.n = file.n,
Windows=TRUE,
## coalescent.sim args:
n.ind = 100,
n.snps = 10000, # gen.size
# sim.by = "locus",
n.subs = dist_0, # 15, # theta (*2)
n.phen.subs = 15, # theta_p = NULL # 15
n.snps.assoc = 10, #
# assoc.option = "all",
assoc.prob = NULL, #100, #  90, #
grp.min = 0.25,
s = 20,
af = 10,
coaltree = TRUE,
## treeWAS args:
## RUNNING ALL OF THESE OPTIONS (FOR NOW):
p.value = 0.01, # REQUIRED FOR FISHER TEST
#   p.value.correct = c("bonf", "fdr", FALSE), #mt.correct = FALSE
#   p.value.by = c("count", "density"),
sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL ###################### CAREFUL (10,000) !!
treeWAS.test = c("terminal", "simultaneous", "subsequent"), # "score"
snps.reconstruction = "ace",
phen.reconstruction = "ace"
)
out <- foreach(n.reps=rep(1, 20), file.n=c(21:40), .packages="treeWAS") %dopar%
simTest(
## simTest args:
set.number = 1,
n.reps = n.reps,
set.seed.as = "file.number",
working.dir = "/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims",
## data from file args:
from.file = FALSE,
file.n = file.n,
Windows=TRUE,
## coalescent.sim args:
n.ind = 100,
n.snps = 10000, # gen.size
# sim.by = "locus",
n.subs = dist_0.01, # 15, # theta (*2)
n.phen.subs = 15, # theta_p = NULL # 15
n.snps.assoc = 10, #
# assoc.option = "all",
assoc.prob = NULL, #100, #  90, #
grp.min = 0.25,
s = 20,
af = 10,
coaltree = TRUE,
## treeWAS args:
## RUNNING ALL OF THESE OPTIONS (FOR NOW):
p.value = 0.01, # REQUIRED FOR FISHER TEST
#   p.value.correct = c("bonf", "fdr", FALSE), #mt.correct = FALSE
#   p.value.by = c("count", "density"),
sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL ###################### CAREFUL (10,000) !!
treeWAS.test = c("terminal", "simultaneous", "subsequent"), # "score"
snps.reconstruction = "ace",
phen.reconstruction = "ace"
)
out <- foreach(n.reps=rep(1, 20), file.n=c(41:60), .packages="treeWAS") %dopar%
simTest(
## simTest args:
set.number = 1,
n.reps = n.reps,
set.seed.as = "file.number",
working.dir = "/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims",
## data from file args:
from.file = FALSE,
file.n = file.n,
Windows=TRUE,
## coalescent.sim args:
n.ind = 100,
n.snps = 10000, # gen.size
# sim.by = "locus",
n.subs = dist_0.05, # 15, # theta (*2)
n.phen.subs = 15, # theta_p = NULL # 15
n.snps.assoc = 10, #
# assoc.option = "all",
assoc.prob = NULL, #100, #  90, #
grp.min = 0.25,
s = 20,
af = 10,
coaltree = TRUE,
## treeWAS args:
## RUNNING ALL OF THESE OPTIONS (FOR NOW):
p.value = 0.01, # REQUIRED FOR FISHER TEST
#   p.value.correct = c("bonf", "fdr", FALSE), #mt.correct = FALSE
#   p.value.by = c("count", "density"),
sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL ###################### CAREFUL (10,000) !!
treeWAS.test = c("terminal", "simultaneous", "subsequent"), # "score"
snps.reconstruction = "ace",
phen.reconstruction = "ace"
)
stopImplicitCluster()
source('C:/Users/Caitlin/treeWAS/pkg/R/simTest.R')
set.n <- "set1"
dirname <- paste("C:/Cait 2016/Work/Xavier/Sims/", set.n, sep="") #  "/coaltree",
foo <- dir(dirname)
## get all performance Rdata names
toKeep <- grep("performance", foo) ##??
foo <- foo[toKeep]
foo
foo[c(1:35, 44:48)]
foo <- foo[c(1:35, 44:48)]
foo
## load performance data
dat <- list()
setwd(dirname)
system.time(
for(i in 1:length(foo)){ # length(foo)
print(i)
dat[[i]] <- get(load(paste("./", foo[i], sep="")))
gc()
}
)
snps.assoc <- sapply(c(1:length(perf)), function(e) perf[[e]][[1]])
perf.ori <- perf <- dat
snps.assoc <- sapply(c(1:length(perf)), function(e) perf[[e]][[1]])
snps.assoc.ori <- snps.assoc <- as.list(as.data.frame(snps.assoc))
perf.ori.ori <- perf
dat <- perf
inds.new <- c(1:length(dat))
inds.ori <- sort(as.character(inds.new))
ord <- sapply(c(1:length(inds.new)), function(e) which(as.numeric(inds.ori) == inds.new[e]))
foo[ord]
dat.ori <- dat
dat <- dat[ord]
perf.ori <- perf <- dat
############
snps.assoc.ori.ori <- snps.assoc
dat <- snps.assoc
inds.new <- c(1:length(dat))
inds.ori <- sort(as.character(inds.new))
ord <- sapply(c(1:length(inds.new)), function(e) which(as.numeric(inds.ori) == inds.new[e]))
dat.ori <- dat
dat <- dat[ord]
snps.assoc.ori <- snps.assoc <- dat
foo <- dir(dirname)
## get all performance Rdata names
toKeep <- grep("_res", foo) ##??
foo <- foo[toKeep]
foo <- foo[c(1:35, 44:48)]
foo
foo <- dir(dirname)
## get all performance Rdata names
toKeep <- grep("_res", foo) ##??
foo[toKeep]
foo <- foo[toKeep]
foo <- foo[c(1:35, 44:48)]
foo
## load performance data
dat <- list()
setwd(dirname)
system.time(
for(i in 1:length(foo)){ # length(foo)
print(i)
temp <- get(load(paste("./", foo[i], sep="")))
dat[[i]] <- mean(temp$vals$terminal$corr.dat[snps.assoc[[i]]])
gc()
}
)
snps.assoc <- snps.assoc.ori.ori
perf <- perf.ori.ori
foo <- dir(dirname)
## get all performance Rdata names
toKeep <- grep("_res", foo) ##??
foo <- foo[toKeep]
foo <- foo[c(1:35, 44:48)]
foo
## load performance data
dat <- list()
setwd(dirname)
system.time(
for(i in 1:length(foo)){ # length(foo)
print(i)
temp <- get(load(paste("./", foo[i], sep="")))
dat[[i]] <- mean(temp$vals$terminal$corr.dat[snps.assoc[[i]]])
gc()
}
)
inds.new <- c(1:length(dat))
inds.ori <- sort(as.character(inds.new))
ord <- sapply(c(1:length(inds.new)), function(e) which(as.numeric(inds.ori) == inds.new[e]))
dat.ori <- dat
dat <- dat[ord]
score1.mean.ori <- score1.mean <- as.vector(unlist(dat))
dat <- perf
inds.new <- c(1:length(dat))
inds.ori <- sort(as.character(inds.new))
ord <- sapply(c(1:length(inds.new)), function(e) which(as.numeric(inds.ori) == inds.new[e]))
dat.ori <- dat
dat <- dat[ord]
perf.ori <- perf <- dat
dat <- snps.assoc
inds.new <- c(1:length(dat))
inds.ori <- sort(as.character(inds.new))
ord <- sapply(c(1:length(inds.new)), function(e) which(as.numeric(inds.ori) == inds.new[e]))
dat.ori <- dat
dat <- dat[ord]
snps.assoc.ori <- snps.assoc <- dat
foo <- dir(dirname)
toKeep <- grep("_args", foo) ##??
foo <- foo[toKeep] #[1:20]
foo <- foo[c(1:35, 44:48)]
foo
## load args
dat <- list()
setwd(dirname)
system.time(
for(i in 1:length(foo)){ # length(foo)
print(i)
dat[[i]] <- get(load(paste("./", foo[i], sep="")))
gc()
}
)
args.ori.ori <- dat
inds.new <- c(1:length(dat))
inds.ori <- sort(as.character(inds.new))
ord <- sapply(c(1:length(inds.new)), function(e) which(as.numeric(inds.ori) == inds.new[e]))
dat.ori <- dat
dat <- dat[ord]
args.ori <- args <- dat
foo <- dir(dirname)
## get all performance Rdata names
toKeep <- grep("phen.plot.col", foo) ##??
foo <- foo[toKeep] #[1:20]
foo <- foo[c(1:35, 44:48)]
foo
## load performance data
dat <- list()
setwd(dirname)
system.time(
for(i in 1:length(foo)){ # length(foo)
print(i)
dat[[i]] <- get(load(paste("./", foo[i], sep="")))
gc()
}
)
inds.new <- c(1:length(dat))
inds.ori <- sort(as.character(inds.new))
ord <- sapply(c(1:length(inds.new)), function(e) which(as.numeric(inds.ori) == inds.new[e]))
dat.ori <- dat
dat <- dat[ord]
phen.plot.col.ori <- phen.plot.col <- dat
n.phen.subs <- sapply(c(1:length(dat)), function(e) length(which(dat[[e]]$edges == "grey")))
n.phen.subs.ori <- n.phen.subs
dat <- perf
noms.ori <- names(dat[[1]])
noms.ori
################################################
treeWAS <- vector("list", length=3)
names(treeWAS) <- c("terminal", "simultaneous", "subsequent")
treeWAS$terminal <- treeWAS$simultaneous <- treeWAS$subsequent <- list()
fisher.bonf <- fisher.fdr <-
plink.bonf <- plink.fdr <- plink.gc.bonf <- plink.gc.fdr <- pca <- dapc <-  cmh <- treeWAS.all <- list()
for(i in 1:length(dat)){
treeWAS$terminal[[i]] <- treeWAS$simultaneous[[i]] <- treeWAS$subsequent[[i]] <- list()
for(e in 2:length(names(dat[[1]]))){
## Fisher:
if(e == 2){
fisher.bonf[[i]] <- dat[[i]][[e]]
}
if(e == 3){
fisher.fdr[[i]] <- dat[[i]][[e]]
}
## treeWAS:
if(e %in% 4:35){
treeWAS$terminal[[i]][[(length(treeWAS$terminal[[i]])+1)]] <- dat[[i]][[e]]
}
if(e %in% 36:67){
treeWAS$simultaneous[[i]][[(length(treeWAS$simultaneous[[i]])+1)]] <- dat[[i]][[e]]
}
if(e %in% 68:99){
treeWAS$subsequent[[i]][[(length(treeWAS$subsequent[[i]])+1)]] <- dat[[i]][[e]]
}
## PLINK:
if(e == 100){
plink.bonf[[i]] <- dat[[i]][[e]]
}
if(e == 101){
plink.fdr[[i]] <- dat[[i]][[e]]
}
if(e == 102){
plink.gc.bonf[[i]] <- dat[[i]][[e]]
}
if(e == 103){
plink.gc.fdr[[i]] <- dat[[i]][[e]]
}
if(e == 104){
pca[[i]] <- dat[[i]][[e]]
}
if(e == 105){
dapc[[i]] <- dat[[i]][[e]]
}
if(e == 106){
cmh[[i]] <- dat[[i]][[e]]
}
if(e == 107){
treeWAS.all[[i]] <- dat[[i]][[e]]
}
} # end e for loop
names(treeWAS$terminal[[i]]) <- removeFirstN(noms.ori[4:35], nchar("treeWAS.terminal."))
names(treeWAS$simultaneous[[i]]) <- removeFirstN(noms.ori[36:67], nchar("treeWAS.simultaneous."))
names(treeWAS$subsequent[[i]]) <- removeFirstN(noms.ori[68:99], nchar("treeWAS.subsequent."))
} # end i for loop
## combine
# treeWAS <- do.call("rbind", treeWAS)
fisher.bonf <- do.call("rbind", fisher.bonf)
fisher.fdr <- do.call("rbind", fisher.fdr)
plink.bonf <- do.call("rbind", plink.bonf)
plink.fdr <- do.call("rbind", plink.fdr)
plink.gc.bonf <- do.call("rbind", plink.gc.bonf)
plink.gc.fdr <- do.call("rbind", plink.gc.fdr)
pca <- do.call("rbind", pca)
dapc <- do.call("rbind", dapc)
cmh <- do.call("rbind", cmh)
treeWAS.all <- do.call("rbind", treeWAS.all)
## Get dfs of nrow=length(dat),
## for each of the 32 thresh methods and each of the 3 treeWAS tests:
df <- list()
for(t in 1:length(treeWAS)){
df[[t]] <- list()
for(i in 1:length(treeWAS[[t]])){
df[[t]][[i]] <- do.call(rbind, treeWAS[[t]][[i]])
}
df[[t]] <- do.call("rbind", df[[t]])
}
names(df) <- c("terminal", "simultaneous", "subsequent")
treeWAS.df <- df
str(treeWAS.df[[1]])
identical(names(treeWAS$subsequent[[1]]), names(treeWAS$terminal[[1]])) # TRUE
## get thresh.test names:
thresh.test <- names(treeWAS$terminal[[1]])
thresh.test <- rep(thresh.test, length(treeWAS$terminal))
## get terminal df
term <- data.frame("assoc.test"=rep("terminal", nrow(treeWAS.df$terminal)), "test"=thresh.test, treeWAS.df$terminal)
rownames(term) <- c(1:nrow(term))
head(term)
## get simultaneous df
sim <- data.frame("assoc.test"=rep("simultaneous", nrow(treeWAS.df$simultaneous)), "test"=thresh.test, treeWAS.df$simultaneous)
rownames(sim) <- c(1:nrow(sim))
head(sim)
## get subsequent df
subsq <- data.frame("assoc.test"=rep("subsequent", nrow(treeWAS.df$subsequent)), "test"=thresh.test, treeWAS.df$subsequent)
rownames(subsq) <- c(1:nrow(subsq))
head(subsq)
evalStats <- rbind(term, sim, subsq)
str(evalStats)
save(evalStats, file="./set1_ACE_coal_1_40_treeWAS_ALL_THRESHOLDS_evalStats.Rdata")
n.subs <- c(rep("dist_0", 20), rep("dist_0.01", 20)) #, rep("dist_0.05", 20), rep("dist_0.1", 20), rep("Poisson_1", 20))
tree.type <- rep("coal", 40)
var <- tree.type
tree.type.thresh <- rep(sapply(c(1:length(var)), function(e) rep(var[e], 32)), 3)
args[[1]]
n.phen.arg <- c(rep(15, 40)) #, rep(5, 40))
var <- n.phen.arg
n.phen.arg.thresh <- rep(sapply(c(1:length(var)), function(e) rep(var[e], 32)), 3)
var <- n.subs
n.subs.thresh <- rep(sapply(c(1:length(var)), function(e) rep(var[e], 32)), 3)
var <- n.phen.subs
n.phen.subs.thresh <- rep(sapply(c(1:length(var)), function(e) rep(var[e], 32)), 3)
var <- score1.mean
score1.mean.thresh <- as.vector(unlist(rep(sapply(c(1:length(var)), function(e) rep(var[e], 32)), 3)))
df <- data.frame(evalStats[,c("assoc.test", "test")],
"tree.type"=tree.type.thresh,
# "s"=s.thresh, "af"=af.thresh,
"n.subs"=n.subs.thresh,
"n.phen.arg" = n.phen.arg.thresh,
"n.phen.subs"=n.phen.subs.thresh,
"score1.mean"=score1.mean.thresh, evalStats[,c(3:ncol(evalStats))] )
evalStats <- df
save(evalStats, file="./set1_ACE_coal_1_40_treeWAS_ALL_THRESHOLDS_evalStats.Rdata")
evalStats.ori <- evalStats.thresh <- evalStats
require(plyr)
df <- evalStats
## map thresh test levels to numbers (NOTE: "best" = new level 18)
df$test <- mapvalues(df$test, from = levels(df$test), to = c(1:32)) # plyr # SAVED
evalStats.ori <- evalStats
evalStats <- df
## SAVE:
save(evalStats, file="./set1_ACE_coal_1_40_treeWAS_ALL_THRESHOLDS_evalStats_w_NaN.Rdata") ## WITH NaN values in F1.score & PPV!
df <- evalStats
toReplace <- which(is.na(df$F1.score))
length(toReplace)
df$F1.score[toReplace] <- 0
evalStats <- df
## SAVE:
save(evalStats, file="./set1_ACE_coal_1_40_treeWAS_ALL_THRESHOLDS_evalStats.Rdata") ## withOUT NaN values!
treeWAS.tests <- c("terminal", "simultaneous", "subsequent")
Y <- c("F1.score", "PPV", "sensitivity", "FPR")
for(y in 1:length(Y)){ #
for(t in 1:3){
df <- evalStats
df <- df[df$assoc.test==treeWAS.tests[t], ] # & df$n.subs=="dist_0.05" ## & df$tree.type=="rtree" & df$s==0.5 & df$af==5
beeswarmPlot(y=Y[y], x="test", df, y.lab=NULL,
pt.size=4, x.text=TRUE, mean=TRUE)
}
}
load("E:/treeWAS_Sims/set1/rtree/n.phen.subs_15_old/set1_rtree_101_180_treeWAS_ALL_THRESHOLDS_evalStats.Rdata")
head(evalStats)
evalStats1 <- evalStats
load("C:/Cait 2016/Work/Xavier/Sims/set1/rtree/n.phen.subs_15/set1_rtree_101_180_treeWAS_ALL_THRESHOLDS_evalStats.Rdata")
head(evalStats)
load("C:/Cait 2016/Work/Xavier/Sims/set1/rtree/n.phen.subs_15/set1_180_performance.Rdata")
length(performance)
perf <- performance
library(foreach)
library(doParallel)
## Calculate the number of cores:
no_cores <- detectCores() - 1 # 3
## Initiate implicit cluster:
registerDoParallel(no_cores)
dist_0.01
dist_0.05
out <- foreach(n.reps=rep(1, 9), file.n=c(52:60), .packages="treeWAS") %dopar%
simTest(
## simTest args:
set.number = 1,
n.reps = n.reps,
set.seed.as = "file.number",
working.dir = "/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims",
## data from file args:
from.file = FALSE,
file.n = file.n,
Windows=TRUE,
## coalescent.sim args:
n.ind = 100,
n.snps = 10000, # gen.size
# sim.by = "locus",
n.subs = dist_0.05, # 15, # theta (*2)
n.phen.subs = 15, # theta_p = NULL # 15
n.snps.assoc = 10, #
# assoc.option = "all",
assoc.prob = NULL, #100, #  90, #
grp.min = 0.25,
s = 20,
af = 10,
coaltree = TRUE,
## treeWAS args:
## RUNNING ALL OF THESE OPTIONS (FOR NOW):
p.value = 0.01, # REQUIRED FOR FISHER TEST
#   p.value.correct = c("bonf", "fdr", FALSE), #mt.correct = FALSE
#   p.value.by = c("count", "density"),
sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL ###################### CAREFUL (10,000) !!
treeWAS.test = c("terminal", "simultaneous", "subsequent"), # "score"
snps.reconstruction = "ace",
phen.reconstruction = "ace"
)
stopImplicitCluster()
source('C:/Users/Caitlin/treeWAS/pkg/R/simTest.R')
library(treeWAS)
dist_0.1
library(foreach)
library(doParallel)
## Calculate the number of cores:
no_cores <- detectCores() - 1 # 3
## Initiate implicit cluster:
registerDoParallel(no_cores)
###########
## SET 2 ##
###########
########################
### n.phen.subs = 15 ###
########################
out <- foreach(n.reps=rep(1, 20), file.n=c(1:20), .packages="treeWAS") %dopar%
simTest(
## simTest args:
set.number = 2,
n.reps = n.reps,
set.seed.as = "file.number",
working.dir = "/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims",
## data from file args:
from.file = FALSE,
file.n = file.n,
Windows=TRUE,
## coalescent.sim args:
n.ind = 100,
n.snps = 10000, # gen.size
# sim.by = "locus",
n.subs = dist_0, # 15, # theta (*2)
n.phen.subs = 15, # theta_p = NULL # 15
n.snps.assoc = 10, #
# assoc.option = "all",
assoc.prob = NULL, #100, #  90, #
grp.min = 0.25,
s = 20,
af = 10,
coaltree = TRUE,
## treeWAS args:
## RUNNING ALL OF THESE OPTIONS (FOR NOW):
p.value = 0.01, # REQUIRED FOR FISHER TEST
#   p.value.correct = c("bonf", "fdr", FALSE), #mt.correct = FALSE
#   p.value.by = c("count", "density"),
sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL ###################### CAREFUL (10,000) !!
treeWAS.test = c("terminal", "simultaneous", "subsequent"), # "score"
snps.reconstruction = "ace",
phen.reconstruction = "ace"
)
stopImplicitCluster()
library(treeWAS)
?mantelhaen.test
library(devtools)
library(treeWAS)
document()
document()
document()
library(treeWAS)
document()
ggplot.bg
library(treeWAS)
ggplot.bg
document()
