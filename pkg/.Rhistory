var <- score1.mean
score1.mean.thresh <- as.vector(unlist(rep(sapply(c(1:length(var)), function(e) rep(var[e], 32)), 3)))
df <- data.frame(evalStats[,c("assoc.test", "test")],
"tree.type"=tree.type.thresh,
# "s"=s.thresh, "af"=af.thresh,
"n.subs"=n.subs.thresh,
"n.phen.arg" = n.phen.arg.thresh,
"n.phen.subs"=n.phen.subs.thresh,
"score1.mean"=score1.mean.thresh, evalStats[,c(3:ncol(evalStats))] )
evalStats <- df
save(evalStats, file="./set1_ACE_coal_1_40_treeWAS_ALL_THRESHOLDS_evalStats.Rdata")
evalStats.ori <- evalStats.thresh <- evalStats
require(plyr)
df <- evalStats
## map thresh test levels to numbers (NOTE: "best" = new level 18)
df$test <- mapvalues(df$test, from = levels(df$test), to = c(1:32)) # plyr # SAVED
evalStats.ori <- evalStats
evalStats <- df
## SAVE:
save(evalStats, file="./set1_ACE_coal_1_40_treeWAS_ALL_THRESHOLDS_evalStats_w_NaN.Rdata") ## WITH NaN values in F1.score & PPV!
df <- evalStats
toReplace <- which(is.na(df$F1.score))
length(toReplace)
df$F1.score[toReplace] <- 0
evalStats <- df
## SAVE:
save(evalStats, file="./set1_ACE_coal_1_40_treeWAS_ALL_THRESHOLDS_evalStats.Rdata") ## withOUT NaN values!
treeWAS.tests <- c("terminal", "simultaneous", "subsequent")
Y <- c("F1.score", "PPV", "sensitivity", "FPR")
for(y in 1:length(Y)){ #
for(t in 1:3){
df <- evalStats
df <- df[df$assoc.test==treeWAS.tests[t], ] # & df$n.subs=="dist_0.05" ## & df$tree.type=="rtree" & df$s==0.5 & df$af==5
beeswarmPlot(y=Y[y], x="test", df, y.lab=NULL,
pt.size=4, x.text=TRUE, mean=TRUE)
}
}
load("E:/treeWAS_Sims/set1/rtree/n.phen.subs_15_old/set1_rtree_101_180_treeWAS_ALL_THRESHOLDS_evalStats.Rdata")
head(evalStats)
evalStats1 <- evalStats
load("C:/Cait 2016/Work/Xavier/Sims/set1/rtree/n.phen.subs_15/set1_rtree_101_180_treeWAS_ALL_THRESHOLDS_evalStats.Rdata")
head(evalStats)
load("C:/Cait 2016/Work/Xavier/Sims/set1/rtree/n.phen.subs_15/set1_180_performance.Rdata")
length(performance)
perf <- performance
library(foreach)
library(doParallel)
## Calculate the number of cores:
no_cores <- detectCores() - 1 # 3
## Initiate implicit cluster:
registerDoParallel(no_cores)
dist_0.01
dist_0.05
out <- foreach(n.reps=rep(1, 9), file.n=c(52:60), .packages="treeWAS") %dopar%
simTest(
## simTest args:
set.number = 1,
n.reps = n.reps,
set.seed.as = "file.number",
working.dir = "/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims",
## data from file args:
from.file = FALSE,
file.n = file.n,
Windows=TRUE,
## coalescent.sim args:
n.ind = 100,
n.snps = 10000, # gen.size
# sim.by = "locus",
n.subs = dist_0.05, # 15, # theta (*2)
n.phen.subs = 15, # theta_p = NULL # 15
n.snps.assoc = 10, #
# assoc.option = "all",
assoc.prob = NULL, #100, #  90, #
grp.min = 0.25,
s = 20,
af = 10,
coaltree = TRUE,
## treeWAS args:
## RUNNING ALL OF THESE OPTIONS (FOR NOW):
p.value = 0.01, # REQUIRED FOR FISHER TEST
#   p.value.correct = c("bonf", "fdr", FALSE), #mt.correct = FALSE
#   p.value.by = c("count", "density"),
sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL ###################### CAREFUL (10,000) !!
treeWAS.test = c("terminal", "simultaneous", "subsequent"), # "score"
snps.reconstruction = "ace",
phen.reconstruction = "ace"
)
stopImplicitCluster()
source('C:/Users/Caitlin/treeWAS/pkg/R/simTest.R')
library(treeWAS)
dist_0.1
library(foreach)
library(doParallel)
## Calculate the number of cores:
no_cores <- detectCores() - 1 # 3
## Initiate implicit cluster:
registerDoParallel(no_cores)
###########
## SET 2 ##
###########
########################
### n.phen.subs = 15 ###
########################
out <- foreach(n.reps=rep(1, 20), file.n=c(1:20), .packages="treeWAS") %dopar%
simTest(
## simTest args:
set.number = 2,
n.reps = n.reps,
set.seed.as = "file.number",
working.dir = "/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims",
## data from file args:
from.file = FALSE,
file.n = file.n,
Windows=TRUE,
## coalescent.sim args:
n.ind = 100,
n.snps = 10000, # gen.size
# sim.by = "locus",
n.subs = dist_0, # 15, # theta (*2)
n.phen.subs = 15, # theta_p = NULL # 15
n.snps.assoc = 10, #
# assoc.option = "all",
assoc.prob = NULL, #100, #  90, #
grp.min = 0.25,
s = 20,
af = 10,
coaltree = TRUE,
## treeWAS args:
## RUNNING ALL OF THESE OPTIONS (FOR NOW):
p.value = 0.01, # REQUIRED FOR FISHER TEST
#   p.value.correct = c("bonf", "fdr", FALSE), #mt.correct = FALSE
#   p.value.by = c("count", "density"),
sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL ###################### CAREFUL (10,000) !!
treeWAS.test = c("terminal", "simultaneous", "subsequent"), # "score"
snps.reconstruction = "ace",
phen.reconstruction = "ace"
)
stopImplicitCluster()
library(treeWAS)
?mantelhaen.test
library(devtools)
library(treeWAS)
document()
document()
document()
library(treeWAS)
document()
ggplot.bg
library(treeWAS)
ggplot.bg
document()
library(treeWAS)
data("snps")
str(snps)
data(phen)
str(phen)
?treeWAS
install.packages("devtools", dep=T)
library(devtools)
install_github("caitiecollins/treeWAS")
install_github("caitiecollins/treeWAS/pkg")
library(treeWAS)
data(snps)
data(phen)
data(tree)
str(snps)
## phenotype
str(phen)
table(phen)
data("tree")
str(tree)
?install.packages
inst <- installed.packages()
install.packages("devtools", dep=TRUE)
install.packages("devtools", dep = TRUE)
"devtools" %in% installed.packages
"devtools" %in% installed.packages()
inst <- installed.packages()
str(inst)
"ade4" %in% inst
"devtools" %in% inst
pkgs <- .packages()
str(pkgs)
!"devtools" %in% .packages()
library(devtools)
install_github("caitiecollins/treeWAS/pkg")
?library
library(treeWAS, quietly = TRUE)
thm <- knit_theme$get("acid")  # parse the theme to a list
library(knitr)
thm <- knit_theme$get("acid")  # parse the theme to a list
?knit_theme
?grid.arrange
?marrangeGrob
install.packages("gridExtra")
data(snps)
data(phen)
data(tree)
snps <- get.binary.snps(snps)
library(treeWAS)
data(snps)
data(phen)
data(tree)
str(snps)
foo <- coalescent.sim(n.ind = 100,
n.snps = 10000,
n.subs = dist_0  ,
n.snps.assoc = 10,
assoc.prob = 90,
n.phen.subs = 15,
phen = NULL,
plot = TRUE,
heatmap = FALSE,
reconstruct = FALSE,
dist.dna.model = "JC69",
grp.min = 0.4,
row.names = TRUE,
set = 1,
coaltree = TRUE,
s = 20,
af = 10,
filename.plot = NULL,
seed = 2)
FOO <- foo
foo <- FOO
snps.ori <- foo$snps
snps.assoc <- foo$snps.assoc
tree <- foo$tree
phen <- foo$phen
phen.plot.col <- foo$phen.plot.col
snps <- snps.ori
save(snps.ori, file="C:/Users/Caitlin/treeWAS/misc/snps.ori.eg.Rdata")
save(snps.assoc, file="C:/Users/Caitlin/treeWAS/misc/snps.assoc.eg.Rdata")
save(tree, file="C:/Users/Caitlin/treeWAS/misc/tree.eg.Rdata")
save(phen, file="C:/Users/Caitlin/treeWAS/misc/phen.eg.Rdata")
save(phen.plot.col, file="C:/Users/Caitlin/treeWAS/misc/phen.plot.col.eg.Rdata")
## Make snps more interesting... ###########################################################################
## (1) make a DNAbin(-type?) object (w nts not binary, and 2-columns for each locus)
## (2) add some NAs
## (3) add some tri-allelic and 4-allelic? loci
## (4) make row.names and tree labs more interesting
## (5) put snps rows out of order (NB - leave these as is, but use for label-checking eg)
############################################################################################################
## save snsp.assoc as NAMES:
snps.assoc <- colnames(snps)[snps.assoc]
save(snps.assoc, file="C:/Users/Caitlin/treeWAS/misc/snps.assoc.eg.Rdata")
############################################################################################################
## (1) make a DNAbin(-type?) object (w nts not binary, and 2-columns for each locus)
str(snps)
SNPS <- snps
snps.assoc
#  618 2017 2656 3721 5728 6287 6604 8980 9080 9442
#  "618"  "2017" "2656" "3721" "5728" "6287" "6604" "8980" "9080" "9442"
foo <- matrix(as.character(snps), nrow=nrow(snps), ncol=ncol(snps))
rownames(foo) <- rownames(snps)
colnames(foo) <- colnames(snps)
str(foo)
# select cols to change to nts:
loci <- sample(1:ncol(snps), replace=FALSE)
## ac
toReplace <- loci[1:1000]
foo[,toReplace] <- replace(foo[,toReplace], which(foo[,toReplace]=="0"), "a")
foo[,toReplace] <- replace(foo[,toReplace], which(foo[,toReplace]=="1"), "c")
## ag
toReplace <- loci[1001:3000]
foo[,toReplace] <- replace(foo[,toReplace], which(foo[,toReplace]=="0"), "a")
foo[,toReplace] <- replace(foo[,toReplace], which(foo[,toReplace]=="1"), "g")
## tc
toReplace <- loci[3001:4000]
foo[,toReplace] <- replace(foo[,toReplace], which(foo[,toReplace]=="0"), "t")
foo[,toReplace] <- replace(foo[,toReplace], which(foo[,toReplace]=="1"), "c")
## gt
toReplace <- loci[4001:7000]
foo[,toReplace] <- replace(foo[,toReplace], which(foo[,toReplace]=="0"), "g")
foo[,toReplace] <- replace(foo[,toReplace], which(foo[,toReplace]=="1"), "t")
## cg
toReplace <- loci[7001:9000]
foo[,toReplace] <- replace(foo[,toReplace], which(foo[,toReplace]=="0"), "c")
foo[,toReplace] <- replace(foo[,toReplace], which(foo[,toReplace]=="1"), "g")
## ga
toReplace <- loci[9001:10000]
foo[,toReplace] <- replace(foo[,toReplace], which(foo[,toReplace]=="0"), "g")
foo[,toReplace] <- replace(foo[,toReplace], which(foo[,toReplace]=="1"), "a")
unique(as.vector(unlist(foo)))
# "g" "c" "t" "a"
snps <- foo
bin <- as.DNAbin(snps)
gen <- DNAbin2genind(bin, polyThres=0)
gen.s <- gen@tab
str(gen.s)
snps.eg <- gen.s
save(snps.eg, file="C:/Users/Caitlin/treeWAS/misc/snps.eg.Rdata")
snps <- snps.eg
############################################################################################################
## (2) add some NAs
snps <- get(load("C:/Users/Caitlin/treeWAS/misc/snps.eg.Rdata"))
is.even <- function(x) x %% 2 == 0
is.odd <- function(x) x %% 2 != 0
toReplace <- sample(c(1:ncol(snps))[-which(removeLastN(colnames(snps), 2) %in% snps.assoc)],
3000, replace=F)
toReplace <- as.list(toReplace)
for(i in 1:length(toReplace)){
x <- toReplace[[i]]
if(is.odd(x)){
x <- c(x, x+1)
}else{
x <- c(x-1, x)
}
toNA <- sample(c(1:nrow(snps)), sample(c(1:nrow(snps)), 1), replace=F)
snps[, x[1]] <- replace(snps[, x[1]], toNA, NA)
snps[, x[2]] <- replace(snps[, x[2]], toNA, NA)
} # end for loop
SNPS <- SNPS.ORI <- snps
############################################################################################################
## (3) add some tri-allelic and 4-allelic? loci
# toReplace <- sample(c(1:ncol(snps))[-snps.assoc], 200, replace=F)
# toReplace <- as.list(toReplace)
toReplace <- as.list(c(17, 1417, 5099)) ## 9 708 2549
# for(i in 1:length(toReplace)){
SNPS.NEW <- snps
for(i in 1:length(toReplace)){
x <- toReplace[[i]]
a <- removeLastN(colnames(snps)[x-1], 2)
b <- removeLastN(colnames(snps)[x], 2)
c <- removeLastN(colnames(snps)[x+1], 2)
names(a) <- names(b) <- names(c) <- NULL
if(identical(b,c)){
x <- c(x, x+1)
}else{
x <- c(x-1, x)
}
to3 <- sample(c(1:nrow(snps)), sample(c(1:(nrow(snps)*0.25)), 1), replace=F)
snps[, x[1]] <- replace(snps[, x[1]], to3, 0)
snps[, x[2]] <- replace(snps[, x[2]], to3, 0)
SNPS <- snps
s <- replace(rep(0, nrow(snps)), to3, 1)
temp <- cbind(snps[,(1:(x[2]))], s)
toto <- cbind(temp, SNPS[, (x[2]+1):ncol(SNPS)])
snps <- toto
nom <- removeLastN(colnames(snps)[x], 2)
suff <- keepLastN(colnames(snps)[x], 1)
nts <- c("a", "c", "g", "t")
nt <- sample(nts[-which(nts %in% suff)], 1)
colnames(snps)[(x[2]+1)] <- paste(nom[1], nt, sep=".")
} # end for loop
save(snps, file="C:/Users/Caitlin/treeWAS/misc/snps.eg.Rdata")
############################################################################################################
## (4) make row.names and tree labs more interesting
head(row.names(snps))
head(tree$tip.label)
identical(as.character(row.names(snps)), as.character(tree$tip.label)) # TRUE
n1 <- as.character(phen)
n2 <- sample(c(1051:1150), nrow(snps), replace=F)
nom <- paste(n1, n2, sep="_")
row.names(snps) <- nom
names(phen) <- nom
tree$tip.label <- nom
save(snps, file="C:/Users/Caitlin/treeWAS/misc/snps.eg.Rdata")
############################################################################################################
## (5) put snps rows out of order (NB - leave these as is, but use for label-checking eg)
ord <- sample(c(1:nrow(snps)), nrow(snps), replace=F)
snps <- snps[ord,]
str(snps)
save(snps, file="C:/Users/Caitlin/treeWAS/misc/snps.eg.Rdata")
############################################################################################################
# snps[, which(removeLastN(colnames(snps), 2) %in% snps.assoc)]
## save as data objects:
library(devtools)
use_data(snps, overwrite=T)
use_data(phen, overwrite=T)
use_data(tree, overwrite=T)
use_data(snps.assoc, overwrite=T)
use_data(phen.plot.col, overwrite=T)
dat <- list("tree" = tree,
"snps" = snps,
"snps.assoc" = snps.assoc,
"phen" = phen,
"phen.plot.col" = phen.plot.col)
use_data(dat, overwrite=T)
str(snps)
library(devtools)
install.packages("devtools")
library(devtools)
use_data(snps, overwrite=T)
use_data(phen, overwrite=T)
use_data(tree, overwrite=T)
use_data(snps.assoc, overwrite=T)
use_data(phen.plot.col, overwrite=T)
dat <- list("tree" = tree,
"snps" = snps,
"snps.assoc" = snps.assoc,
"phen" = phen,
"phen.plot.col" = phen.plot.col)
use_data(dat, overwrite=T)
str(snps)
SNPS.OUT <- snps
snps <- get.binary.snps(snps)
out <- treeWAS(snps = snps,
phen = phen,
tree = tree,
n.subs = NULL,
sim.n.snps = ncol(snps)*10,
test = c("terminal", "simultaneous", "subsequent"),
snps.reconstruction = "parsimony",
snps.sim.reconstruction = "parsimony",
phen.reconstruction = "parsimony",
na.rm = TRUE,
p.value = 0.01,
p.value.correct = "bonf",
p.value.by = "count",
dist.dna.model = "JC69",
plot.tree = FALSE,
plot.manhattan = TRUE,
plot.null.dist = TRUE,
plot.dist = FALSE,
snps.assoc = NULL,
filename.plot = NULL,
seed = 1)
treeWAS.out <- out
save(treeWAS.out, file="C:/Users/Caitlin/treeWAS/misc/treeWAS.out.eg.Rdata")
use_data(treeWAS.out, overwrite=T)
print.treeWAS(treeWAS.out)
library(treeWAS)
data(treeWAS.out)
out <- treeWAS.out
print.treeWAS(out, sort.by.p=FALSE)
?print.treeWAS
print(out, sort.by.p=FALSE)
print.treeWAS(out, sort.by.p=FALSE)
class(out)
class(out) <- "treeWAS"
print(out, sort.by.p=FALSE)
source('C:/Users/Caitlin/treeWAS/pkg/R/treeWAS.R')
class(out)
class(treeWAS.out) <- "treeWAS"
save(treeWAS.out, file="C:/Users/Caitlin/treeWAS/misc/treeWAS.out.eg.Rdata")
use_data(treeWAS.out, overwrite=T)
library(treeWAS)
library(devtools)
install_github("caitiecollins/treeWAS/pkg")
library(treeWAS)
vignette(treeWAS)
vignettes(treeWAS)
vignette("treeWAS")
install_github("caitiecollins/treeWAS/pkg", build_vignettes = TRUE)
install_github("caitiecollins/treeWAS/pkg", build_vignettes = TRUE, force=TRUE)
library(treeWAS)
vignette("treeWAS")
browseVignettes("treeWAS")
library(treeWAS)
library(devtools)
install_github("caitiecollins/treeWAS/pkg", build_vignettes = TRUE)
install.packages("rprojroot")
library(treeWAS)
library(png)
library(grid)
img <- readPNG("figs/Eqn_Legend_genotype.png")
getw()
getwd()
img <- readPNG("vignettes/figs/Eqn_Legend_genotype.png")
install_github("caitiecollins/treeWAS/pkg", build_vignettes = TRUE)
install_github("caitiecollins/treeWAS/pkg", build_vignettes = TRUE)
install_github("caitiecollins/treeWAS/pkg")
install_github("caitiecollins/treeWAS/pkg", build_vignettes = TRUE)
install_github("caitiecollins/treeWAS/pkg", build_vignettes = TRUE, force=TRUE)
update.packages()
install_github("caitiecollins/treeWAS/pkg", build_vignettes = TRUE, force=TRUE)
options(download.file.method = "wininet")
install_github("caitiecollins/treeWAS/pkg", build_vignettes = TRUE, force=TRUE)
install.packages("colorspace")
install_github("caitiecollins/treeWAS/pkg", build_vignettes = TRUE, force=TRUE)
library(devtools)
install.packages("digest")
install.packages("adegenet")
install.packages("phangorn")
install.packages("Hmisc")
library(Hmisc)
install.packages("survival")
library(Hmisc)
library(treeWAS)
?treeWAS
install_version("Hmisc", version = "4.0-1", repos = "http://cran.us.r-project.org")
library(devtools)
install_version("Hmisc", version = "4.0-1", repos = "http://cran.us.r-project.org")
install_version("Hmisc", version = "4.0-1", repos = "http://cran.us.r-project.org", dep=TRUE)
install.packages("curl")
install_version("Hmisc", version = "4.0-1", repos = "http://cran.us.r-project.org")
library(treeWAS)
setwd("/home/caitiecollins/ClonalFrameML/src/pubMLST/Neisseria/A/WG")
prefix <- "./Neisseria.A.output"
dat <- read.CFML(prefix=prefix)
setwd("/home/caitiecollins/ClonalFrameML/src/pubMLST/Neisseria/A/WG/CFML/")
save(dat, file="./read.CFML.output.Rdata")
snps <- dat$snps
## Recommended input into treeWAS:
tree <- dat$tree
## Optional input into treeWAS:
n.subs <- dat$n.subs
snps.rec <- dat$snps.rec
save(snps, file="./snps.Rdata")
save(tree, file="./tree.Rdata")
save(n.subs, file="./n.subs.Rdata")
save(snps.rec, file="./snps.rec.Rdata")
phen <- get(load("./phen_clean2.Rdata"))
out <- treeWAS(snps, phen, tree =  tree, n.snps.sim = 5*ncol(snps), plot.tree = TRUE, seed = 1)
out <- NULL
gc()
out <- treeWAS(snps, phen, tree =  tree, n.snps.sim = 5*ncol(snps), plot.tree = TRUE, seed = 1)
save(out, file="./treeWAS.out.5x.Rdata")
out.5x <- out
print(out)
gc()
