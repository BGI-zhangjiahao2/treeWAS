########################
## get PHEN for SET 1 ##
########################
#       if(set.number == 1){
#         ## simulate phen first, by random sampling ##
#         ## enforce even split of cases and controls??
#         #phen <- sample(c(rep("A", floor(n.ind/2)), rep("B", ceiling(n.ind/2)), replace=FALSE))
#         ## or just draw phen by purely random sampling...?
#         phen <- sample(c("A", "B"), n.ind, replace=TRUE)
#         phen <- as.factor(phen)
#       }else{
#         phen <- NULL
#       }
############################
## simulate data and tree ##
############################
## TESTING -- used to be phen = phen (but Hyp: multiple rounds causing problems--if so, could rename to phen.prior, eg.)
## CHECK:
# print("NUMBER"); print(number)
# print("PHEN BEFORE"); print(phen)
gc()
filename.tree.plot[[i]] <- paste("./set", set.number, "_", number, "_tree_plot", ".pdf", sep="")
filename.panel.plot <- paste("./set", set.number, "_", number, "_panel_plot", ".pdf", sep="")
foo <- coalescent.sim(n.ind = n.ind,
n.snps = n.snps,
n.subs = n.subs,
n.snps.assoc = n.snps.assoc,
assoc.prob = assoc.prob,
n.phen.subs = n.phen.subs,
phen = NULL,
plot = TRUE,
heatmap = FALSE,
reconstruct = FALSE,
dist.dna.model = "JC69",
row.names = NULL,
grp.min = grp.min,
coaltree = coaltree,
set=set.number,
s = s,
af = af,
filename=list(filename.tree.plot[[i]],
filename.panel.plot),
seed = seed)
print("coalescent done")
gc()
####################################
## isolate common elements of foo ##
####################################
snps <- snps.ori <- snps.ori.ori <- foo$snps
if(!is.null(n.snps.assoc)) if(n.snps.assoc > 0){
snps.assoc <- snps.assoc.ori <- snps.assoc.loci <- foo$snps.assoc
}else{
snps.assoc <- NULL
}
phen <- phen.ori <- phen.ori.ori <- foo$phen
tree <- tree.ori <- foo$tree
phen.plot.col <- foo$phen.plot.col
## snps names:
if(is.null(colnames(snps))) colnames(snps) <- c(1:ncol(snps))
snps.names <- colnames(snps)
##########################################
## isolate set-specific elements of foo ##
##########################################
# if(is.null(phen)) phen <- foo$phen
## MAKE SURE PHEN IS IN CORRECT ORDER OF INDS NOT IN LEAF ORDER!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
######################
## save plot as pdf ##
######################
## CHECK-- Not sure, but may be safer to write this using pdf() instead of dev.copy ~ treeWAS plots...?
# filename.tree.plot[[i]] <- paste("./set", set.number, "_", number, "_tree_plot", ".pdf", sep="")
# dev.copy(pdf, file=filename.tree.plot[[i]], width=7, height=11) # , pointsize=1
# dev.off()
}# end from.file == FALSE
##############################################################################################################################
############################################### *** treeWAS *** ##############################################################
##############################################################################################################################
sim.n.snps.ori <- sim.n.snps
if(is.null(sim.n.snps)) sim.n.snps <- ncol(snps)*10
#######################
## save treeWAS plot ##
#######################
## NB: plot.png will not be viewable until fn has finished running...
filename.plot[[i]] <- list()
for(t in 1:length(treeWAS.test)){
## Save only one plot per test:
# filename.plot[[i]][[t]] <- paste("./set",
#                             set.number,
#                             "_", number,
#                             "_plot_",
#                             treeWAS.test[t],
#                             ".pdf", sep="")
## Save both Manhattan and Hist per test:
filename.plot[[i]][[t]] <- c(## manhattan:
paste("./set",
set.number,
"_", number,
"_plot_manhattan_",
treeWAS.test[t],
".pdf", sep=""),
## null.dist:
paste("./set",
set.number,
"_", number,
"_plot_",
treeWAS.test[t],
".pdf", sep="")
)
}
#################
## RUN treeWAS ##
#################
print("treeWAS started")
gc()
set.seed(seed)
syst.time <- system.time( # 341
out <- treeWAS(snps = snps,
phen = phen,
n.subs = NULL,
tree = tree,
dist.dna.model = "JC69",
plot.tree = FALSE,
test = treeWAS.test,
p.value = p.value,
p.value.correct = p.value.correct,
p.value.by = p.value.by,
sim.n.snps = sim.n.snps,
n.reps = 1,
plot.manhattan = TRUE,
plot.null.dist = TRUE,
plot.dist = FALSE,
snps.assoc = snps.assoc,
snps.reconstruction = "parsimony",
phen.reconstruction = "parsimony",
filename.plot=filename.plot[[i]])
)
print("treeWAS done")
gc()
# i <- 1 #####
#####
# dev.copy(pdf, file=filename.plot[[i]], width=7, height=11) # , pointsize=12
# dev.off()
##################################
## isolate df of Sig SNPs found ##
##################################
res.complete <- out
res <- out$res
score3 <- out$SCORE3
corr.sim <- out$vals$terminal$corr.sim
corr.dat <- out$vals$terminal$corr.dat
names(out$dat)
names(out$vals)
names(out$vals$terminal)
names(out$vals$terminal$corr.dat)
names(res$terminal$pval.0.01.bonf.count.10.x.n.snps)
res$terminal$pval.0.01.bonf.count.10.x.n.snps$sig.thresh
thresh <- res$terminal$pval.0.01.bonf.count.10.x.n.snps$sig.thresh
length(which(corr.sim > thresh))
length(which(corr.dat > thresh))
hline(0.7)
?abline
abline(h=0.7)
abline(h=thresh)
res$terminal$pval.0.01.bonf.count.10.x.n.snps$sig.snps
nrow(res$terminal$pval.0.01.bonf.count.10.x.n.snps$sig.snps)
thresh-0.05
abline(h=thresh-0.05, col="blue", lwd=2)
thresh-0.005
thresh
abline(h=thresh-0.005, col="purple", lwd=2)
source('C:/Users/Caitlin/treeWAS/pkg/R/simTest.R')
library(treeWAS)
abline(v=thresh, col="purple", lwd=2)
1*0.005
str(corr.dat)
log.pvals <- corr.dat
log.pval <- corr.dat
(max(log.pval)*0.005)
0.005(100)
0.005*100
library(treeWAS)
n.reps <- 1
file.n <- NULL
dist_0 <- get(load("C:/Users/Caitlin/treeWAS/misc/CFML_R_0_dist.Rdata"))
simTest(
## simTest args:
set.number = 1,
n.reps = n.reps,
set.seed.as = "file.number",
working.dir = "/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims",
## data from file args:
from.file = FALSE,
file.n = file.n,
Windows=TRUE,
## coalescent.sim args:
n.ind = 100,
n.snps = 10000, # gen.size
# sim.by = "locus",
n.subs = dist_0, # 15, # theta (*2)
n.phen.subs = 15, # theta_p = NULL # 15
n.snps.assoc = 10, #
# assoc.option = "all",
assoc.prob = NULL, #100, #  90, #
grp.min = 0.25,
s = 0.2,
af = 10,
coaltree = FALSE,
## treeWAS args:
## RUNNING ALL OF THESE OPTIONS (FOR NOW):
p.value = 0.01, # REQUIRED FOR FISHER TEST
#   p.value.correct = c("bonf", "fdr", FALSE), #mt.correct = FALSE
#   p.value.by = c("count", "density"),
sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL ###################### CAREFUL (10,000) !!
treeWAS.test = c("terminal", "simultaneous", "subsequent"), # "score"
snps.reconstruction = "parsimony",
phen.reconstruction = "parsimony"
)
names(out)
names(res)
names(res$terminal)
test
res$terminal$pval.0.01.bonf.count.10.x.n.snps$sig.snps
i <- 1
length(RES)
RES <- list()
RES[[1]] <- res$terminal$pval.0.01.bonf.count.10.x.n.snps$sig.snps
i
RES[[i]]$pval.0.01.bonf.count.10.x.n.snps$sig.snps$SNP.locus
RES
RES <- list()
RES[[1]] <- res$terminal$pval.0.01.bonf.count.10.x.n.snps$sig.snps$SNP.locus
RES
SNP.loci <- list()
SNP.loci[[i]] <- RES[[i]]$pval.0.01.bonf.count.10.x.n.snps$sig.snps$SNP.locus
SNP.loci[[1]] <- RES[[1]]
SNP.loci[[2]] <- c(1,2,3)
SNP.loci[[3]] <- SNP.loci[[1]][1:5]
SNP.loci
names(SNP.loci) <- test
test <- c("terminal", "simultaneous", "subsequent")
names(SNP.loci) <- test
SNP.loci
as.vector(unlist(SNP.loci))
unique(as.vector(unlist(SNP.loci)))
sort(unique(as.vector(unlist(SNP.loci))), decreasing=FALSE)
SNP.loci[[(length(test)+1)]] <- sort(unique(as.vector(unlist(SNP.loci))), decreasing=FALSE)
names(SNP.loci)[length(test)+1] <- "treeWAS.all"
SNP.loci
SNP.loci <- SNP.loci[1:3]
SNP.loci
temp <- SNP.loci
SNP.loci[[1]] <- sort(unique(as.vector(unlist(SNP.loci))), decreasing=FALSE)
names(SNP.loci) <- "treeWAS.all"
SNP.loci
SNP.loci.ori <- temp
SNP.loci <- list()
SNP.loci[[1]] <- sort(unique(as.vector(unlist(SNP.loci.ori))), decreasing=FALSE)
names(SNP.loci) <- "treeWAS.all"
SNP.loci
names(SNP.loci) <- NULL
SNP.loci[[2]] <- SNP.loci.ori
names(SNP.loci) <- c("treeWAS.all", "treeWAS.tests")
SNP.loci
names(SNP.loci) <- c("treeWAS.all", "treeWAS")
SNP.loci
names(out)
names(out$dat)
names(out$vals)
names(out$res)
names(SNP.loci) <- c("treeWAS.combined", "treeWAS")
treeWAS.all <- SNP.loci
treeWAS.all
names(res)
names(res$terminal)
res$terminal$pval.0.01.bonf.count.10.x.n.snps$sig.snps
source('C:/Users/Caitlin/treeWAS/pkg/R/simTest.R')
dist_0
dist_0 <- get(load("C:/Users/Caitlin/treeWAS/misc/CFML_R_0_dist.Rdata"))
barplot(dist_0, names.arg=c(1:length(dist_0)))
dist_0.01 <- get(load("C:/Users/Caitlin/treeWAS/misc/CFML_R_0.01_dist.Rdata"))
barplot(dist_0.01, names.arg=c(1:length(dist_0.01)))
# dist_0.05 <- get(load("E:/treeWAS_misc/SimBac/CFML_R_0.05_dist.Rdata"))
dist_0.05 <- get(load("C:/Users/Caitlin/treeWAS/misc/CFML_R_0.05_dist.Rdata"))
barplot(dist_0.05, names.arg=c(1:length(dist_0.05)))
dist_0.1 <- get(load("C:/Users/Caitlin/treeWAS/misc/CFML_R_0.1_dist.Rdata"))
barplot(dist_0.1, names.arg=c(1:length(dist_0.1)))
## Load libraries:
library(foreach)
library(doParallel)
## Calculate the number of cores:
no_cores <- detectCores() - 1 # 3
## Initiate implicit cluster:
registerDoParallel(no_cores)
str(tree)
sum(tree$edge.length)
20/sum(tree$edge.length)
20/10
source('C:/Users/Caitlin/treeWAS/pkg/R/simTest.R')
s <- 20
s/sum(tree$edge.length)
source('C:/Users/Caitlin/treeWAS/pkg/R/coalescent.sim.R')
document()
setwd("C:/Users/Caitlin/treeWAS/pkg")
document()
library(treeWAS)
library(treeWAS)
dist_0 <- get(load("C:/Users/Caitlin/treeWAS/misc/CFML_R_0_dist.Rdata"))
barplot(dist_0, names.arg=c(1:length(dist_0)))
dist_0.01 <- get(load("C:/Users/Caitlin/treeWAS/misc/CFML_R_0.01_dist.Rdata"))
barplot(dist_0.01, names.arg=c(1:length(dist_0.01)))
# dist_0.05 <- get(load("E:/treeWAS_misc/SimBac/CFML_R_0.05_dist.Rdata"))
dist_0.05 <- get(load("C:/Users/Caitlin/treeWAS/misc/CFML_R_0.05_dist.Rdata"))
barplot(dist_0.05, names.arg=c(1:length(dist_0.05)))
dist_0.1 <- get(load("C:/Users/Caitlin/treeWAS/misc/CFML_R_0.1_dist.Rdata"))
barplot(dist_0.1, names.arg=c(1:length(dist_0.1)))
## Load libraries:
library(foreach)
library(doParallel)
## Calculate the number of cores:
no_cores <- detectCores() - 1 # 3
## Initiate implicit cluster:
registerDoParallel(no_cores)
no_cores
out <- foreach(n.reps=rep(1, 10), file.n=c(101:110), .packages="treeWAS") %dopar%
simTest(
## simTest args:
set.number = 3,
n.reps = n.reps,
set.seed.as = "file.number",
working.dir = "/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims",
## data from file args:
from.file = FALSE,
file.n = file.n,
Windows=TRUE,
## coalescent.sim args:
n.ind = 100,
n.snps = 10000, # gen.size
# sim.by = "locus",
n.subs = dist_0, # 15, # theta (*2)
n.phen.subs = 15, # theta_p = NULL # 15
n.snps.assoc = 10, #
# assoc.option = "all",
assoc.prob = NULL, #100, #  90, #
grp.min = 0.25,
s = 20,
af = 10,
coaltree = FALSE,
## treeWAS args:
## RUNNING ALL OF THESE OPTIONS (FOR NOW):
p.value = 0.01, # REQUIRED FOR FISHER TEST
#   p.value.correct = c("bonf", "fdr", FALSE), #mt.correct = FALSE
#   p.value.by = c("count", "density"),
sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL ###################### CAREFUL (10,000) !!
treeWAS.test = c("terminal", "simultaneous", "subsequent"), # "score"
snps.reconstruction = "parsimony",
phen.reconstruction = "parsimony"
)
out <- foreach(n.reps=rep(1, 10), file.n=c(101:110), .packages="treeWAS") %dopar%
simTest(
## simTest args:
set.number = 2,
n.reps = n.reps,
set.seed.as = "file.number",
working.dir = "/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims",
## data from file args:
from.file = FALSE,
file.n = file.n,
Windows=TRUE,
## coalescent.sim args:
n.ind = 100,
n.snps = 10000, # gen.size
# sim.by = "locus",
n.subs = dist_0, # 15, # theta (*2)
n.phen.subs = 15, # theta_p = NULL # 15
n.snps.assoc = 10, #
# assoc.option = "all",
assoc.prob = NULL, #100, #  90, #
grp.min = 0.25,
s = 20,
af = 10,
coaltree = FALSE,
## treeWAS args:
## RUNNING ALL OF THESE OPTIONS (FOR NOW):
p.value = 0.01, # REQUIRED FOR FISHER TEST
#   p.value.correct = c("bonf", "fdr", FALSE), #mt.correct = FALSE
#   p.value.by = c("count", "density"),
sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL ###################### CAREFUL (10,000) !!
treeWAS.test = c("terminal", "simultaneous", "subsequent"), # "score"
snps.reconstruction = "parsimony",
phen.reconstruction = "parsimony"
)
out <- foreach(n.reps=rep(1, 10), file.n=c(101:110), .packages="treeWAS") %dopar%
simTest(
## simTest args:
set.number = 1,
n.reps = n.reps,
set.seed.as = "file.number",
working.dir = "/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims",
## data from file args:
from.file = FALSE,
file.n = file.n,
Windows=TRUE,
## coalescent.sim args:
n.ind = 100,
n.snps = 10000, # gen.size
# sim.by = "locus",
n.subs = dist_0, # 15, # theta (*2)
n.phen.subs = 15, # theta_p = NULL # 15
n.snps.assoc = 10, #
# assoc.option = "all",
assoc.prob = NULL, #100, #  90, #
grp.min = 0.25,
s = 20,
af = 10,
coaltree = FALSE,
## treeWAS args:
## RUNNING ALL OF THESE OPTIONS (FOR NOW):
p.value = 0.01, # REQUIRED FOR FISHER TEST
#   p.value.correct = c("bonf", "fdr", FALSE), #mt.correct = FALSE
#   p.value.by = c("count", "density"),
sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL ###################### CAREFUL (10,000) !!
treeWAS.test = c("terminal", "simultaneous", "subsequent"), # "score"
snps.reconstruction = "parsimony",
phen.reconstruction = "parsimony"
)
source('C:/Users/Caitlin/treeWAS/pkg/R/simTest.R')
getwd()
library(treeWAS)
dist_0 <- get(load("C:/Users/Caitlin/treeWAS/misc/CFML_R_0_dist.Rdata"))
barplot(dist_0, names.arg=c(1:length(dist_0)))
dist_0.01 <- get(load("C:/Users/Caitlin/treeWAS/misc/CFML_R_0.01_dist.Rdata"))
barplot(dist_0.01, names.arg=c(1:length(dist_0.01)))
# dist_0.05 <- get(load("E:/treeWAS_misc/SimBac/CFML_R_0.05_dist.Rdata"))
dist_0.05 <- get(load("C:/Users/Caitlin/treeWAS/misc/CFML_R_0.05_dist.Rdata"))
barplot(dist_0.05, names.arg=c(1:length(dist_0.05)))
dist_0.1 <- get(load("C:/Users/Caitlin/treeWAS/misc/CFML_R_0.1_dist.Rdata"))
barplot(dist_0.1, names.arg=c(1:length(dist_0.1)))
## Load libraries:
library(foreach)
library(doParallel)
## Calculate the number of cores:
no_cores <- detectCores() - 1 # 3
## Initiate implicit cluster:
registerDoParallel(no_cores)
out <- foreach(n.reps=rep(1, 10), file.n=c(101:110), .packages="treeWAS") %dopar%
simTest(
## simTest args:
set.number = 2,
n.reps = n.reps,
set.seed.as = "file.number",
working.dir = "/media/caitiecollins/88CC9BCECC9BB4C2/Cait 2016/Work/Xavier/Sims",
## data from file args:
from.file = FALSE,
file.n = file.n,
Windows=TRUE,
## coalescent.sim args:
n.ind = 100,
n.snps = 10000, # gen.size
# sim.by = "locus",
n.subs = dist_0, # 15, # theta (*2)
n.phen.subs = 15, # theta_p = NULL # 15
n.snps.assoc = 10, #
# assoc.option = "all",
assoc.prob = NULL, #100, #  90, #
grp.min = 0.25,
s = 20,
af = 10,
coaltree = FALSE,
## treeWAS args:
## RUNNING ALL OF THESE OPTIONS (FOR NOW):
p.value = 0.01, # REQUIRED FOR FISHER TEST
#   p.value.correct = c("bonf", "fdr", FALSE), #mt.correct = FALSE
#   p.value.by = c("count", "density"),
sim.n.snps = 100000, # 10*n.snps #sim.gen.size = NULL ###################### CAREFUL (10,000) !!
treeWAS.test = c("terminal", "simultaneous", "subsequent"), # "score"
snps.reconstruction = "parsimony",
phen.reconstruction = "parsimony"
)
SNP.loci <- list
SNP.loci <- list()
SNP.loci[[1]]
SNP.loci[[1]] <- NULL
SNP.loci
SNP.loci[[2]] <- c(1,2)
SNP.loci
SNP.loci[[2]] <- SNP.loci[[3]] <- NULL
SNP.loci
is.null(SNP.loci)
SNP.loci <- list()
SNP.loci[[1]] <- SNP.loci[[2]] <- SNP.loci[[3]] <- NULL
SNP.loci
is.null(SNP.loci)
length(SNP.loci)
SNP.loci <- list()
SNP.loci[[1]] <- NULL
SNP.loci[[2]] <- c(1,2)
SNP.loci[[3]] <- NULL
SNP.loci
length(SNP.loci)
is.null(SNP.loci[[3]])
SNP.loci <- list()
as.vector(unlist(SNP.loci))
sort(as.vector(unlist(SNP.loci)))
SNP.loci
SNP.loci <- vector("list", length=3)
SNP.loci
SNP.loci <- vector("list", length=length(test))
names(SNP.loci) <- test
length(SNP.loci)
SNP.loci
length(as.vector(unlist(SNP.loci)))
SNP.loci$terminal
source('C:/Users/Caitlin/treeWAS/pkg/R/simTest.R')
